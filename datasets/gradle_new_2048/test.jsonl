{"label": "get|default|schedule|version", "code": "package org.activiti.spring;\n\nimport org.activiti.engine.impl.calendar.*;\nimport org.activiti.engine.impl.util.DefaultClockImpl;\nimport org.activiti.engine.runtime.Clock;\n\n/**\n * Creates an advanced cycle business calendar manager (ACBCM). The ACBCM can handle daylight savings changes when the scheduled time zone is different than the server time zone.\n * <p>\n * Create a factory bean\n * \n * <pre>\n * &lt;bean id=\"businessCalendarManagerFactory\" class=\"org.activiti.spring.SpringAdvancedBusinessCalendarManagerFactory\" /&gt;\n * </pre>\n * \n * Add the manager to your org.activiti.spring.SpringProcessEngineConfiguration bean\n * \n * <pre>\n *  &lt;bean id=\"processEngineConfiguration\" class=\"org.activiti.spring.SpringProcessEngineConfiguration\"&gt;\n *    ...\n *    &lt;property name=\"businessCalendarManager\"&gt;\n *      &lt;bean id=\"advancedBusinessCalendarManager\" factory-bean=\"businessCalendarManagerFactory\" factory-method=\"getBusinessCalendarManager\" /&gt;\n *    &lt;/property&gt;\n *    ...\n *  &lt;/bean&gt;\n * </pre>\n * \n\n * @see AdvancedCycleBusinessCalendar\n */\npublic class SpringAdvancedBusinessCalendarManagerFactory {\n\n  private Integer defaultScheduleVersion;\n\n  private Clock clock;\n\n  public Integer METHOD_NAME() {\n    return defaultScheduleVersion;\n  }\n\n  public void setDefaultScheduleVersion(Integer defaultScheduleVersion) {\n    this.defaultScheduleVersion = defaultScheduleVersion;\n  }\n\n  public Clock getClock() {\n    if (clock == null) {\n      clock = new DefaultClockImpl();\n    }\n    return clock;\n  }\n\n  public void setClock(Clock clock) {\n    this.clock = clock;\n  }\n\n  public BusinessCalendarManager getBusinessCalendarManager() {\n    MapBusinessCalendarManager mapBusinessCalendarManager = new MapBusinessCalendarManager();\n    mapBusinessCalendarManager.addBusinessCalendar(DurationBusinessCalendar.NAME, new DurationBusinessCalendar(getClock()));\n    mapBusinessCalendarManager.addBusinessCalendar(DueDateBusinessCalendar.NAME, new DueDateBusinessCalendar(getClock()));\n    mapBusinessCalendarManager.addBusinessCalendar(AdvancedCycleBusinessCalendar.NAME, new AdvancedCycleBusinessCalendar(getClock(), defaultScheduleVersion));\n\n    return mapBusinessCalendarManager;\n  }\n\n}\n"}
{"label": "job|rejected", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring;\n\nimport org.activiti.engine.impl.asyncexecutor.AsyncExecutor;\nimport org.activiti.engine.impl.asyncexecutor.ExecuteAsyncRunnable;\nimport org.activiti.engine.impl.persistence.entity.JobEntity;\nimport org.activiti.engine.runtime.Job;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * \n\n */\npublic class SpringCallerRunsRejectedJobsHandler implements SpringRejectedJobsHandler {\n\n  private static Logger log = LoggerFactory.getLogger(SpringCallerRunsRejectedJobsHandler.class);\n\n  public void METHOD_NAME(AsyncExecutor asyncExecutor, Job job) {\n    try {\n      // execute rejected work in caller thread (potentially blocking job\n      // acquisition)\n      new ExecuteAsyncRunnable((JobEntity) job, asyncExecutor.getProcessEngineConfiguration()).run();\n    } catch (Exception e) {\n      log.error(\"Failed to execute rejected job \" + job.getId(), e);\n    }\n  }\n\n}\n"}
{"label": "determine|resource|name", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.autodeployment;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.io.ContextResource;\nimport org.springframework.core.io.Resource;\n\nimport java.io.IOException;\n\n/**\n * Abstract base class for implementations of {@link AutoDeploymentStrategy}.\n * \n\n */\npublic abstract class AbstractAutoDeploymentStrategy implements AutoDeploymentStrategy {\n\n  /**\n   * Gets the deployment mode this strategy handles.\n   * \n   * @return the name of the deployment mode\n   */\n  protected abstract String getDeploymentMode();\n\n  @Override\n  public boolean handlesMode(final String mode) {\n    return StringUtils.equalsIgnoreCase(mode, getDeploymentMode());\n  }\n\n  /**\n   * Determines the name to be used for the provided resource.\n   * \n   * @param resource\n   *          the resource to get the name for\n   * @return the name of the resource\n   */\n  protected String METHOD_NAME(final Resource resource) {\n    String resourceName = null;\n\n    if (resource instanceof ContextResource) {\n      resourceName = ((ContextResource) resource).getPathWithinContext();\n\n    } else if (resource instanceof ByteArrayResource) {\n      resourceName = resource.getDescription();\n\n    } else {\n      try {\n        resourceName = resource.getFile().getAbsolutePath();\n      } catch (IOException e) {\n        resourceName = resource.getFilename();\n      }\n    }\n    return resourceName;\n  }\n\n}\n"}
{"label": "open|transaction|context", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring;\n\nimport org.activiti.engine.impl.cfg.TransactionContext;\nimport org.activiti.engine.impl.cfg.TransactionContextFactory;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n/**\n\n */\npublic class SpringTransactionContextFactory implements TransactionContextFactory {\n\n  protected PlatformTransactionManager transactionManager;\n  protected Integer transactionSynchronizationAdapterOrder;\n\n  public SpringTransactionContextFactory(PlatformTransactionManager transactionManager) {\n    this(transactionManager, null);\n  }\n\n  public SpringTransactionContextFactory(PlatformTransactionManager transactionManager, Integer transactionSynchronizationAdapterOrder) {\n    this.transactionManager = transactionManager;\n    this.transactionSynchronizationAdapterOrder = transactionSynchronizationAdapterOrder;\n  }\n\n  public TransactionContext METHOD_NAME(CommandContext commandContext) {\n    return new SpringTransactionContext(transactionManager, commandContext, transactionSynchronizationAdapterOrder);\n  }\n\n}\n"}
{"label": "build|process|engine", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring;\n\nimport java.net.URL;\nimport java.util.Map;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.ProcessEngine;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.GenericXmlApplicationContext;\nimport org.springframework.core.io.UrlResource;\n\n/**\n\n */\npublic class SpringConfigurationHelper {\n\n  private static Logger log = LoggerFactory.getLogger(SpringConfigurationHelper.class);\n\n  public static ProcessEngine METHOD_NAME(URL resource) {\n    log.debug(\"==== BUILDING SPRING APPLICATION CONTEXT AND PROCESS ENGINE =========================================\");\n\n    ApplicationContext applicationContext = new GenericXmlApplicationContext(new UrlResource(resource));\n    Map<String, ProcessEngine> beansOfType = applicationContext.getBeansOfType(ProcessEngine.class);\n    if ((beansOfType == null) || (beansOfType.isEmpty())) {\n      throw new ActivitiException(\"no \" + ProcessEngine.class.getName() + \" defined in the application context \" + resource.toString());\n    }\n\n    ProcessEngine processEngine = beansOfType.values().iterator().next();\n\n    log.debug(\"==== SPRING PROCESS ENGINE CREATED ==================================================================\");\n    return processEngine;\n  }\n\n}\n"}
{"label": "get|session|type", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring;\n\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.impl.interceptor.Session;\nimport org.activiti.engine.impl.interceptor.SessionFactory;\nimport org.activiti.engine.impl.variable.EntityManagerSession;\nimport org.activiti.engine.impl.variable.EntityManagerSessionImpl;\nimport org.springframework.orm.jpa.EntityManagerFactoryUtils;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\n\n/**\n * Session Factory for {@link EntityManagerSession}.\n * <p>\n * Must be used when the {@link EntityManagerFactory} is managed by Spring. This implementation will retrieve the {@link EntityManager} bound to the thread by Spring in case a transaction already\n * started.\n * \n\n */\npublic class SpringEntityManagerSessionFactory implements SessionFactory {\n\n  protected EntityManagerFactory entityManagerFactory;\n  protected boolean handleTransactions;\n  protected boolean closeEntityManager;\n\n  public SpringEntityManagerSessionFactory(Object entityManagerFactory, boolean handleTransactions, boolean closeEntityManager) {\n    this.entityManagerFactory = (EntityManagerFactory) entityManagerFactory;\n    this.handleTransactions = handleTransactions;\n    this.closeEntityManager = closeEntityManager;\n  }\n\n  public Class<?> METHOD_NAME() {\n    return EntityManagerFactory.class;\n  }\n\n  public Session openSession(CommandContext commandContext) {\n    EntityManager entityManager = EntityManagerFactoryUtils.getTransactionalEntityManager(entityManagerFactory);\n    if (entityManager == null) {\n      return new EntityManagerSessionImpl(entityManagerFactory, handleTransactions, closeEntityManager);\n    }\n    return new EntityManagerSessionImpl(entityManagerFactory, entityManager, false, false);\n  }\n\n}\n"}
{"label": "called|in|expression", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.taskListener;\n\nimport org.activiti.engine.delegate.CustomPropertiesResolver;\nimport org.activiti.engine.delegate.DelegateExecution;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n\n */\npublic class MyCustomPropertiesResolver implements CustomPropertiesResolver {\n\n  @Override\n  public Map<String, Object> getCustomPropertiesMap(DelegateExecution execution) {\n    Map<String, Object> myMap = new HashMap<String, Object>();\n    myMap.put(\"customProp1\", execution.getCurrentActivityId());\n    return myMap;\n  }\n\n  public Map<String, Object> METHOD_NAME(String currentActivityId) {\n    Map<String, Object> myMap = new HashMap<String, Object>();\n    myMap.put(\"customProp1\", currentActivityId);\n    return myMap;\n  }\n}\n"}
{"label": "notify", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.taskListener;\n\nimport org.activiti.engine.delegate.DelegateTask;\nimport org.activiti.engine.delegate.TaskListener;\n\n/**\n\n */\npublic class MyTaskListener implements TaskListener {\n\n  public void METHOD_NAME(DelegateTask delegateTask) {\n    delegateTask.setVariable(\"calledThroughNotify\", delegateTask.getName() + \"-notify\");\n  }\n\n  public void calledInExpression(DelegateTask task, String eventName) {\n    task.setVariable(\"calledInExpression\", task.getName() + \"-\" + eventName);\n  }\n\n}\n"}
{"label": "test|task|listener|delegate|expression", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.taskListener;\n\nimport org.activiti.engine.runtime.ProcessInstance;\nimport org.activiti.engine.task.Task;\nimport org.activiti.engine.test.Deployment;\nimport org.activiti.spring.impl.test.SpringActivitiTestCase;\nimport org.springframework.test.context.ContextConfiguration;\n\n/**\n\n */\n@ContextConfiguration(\"classpath:org/activiti/spring/test/taskListener/TaskListenerDelegateExpressionTest-context.xml\")\npublic class TaskListenerSpringTest extends SpringActivitiTestCase {\n\n  @Deployment\n  public void METHOD_NAME() {\n    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"taskListenerDelegateExpression\");\n\n    // Completing first task will set variable on process instance\n    Task task = taskService.createTaskQuery().singleResult();\n    taskService.complete(task.getId());\n    assertEquals(\"task1-complete\", runtimeService.getVariable(processInstance.getId(), \"calledInExpression\"));\n\n    // Completing second task will set variable on process instance\n    task = taskService.createTaskQuery().singleResult();\n    taskService.complete(task.getId());\n    assertEquals(\"task2-notify\", runtimeService.getVariable(processInstance.getId(), \"calledThroughNotify\"));\n  }\n\n}\n"}
{"label": "test|custom|properties|map|delegate|expression", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.taskListener;\n\nimport org.activiti.engine.task.Task;\nimport org.activiti.engine.test.Deployment;\nimport org.activiti.spring.impl.test.SpringActivitiTestCase;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\n\n/**\n\n */\n@ContextConfiguration(\"classpath:org/activiti/spring/test/taskListener/TaskListenerDelegateExpressionTest-context.xml\")\npublic class TransactionDependentTaskListenerSpringTest extends SpringActivitiTestCase {\n\n  @Autowired\n  MyTransactionDependentTaskListener listener;\n\n  @Deployment\n  public void METHOD_NAME() {\n    runtimeService.startProcessInstanceByKey(\"transactionDependentTaskListenerProcess\");\n\n    // Completing first task will trigger the first closed listener (expression custom properties resolver)\n    Task task = taskService.createTaskQuery().singleResult();\n    taskService.complete(task.getId());\n\n    assertEquals(\"task3\", listener.getCurrentTasks().get(0).getTaskId());\n    assertEquals(\"task3\", listener.getCurrentTasks().get(0).getCustomPropertiesMap().get(\"customProp1\"));\n\n    // Completing second task will trigger the second closed listener (delegate expression custom properties resolver)\n    task = taskService.createTaskQuery().singleResult();\n    taskService.complete(task.getId());\n\n    assertEquals(\"task4\", listener.getCurrentTasks().get(1).getTaskId());\n    assertEquals(\"task4\", listener.getCurrentTasks().get(1).getCustomPropertiesMap().get(\"customProp1\"));\n  }\n\n}\n"}
{"label": "notify", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.servicetask;\n\nimport org.activiti.engine.delegate.DelegateTask;\nimport org.activiti.engine.delegate.TaskListener;\nimport org.activiti.engine.impl.el.FixedValue;\n\n/**\n\n\n */\npublic class MyTaskListenerBean implements TaskListener {\n\n  private FixedValue someField;\n\n  public void METHOD_NAME(DelegateTask delegateTask) {\n    delegateTask.getExecution().setVariable(\"taskListenerVar\", \"working\");\n    if (someField != null) {\n      delegateTask.getExecution().setVariable(\"taskListenerField\", someField.getValue(delegateTask));\n    }\n  }\n\n  public FixedValue getSomeField() {\n    return someField;\n  }\n\n  public void setSomeField(FixedValue someField) {\n    this.someField = someField;\n  }\n\n}\n"}
{"label": "test|catch|error|thrown|by|java|delegate|on|service|task", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.servicetask;\n\nimport org.activiti.engine.task.Task;\nimport org.activiti.engine.test.Deployment;\nimport org.activiti.spring.impl.test.SpringActivitiTestCase;\nimport org.springframework.test.context.ContextConfiguration;\n\n/**\n\n\n * @see https://activiti.atlassian.net/browse/ACT-1166\n */\n@ContextConfiguration(\"classpath:org/activiti/spring/test/servicetask/serviceraskSpringTestCatchError-context.xml\")\npublic class BoundaryErrorEventSpringTest extends SpringActivitiTestCase {\n\n  @Deployment\n  public void METHOD_NAME() {\n    String procId = runtimeService.startProcessInstanceByKey(\"catchErrorThrownByExpressionDelegateOnServiceTask\").getId();\n    assertThatErrorHasBeenCaught(procId);\n  }\n\n  private void assertThatErrorHasBeenCaught(String procId) {\n    // The service task will throw an error event,\n    // which is caught on the service task boundary\n    assertEquals(\"No tasks found in task list.\", 1, taskService.createTaskQuery().count());\n    Task task = taskService.createTaskQuery().singleResult();\n    assertEquals(\"Escalated Task\", task.getName());\n\n    // Completing the task will end the process instance\n    taskService.complete(task.getId());\n    assertProcessEnded(procId);\n  }\n}\n"}
{"label": "get|sentence", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.servicetask;\n\n/**\n\n */\npublic class SentenceGenerator {\n\n  public String METHOD_NAME() {\n    return \"Activiti BPMN 2.0 process engine\";\n  }\n\n}\n"}
{"label": "start|process", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.servicetask;\n\nimport org.activiti.engine.RuntimeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n\n */\n@Component(\"startProcessInstanceDelegate\")\npublic class StartProcessInstanceTestDelegateWithInjection {\n\n  @Autowired\n  private RuntimeService runtimeService;\n\n  public void METHOD_NAME() {\n    runtimeService.startProcessInstanceByKey(\"oneTaskProcess\");\n  }\n\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.servicetask;\n\nimport org.activiti.engine.delegate.DelegateExecution;\nimport org.activiti.engine.delegate.JavaDelegate;\nimport org.activiti.engine.impl.el.FixedValue;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n\n\n */\npublic class DelegateExpressionBean implements JavaDelegate {\n\n  private static final Logger log = LoggerFactory.getLogger(DelegateExpressionBean.class);\n  private SentenceGenerator sentenceGenerator;\n\n  private FixedValue someField;\n\n  public void METHOD_NAME(DelegateExecution execution) {\n    log.info(\"Entering DelegateExpressionBean.execute()\");\n    if (sentenceGenerator != null) {\n      execution.setVariable(\"myVar\", sentenceGenerator.getSentence());\n    } else {\n      execution.setVariable(\"myVar\", \"SentenceGenerator is not injected by spring\");\n    }\n    if (someField != null) {\n      execution.setVariable(\"fieldInjection\", someField.getValue(execution));\n    } else {\n      execution.setVariable(\"fieldInjection\", \"Field injection not working\");\n    }\n    log.info(\"Leaving DelegateExpressionBean.execute()\");\n  }\n\n  public void setSentenceGenerator(SentenceGenerator sentenceGenerator) {\n    this.sentenceGenerator = sentenceGenerator;\n  }\n\n  public FixedValue getSomeField() {\n    return someField;\n  }\n\n  public void setSomeField(FixedValue someField) {\n    this.someField = someField;\n  }\n\n}\n"}
{"label": "notify", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.servicetask;\n\nimport org.activiti.engine.delegate.DelegateExecution;\nimport org.activiti.engine.delegate.ExecutionListener;\nimport org.activiti.engine.impl.el.FixedValue;\n\n/**\n\n\n */\npublic class MyExecutionListenerBean implements ExecutionListener {\n\n  private FixedValue someField;\n\n  public void METHOD_NAME(DelegateExecution execution) {\n    execution.setVariable(\"executionListenerVar\", \"working\");\n    if (someField != null) {\n      execution.setVariable(\"executionListenerField\", someField.getValue(execution));\n    }\n  }\n\n  public FixedValue getSomeField() {\n    return someField;\n  }\n\n  public void setSomeField(FixedValue someField) {\n    this.someField = someField;\n  }\n\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.servicetask;\n\nimport org.activiti.engine.RuntimeService;\nimport org.activiti.engine.delegate.DelegateExecution;\nimport org.activiti.engine.delegate.JavaDelegate;\nimport org.activiti.engine.impl.context.Context;\n\n/**\n\n */\npublic class StartProcessInstanceTestDelegate implements JavaDelegate {\n\n  public void METHOD_NAME(DelegateExecution execution) {\n    RuntimeService runtimeService = Context.getProcessEngineConfiguration().getRuntimeService();\n    runtimeService.startProcessInstanceByKey(\"oneTaskProcess\");\n  }\n\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.servicetask;\n\nimport org.activiti.engine.delegate.BpmnError;\nimport org.activiti.engine.delegate.DelegateExecution;\nimport org.activiti.engine.delegate.JavaDelegate;\n\n/**\n\n */\npublic class ThrowBpmnErrorDelegate implements JavaDelegate {\n\n  public void METHOD_NAME(DelegateExecution execution) {\n    Integer executionsBeforeError = (Integer) execution.getVariable(\"executionsBeforeError\");\n    Integer executions = (Integer) execution.getVariable(\"executions\");\n    if (executions == null) {\n      executions = 0;\n    }\n    executions++;\n    if (executionsBeforeError == null || executionsBeforeError < executions) {\n      throw new BpmnError(\"23\", \"This is a business fault, which can be caught by a BPMN Error Event.\");\n    } else {\n      execution.setVariable(\"executions\", executions);\n    }\n  }\n\n}\n"}
{"label": "set|sentence", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.servicetask;\n\nimport org.activiti.engine.delegate.DelegateExecution;\n\n/**\n\n */\npublic class SentenceToUpperCaseBean {\n\n  protected SentenceGenerator sentenceGenerator;\n\n  public void METHOD_NAME(DelegateExecution execution) {\n    execution.setVariable(\"myVar\", sentenceGenerator.getSentence().toUpperCase());\n  }\n\n  public void setSentenceGenerator(SentenceGenerator sentenceGenerator) {\n    this.sentenceGenerator = sentenceGenerator;\n  }\n\n}\n"}
{"label": "hello", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.transaction;\n\nimport org.activiti.engine.RuntimeService;\nimport org.activiti.engine.TaskService;\nimport org.springframework.beans.factory.annotation.Required;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.sql.DataSource;\n\n/**\n\n */\npublic class UserBean {\n\n  /**\n   * injected by Spring\n   */\n  private RuntimeService runtimeService;\n\n  /**\n   * injected by Spring\n   */\n  private TaskService taskService;\n\n  /**\n   * injected by Spring\n   */\n  private DataSource dataSource;\n\n  @Transactional\n  public void METHOD_NAME() {\n    // here you can do transactional stuff in your domain model\n    // and it will be combined in the same transaction as\n    // the startProcessInstanceByKey to the Activiti RuntimeService\n    runtimeService.startProcessInstanceByKey(\"helloProcess\");\n  }\n\n  @Transactional\n  public void completeTask(String taskId) {\n\n    // First insert a record in the MY_TABLE table\n    JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n    int nrOfRows = jdbcTemplate.update(\"insert into MY_TABLE values ('test');\");\n    if (nrOfRows != 1) {\n      throw new RuntimeException(\"Insert into MY_TABLE failed\");\n    }\n\n    taskService.complete(taskId);\n  }\n\n  // getters and setters\n  // //////////////////////////////////////////////////////\n\n  @Required\n  public void setRuntimeService(RuntimeService runtimeService) {\n    this.runtimeService = runtimeService;\n  }\n\n  @Required\n  public void setTaskService(TaskService taskService) {\n    this.taskService = taskService;\n  }\n\n  @Required\n  public void setDataSource(DataSource dataSource) {\n    this.dataSource = dataSource;\n  }\n\n}\n"}
{"label": "deploy|processes", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.transaction;\n\nimport org.activiti.engine.RepositoryService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n\n */\npublic class DeployBean {\n\n  @Autowired\n  protected RepositoryService repositoryService;\n\n  @Transactional\n  public void METHOD_NAME() {\n    repositoryService\n        .createDeployment()\n        .addString(\n            \"process01.bpmn20.xml\",\n            \"<definitions xmlns='http://www.omg.org/spec/BPMN/20100524/MODEL' targetNamespace='http://activiti.org/BPMN20'>\"\n                + \"<process id='process01' name='Insurance Damage Report' /></definitions>\").deploy();\n\n    repositoryService\n        .createDeployment()\n        .addString(\n            \"process01.bpmn20.xml\",\n            \"<definitions xmlns='http://www.omg.org/spec/BPMN/20100524/MODEL' targetNamespace='http://activiti.org/BPMN20'>\"\n                + \"<process id='process01' name='Insurance Damage Report' this_should='fail' /></definitions>\").deploy();\n  }\n\n  public RepositoryService getRepositoryService() {\n    return repositoryService;\n  }\n\n  public void setRepositoryService(RepositoryService repositoryService) {\n    this.repositoryService = repositoryService;\n  }\n\n}\n"}
{"label": "print|message", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.transaction;\n\nimport org.activiti.engine.delegate.DelegateExecution;\n\n/**\n\n */\npublic class Printer {\n\n  public void METHOD_NAME(DelegateExecution execution) {\n    execution.setVariable(\"myVar\", \"Hello from Printer!\");\n  }\n}\n"}
{"label": "called|in|expression", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.executionListener;\n\nimport org.activiti.engine.delegate.CustomPropertiesResolver;\nimport org.activiti.engine.delegate.DelegateExecution;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n\n */\npublic class MyCustomPropertiesResolver implements CustomPropertiesResolver {\n\n  @Override\n  public Map<String, Object> getCustomPropertiesMap(DelegateExecution execution) {\n    Map<String, Object> myMap = new HashMap<String, Object>();\n    myMap.put(\"customProp1\", execution.getCurrentActivityId());\n    return myMap;\n  }\n\n  public Map<String, Object> METHOD_NAME(String currentActivityId) {\n    Map<String, Object> myMap = new HashMap<String, Object>();\n    myMap.put(\"customProp1\", currentActivityId);\n    return myMap;\n  }\n}\n"}
{"label": "test|custom|properties|map|delegate|expression", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.executionListener;\n\nimport org.activiti.engine.task.Task;\nimport org.activiti.engine.test.Deployment;\nimport org.activiti.spring.impl.test.SpringActivitiTestCase;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\n\n/**\n\n */\n@ContextConfiguration(\"classpath:org/activiti/spring/test/executionListener/TransactionDependentListenerTest-context.xml\")\npublic class TransactionDependentExecutionListenerSpringTest extends SpringActivitiTestCase {\n\n  @Autowired\n  MyTransactionDependentExecutionListener listener;\n\n  @Deployment\n  public void METHOD_NAME() {\n    runtimeService.startProcessInstanceByKey(\"transactionDependentExecutionListenerProcess\");\n\n    // Completing first task will trigger the first closed listener (expression custom properties resolver)\n    Task task = taskService.createTaskQuery().singleResult();\n    taskService.complete(task.getId());\n\n    assertEquals(\"task3\", listener.getCurrentActivities().get(0).getActivityId());\n    assertEquals(\"task3\", listener.getCurrentActivities().get(0).getCustomPropertiesMap().get(\"customProp1\"));\n\n    // Completing second task will trigger the second closed listener (delegate expression custom properties resolver)\n    task = taskService.createTaskQuery().singleResult();\n    taskService.complete(task.getId());\n\n    assertEquals(\"task4\", listener.getCurrentActivities().get(1).getActivityId());\n    assertEquals(\"task4\", listener.getCurrentActivities().get(1).getCustomPropertiesMap().get(\"customProp1\"));\n  }\n\n}\n"}
{"label": "get|id", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.jpa;\n\nimport javax.persistence.*;\n\n/**\n\n */\n@Entity(name = \"SPRING_TEST_ORDER\")\npublic class LoanRequest {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  @Column(name = \"ID_\")\n  private Long id;\n\n  @Column(name = \"CUSTOMER_NAME_\")\n  private String customerName;\n\n  @Column(name = \"AMOUNT_\")\n  private Long amount;\n\n  @Column(name = \"APPROVED_\")\n  private boolean approved;\n\n  public Long METHOD_NAME() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getCustomerName() {\n    return customerName;\n  }\n\n  public void setCustomerName(String customerName) {\n    this.customerName = customerName;\n  }\n\n  public Long getAmount() {\n    return amount;\n  }\n\n  public void setAmount(Long amount) {\n    this.amount = amount;\n  }\n\n  public boolean isApproved() {\n    return approved;\n  }\n\n  public void setApproved(boolean approved) {\n    this.approved = approved;\n  }\n\n}\n"}
{"label": "new|loan|request", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.jpa;\n\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\n/**\n * Service bean that handles loan requests.\n * \n\n */\npublic class LoanRequestBean {\n\n  @PersistenceContext\n  private EntityManager entityManager;\n\n  @Transactional\n  public LoanRequest METHOD_NAME(String customerName, Long amount) {\n    LoanRequest lr = new LoanRequest();\n    lr.setCustomerName(customerName);\n    lr.setAmount(amount);\n    lr.setApproved(false);\n    entityManager.persist(lr);\n    return lr;\n  }\n\n  public LoanRequest getLoanRequest(Long id) {\n    return entityManager.find(LoanRequest.class, id);\n  }\n}\n"}
{"label": "return|process|definition|to|call", "code": "/*\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by\n * applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\npackage org.activiti.spring.test.expression.callactivity;\n\n/**\n * The NextProcessExecutionEvaluator class provides the name of the sub process to be executed next. This allows us to test dynamically wire in the calledElement in the callActivity task. In an actual\n * implementation there would be business logic here to determine which process to execute in the callActivity task.\n * \n\n */\npublic class NextProcessExecutionEvaluator {\n\n  public String METHOD_NAME() {\n    // some business logic here\n    return \"simpleSubProcess\";\n  }\n\n}\n"}
{"label": "test|limited|beans|exposed", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.spring.test.expression;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.runtime.ProcessInstance;\nimport org.activiti.engine.task.Task;\nimport org.activiti.engine.test.Deployment;\nimport org.activiti.spring.impl.test.SpringActivitiTestCase;\nimport org.springframework.test.context.ContextConfiguration;\n\n/**\n * Test limiting the exposed beans in expressions.\n * \n\n */\n@ContextConfiguration(\"classpath:org/activiti/spring/test/expression/expressionLimitedBeans-context.xml\")\npublic class SpringLimitedExpressionsTest extends SpringActivitiTestCase {\n\n  @Deployment\n  public void METHOD_NAME() throws Exception {\n    // Start process, which has a service-task which calls 'bean1', which is\n    // exposed\n    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"limitedExpressionProcess\");\n\n    String beanOutput = (String) runtimeService.getVariable(processInstance.getId(), \"beanOutput\");\n    assertNotNull(beanOutput);\n    assertEquals(\"Activiti BPMN 2.0 process engine\", beanOutput);\n\n    // Finish the task, should continue to serviceTask which uses a bean\n    // that is present\n    // in application-context, but not exposed explicitly in \"beans\", should\n    // throw error!\n    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n    assertNotNull(task);\n\n    try {\n      taskService.complete(task.getId());\n      fail(\"Exception should have been thrown\");\n    } catch (ActivitiException ae) {\n      assertTextPresent(\"Unknown property used in expression\", ae.getCause().getMessage());\n    }\n  }\n}\n"}
{"label": "test|get|engine|from|cache", "code": "package org.activiti.spring.test.engine;\n\nimport org.activiti.engine.ProcessEngines;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.junit.Assert.assertNotNull;\n\n/**\n * Spring process engine base test\n * \n\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath:org/activiti/spring/test/engine/springProcessEngine-context.xml\")\npublic class SpringProcessEngineTest {\n\n  @Test\n  public void METHOD_NAME() {\n    assertNotNull(ProcessEngines.getDefaultProcessEngine());\n    assertNotNull(ProcessEngines.getProcessEngine(\"default\"));\n  }\n\n}"}
{"label": "execute", "code": "package org.activiti.spring.test.components.scope;\n\nimport org.activiti.engine.delegate.DelegateExecution;\nimport org.activiti.engine.delegate.JavaDelegate;\nimport org.junit.Assert;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n/**\n\n * @since 5, 3\n */\n\npublic class Delegate2 implements JavaDelegate {\n\n  private Logger log = LoggerFactory.getLogger(getClass());\n\n  @Autowired\n  private StatefulObject statefulObject;\n\n  public void METHOD_NAME(DelegateExecution execution) {\n\n    this.statefulObject.increment();\n\n    Assert.assertNotNull(\"the 'scopedCustomer' reference can't be null\", this.statefulObject);\n    Assert.assertNotNull(\"the 'scopedCustomer.name' property should be non-null, since it was set in a previous delegate bound to this very thread\", this.statefulObject.getName());\n    log.info(\"the 'uuid' value retrieved from the ScopedCustomer#name property is '{}' in {}\", this.statefulObject.getName(), getClass().getName());\n  }\n}\n"}
{"label": "execute", "code": "package org.activiti.spring.test.components.scope;\n\nimport org.activiti.engine.delegate.DelegateExecution;\nimport org.activiti.engine.delegate.JavaDelegate;\nimport org.activiti.engine.runtime.ProcessInstance;\nimport org.junit.Assert;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.UUID;\n\npublic class Delegate1 implements JavaDelegate, InitializingBean {\n\n  private Logger log = LoggerFactory.getLogger(getClass());\n\n  @Autowired\n  private ProcessInstance processInstance;\n\n  @Autowired\n  private StatefulObject statefulObject;\n\n  public void METHOD_NAME(DelegateExecution execution) {\n\n    String pid = this.processInstance.getId();\n\n    log.info(\"the processInstance#id is {}\", pid);\n\n    Assert.assertNotNull(\"the 'scopedCustomer' reference can't be null\", statefulObject);\n    String uuid = UUID.randomUUID().toString();\n    statefulObject.setName(uuid);\n    log.info(\"the 'uuid' value given to the ScopedCustomer#name property is '{}' in {}\", uuid, getClass().getName());\n\n    this.statefulObject.increment();\n  }\n\n  public void afterPropertiesSet() throws Exception {\n    Assert.assertNotNull(\"the processInstance must not be null\", this.processInstance);\n  }\n}\n"}
{"label": "before", "code": "package org.activiti.spring.test.components.scope;\n\nimport org.activiti.engine.ProcessEngine;\nimport org.activiti.engine.RepositoryService;\nimport org.activiti.engine.repository.Deployment;\nimport org.junit.After;\nimport org.junit.METHOD_NAME;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n/**\n * tests the scoped beans\n * \n\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath:org/activiti/spring/test/components/ScopingTests-context.xml\")\n@Ignore\n// Ignored for the moment. Josh is working on this.\npublic class XmlNamespaceProcessScopeTest {\n\n  private ProcessScopeTestEngine processScopeTestEngine;\n\n  @Autowired\n  private ProcessEngine processEngine;\n\n  @METHOD_NAME\n  public void METHOD_NAME() throws Throwable {\n    this.processEngine.getRepositoryService().createDeployment().addClasspathResource(\"org/activiti/spring/test/components/spring-component-waiter.bpmn20.xml\").deploy();\n\n    processScopeTestEngine = new ProcessScopeTestEngine(this.processEngine);\n  }\n\n  @After\n  public void after() {\n    RepositoryService repositoryService = this.processEngine.getRepositoryService();\n    for (Deployment deployment : repositoryService.createDeploymentQuery().list()) {\n      repositoryService.deleteDeployment(deployment.getId(), true);\n    }\n  }\n\n  @Test\n  public void testScopedProxyCreation() throws Throwable {\n    processScopeTestEngine.testScopedProxyCreation();\n  }\n\n}\n"}
{"label": "notify", "code": "package org.activiti.spring.test.jobexecutor;\n\nimport org.activiti.engine.delegate.DelegateExecution;\nimport org.activiti.engine.delegate.ExecutionListener;\n\n/**\n\n */\npublic class ForcedRollbackExecutionListener implements ExecutionListener {\n\n  public void METHOD_NAME(DelegateExecution delegateExecution) {\n    throw new RuntimeException(\"Forcing transaction rollback\");\n  }\n\n}\n"}
{"label": "find|manager|for|employee", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.spring.test.taskassignment;\n\nimport org.activiti.engine.delegate.DelegateExecution;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n\n */\npublic class FakeLdapService {\n\n  public String METHOD_NAME(String employee) {\n    // Pretty useless LDAP service ...\n    return \"Kermit The Frog\";\n  }\n\n  public List<String> findAllSales() {\n    return Arrays.asList(\"kermit\", \"gonzo\", \"fozzie\");\n  }\n\n  public List<String> findManagers(DelegateExecution execution, String emp) {\n    if (execution == null) {\n      throw new RuntimeException(\"Execution parameter is null\");\n    }\n\n    if (emp == null || \"\".equals(emp)) {\n      throw new RuntimeException(\"emp parameter is null or empty\");\n    }\n\n    return Arrays.asList(\"management\", \"directors\");\n  }\n\n}\n"}
{"label": "is|empty", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.editor.language.json.converter.util;\n\nimport java.util.Collection;\n\n/**\n\n */\npublic class CollectionUtils {\n\t\n  public static boolean METHOD_NAME(@SuppressWarnings(\"rawtypes\") Collection collection) {\n      return (collection == null || collection.METHOD_NAME());\n  }\n\n  public static boolean isNotEmpty(@SuppressWarnings(\"rawtypes\") Collection collection) {\n      return !CollectionUtils.METHOD_NAME(collection);\n  }\n\n\n}\n"}
{"label": "fill|types", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.editor.language.json.converter;\n\nimport java.util.Map;\n\nimport org.activiti.bpmn.model.BaseElement;\nimport org.activiti.bpmn.model.DataStoreReference;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\n\n/**\n\n */\npublic class DataStoreJsonConverter extends BaseBpmnJsonConverter {\n\n  public static void METHOD_NAME(Map<String, Class<? extends BaseBpmnJsonConverter>> convertersToBpmnMap, Map<Class<? extends BaseElement>, Class<? extends BaseBpmnJsonConverter>> convertersToJsonMap) {\n\n    fillJsonTypes(convertersToBpmnMap);\n    fillBpmnTypes(convertersToJsonMap);\n  }\n\n  public static void fillJsonTypes(Map<String, Class<? extends BaseBpmnJsonConverter>> convertersToBpmnMap) {\n    convertersToBpmnMap.put(STENCIL_DATA_STORE, DataStoreJsonConverter.class);\n  }\n\n  public static void fillBpmnTypes(Map<Class<? extends BaseElement>, Class<? extends BaseBpmnJsonConverter>> convertersToJsonMap) {\n    convertersToJsonMap.put(DataStoreReference.class, DataStoreJsonConverter.class);\n  }\n\n  protected String getStencilId(BaseElement baseElement) {\n    return STENCIL_DATA_STORE;\n  }\n\n  protected void convertElementToJson(ObjectNode propertiesNode, BaseElement baseElement) {\n\n  }\n\n  protected BaseElement convertJsonToElement(JsonNode elementNode, JsonNode modelNode, Map<String, JsonNode> shapeMap) {\n    DataStoreReference dataStore = new DataStoreReference();\n    return dataStore;\n  }\n}\n"}
{"label": "get|id", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.editor.language.json.model;\n\npublic class ModelInfo {\n\n  protected String id;\n  protected String name;\n  protected String key;\n  \n  public ModelInfo(String id, String name, String key) {\n    this.id = id;\n    this.name = name;\n    this.key = key;\n  }\n  \n  public String METHOD_NAME() {\n    return id;\n  }\n  \n  public void setId(String id) {\n    this.id = id;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public void setName(String name) {\n    this.name = name;\n  }\n  \n  public String getKey() {\n    return key;\n  }\n  \n  public void setKey(String key) {\n    this.key = key;\n  }\n}\n"}
{"label": "convert|json|to|model", "code": "package org.activiti.editor.language;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.activiti.bpmn.model.BpmnModel;\nimport org.junit.Test;\n\npublic class NotExecutableConverterTest extends AbstractConverterTest {\n\n  @Test\n  public void METHOD_NAME() throws Exception {\n    BpmnModel bpmnModel = readJsonFile();\n    validateModel(bpmnModel);\n  }\n\n  @Test\n  public void doubleConversionValidation() throws Exception {\n    BpmnModel bpmnModel = readJsonFile();\n    bpmnModel = convertToJsonAndBack(bpmnModel);\n    validateModel(bpmnModel);\n  }\n\n  protected String getResource() {\n    return \"test.notexecutablemodel.json\";\n  }\n\n  private void validateModel(BpmnModel model) {\n    assertEquals(\"simpleProcess\", model.getMainProcess().getId());\n    assertEquals(\"Simple process\", model.getMainProcess().getName());\n    assertEquals(false, model.getMainProcess().isExecutable());\n  }\n}\n"}
{"label": "convert|json|to|model", "code": "package org.activiti.editor.language;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\n\nimport org.activiti.bpmn.model.BpmnModel;\nimport org.activiti.bpmn.model.Pool;\nimport org.activiti.bpmn.model.Process;\nimport org.junit.Test;\n\npublic class NotExecutablePoolConverterTest extends AbstractConverterTest {\n\n  @Test\n  public void METHOD_NAME() throws Exception {\n    BpmnModel bpmnModel = readJsonFile();\n    validateModel(bpmnModel);\n  }\n\n  @Test\n  public void doubleConversionValidation() throws Exception {\n    BpmnModel bpmnModel = readJsonFile();\n    bpmnModel = convertToJsonAndBack(bpmnModel);\n    validateModel(bpmnModel);\n  }\n\n  protected String getResource() {\n    return \"test.notexecutablepoolmodel.json\";\n  }\n\n  private void validateModel(BpmnModel model) {\n\n    String idPool = \"idPool\";\n    String idProcess = \"poolProcess\";\n\n    assertEquals(1, model.getPools().size());\n\n    Pool pool = model.getPool(idPool);\n    assertEquals(idPool, pool.getId());\n    assertEquals(idProcess, pool.getProcessRef());\n    assertFalse(pool.isExecutable());\n\n    Process process = model.getProcess(idPool);\n    assertEquals(idProcess, process.getId());\n    assertFalse(process.isExecutable());\n    assertEquals(3, process.getLanes().size());\n\n  }\n}\n"}
{"label": "get|name", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.validation.validator;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n\n */\npublic class ValidatorSet {\n\n  protected String name;\n\n  protected Map<Class<? extends Validator>, Validator> validators;\n\n  public ValidatorSet(String name) {\n    this.name = name;\n  }\n\n  public String METHOD_NAME() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public Collection<Validator> getValidators() {\n    return validators.values();\n  }\n\n  public void setValidators(Collection<? extends Validator> validators) {\n    for (Validator validator : validators) {\n      addValidator(validator);\n    }\n  }\n\n  public void removeValidator(Class<? extends Validator> validatorClass) {\n    validators.remove(validatorClass);\n  }\n\n  public void addValidator(Validator validator) {\n    if (validators == null) {\n      validators = new HashMap<Class<? extends Validator>, Validator>();\n    }\n    validators.put(validator.getClass(), validator);\n  }\n\n}\n"}
{"label": "create|default|process|validator", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.validation;\n\nimport org.activiti.validation.validator.ValidatorSetFactory;\n\n/**\n\n */\npublic class ProcessValidatorFactory {\n\n  public ProcessValidator METHOD_NAME() {\n    ProcessValidatorImpl processValidator = new ProcessValidatorImpl();\n    processValidator.addValidatorSet(new ValidatorSetFactory().createActivitiExecutableProcessValidatorSet());\n    return processValidator;\n  }\n\n}\n"}
{"label": "execute|validation|should|not|rise|errors|for|empty|service|task", "code": "/*\n * Copyright 2017 Alfresco, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.validation.validator.impl;\n\nimport java.util.ArrayList;\n\nimport org.activiti.bpmn.model.BpmnModel;\nimport org.activiti.bpmn.model.Process;\nimport org.activiti.bpmn.model.ServiceTask;\nimport org.activiti.validation.ValidationError;\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ServiceTaskValidatorTest {\n\n    private ServiceTaskValidator validator = new ServiceTaskValidator();\n\n    @Test\n    public void METHOD_NAME() throws Exception {\n        //given\n        Process process = new Process();\n        process.addFlowElement(new ServiceTask());\n        BpmnModel bpmnModel = new BpmnModel();\n        ArrayList<ValidationError> errors = new ArrayList<>();\n\n        //when\n        validator.executeValidation(bpmnModel, process,\n                                    errors);\n\n        //then\n        assertThat(errors)\n                .as(\"No error is expected: the default behavior will be used\")\n                .isEmpty();\n    }\n    \n}"}
{"label": "get|mail|server|default|from", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.cfg;\n\n/**\n\n */\npublic class MailServerInfo {\n\n  protected String mailServerDefaultFrom;\n  protected String mailServerHost;\n  protected int mailServerPort;\n  protected String mailServerUsername;\n  protected String mailServerPassword;\n  protected boolean mailServerUseSSL;\n  protected boolean mailServerUseTLS;\n\n  public String METHOD_NAME() {\n    return mailServerDefaultFrom;\n  }\n\n  public void setMailServerDefaultFrom(String mailServerDefaultFrom) {\n    this.mailServerDefaultFrom = mailServerDefaultFrom;\n  }\n\n  public String getMailServerHost() {\n    return mailServerHost;\n  }\n\n  public void setMailServerHost(String mailServerHost) {\n    this.mailServerHost = mailServerHost;\n  }\n\n  public int getMailServerPort() {\n    return mailServerPort;\n  }\n\n  public void setMailServerPort(int mailServerPort) {\n    this.mailServerPort = mailServerPort;\n  }\n\n  public String getMailServerUsername() {\n    return mailServerUsername;\n  }\n\n  public void setMailServerUsername(String mailServerUsername) {\n    this.mailServerUsername = mailServerUsername;\n  }\n\n  public String getMailServerPassword() {\n    return mailServerPassword;\n  }\n\n  public void setMailServerPassword(String mailServerPassword) {\n    this.mailServerPassword = mailServerPassword;\n  }\n\n  public boolean isMailServerUseSSL() {\n    return mailServerUseSSL;\n  }\n\n  public void setMailServerUseSSL(boolean mailServerUseSSL) {\n    this.mailServerUseSSL = mailServerUseSSL;\n  }\n\n  public boolean isMailServerUseTLS() {\n    return mailServerUseTLS;\n  }\n\n  public void setMailServerUseTLS(boolean mailServerUseTLS) {\n    this.mailServerUseTLS = mailServerUseTLS;\n  }\n}\n"}
{"label": "set|shell|executor|context|factory", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.cfg.security;\n\npublic class CommandExecutorContext {\n\n    private static CommandExecutorFactory shellCommandExecutorFactory;\n\n    public static void METHOD_NAME(CommandExecutorFactory shellCommandExecutorFactory) {\n        CommandExecutorContext.shellCommandExecutorFactory = shellCommandExecutorFactory;\n    }\n\n    public static CommandExecutorFactory getShellCommandExecutorFactory() {\n        return shellCommandExecutorFactory;\n    }\n}\n"}
{"label": "get|id", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.repository;\n\nimport java.io.Serializable;\n\n/**\n * Represents a diagram node.\n * \n\n */\nabstract public class DiagramElement implements Serializable {\n\n  private static final long serialVersionUID = 1L;\n\n  protected String id;\n\n  public DiagramElement() {\n  }\n\n  public DiagramElement(String id) {\n    this.id = id;\n  }\n\n  /**\n   * Id of the diagram element.\n   */\n  public String METHOD_NAME() {\n    return id;\n  }\n\n  public void setId(String id) {\n    this.id = id;\n  }\n\n  @Override\n  public String toString() {\n    return \"id=\" + METHOD_NAME();\n  }\n\n  public abstract boolean isNode();\n\n  public abstract boolean isEdge();\n\n}"}
{"label": "get|x", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.repository;\n\nimport java.io.Serializable;\n\n/**\n * Stores the position of a waypoint of a diagram edge.\n * \n\n */\npublic class DiagramEdgeWaypoint implements Serializable {\n\n  private static final long serialVersionUID = 1L;\n\n  private Double x;\n  private Double y;\n\n  public Double METHOD_NAME() {\n    return x;\n  }\n\n  public void setX(Double x) {\n    this.x = x;\n  }\n\n  public Double getY() {\n    return y;\n  }\n\n  public void setY(Double y) {\n    this.y = y;\n  }\n\n}\n"}
{"label": "get|waypoints", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.repository;\n\nimport java.util.List;\n\n/**\n * Stores waypoints of a diagram edge.\n * \n\n */\npublic class DiagramEdge extends DiagramElement {\n\n  private static final long serialVersionUID = 1L;\n\n  private List<DiagramEdgeWaypoint> waypoints;\n\n  public DiagramEdge() {\n  }\n\n  public DiagramEdge(String id, List<DiagramEdgeWaypoint> waypoints) {\n    super(id);\n    this.waypoints = waypoints;\n  }\n\n  @Override\n  public boolean isNode() {\n    return false;\n  }\n\n  @Override\n  public boolean isEdge() {\n    return true;\n  }\n\n  public List<DiagramEdgeWaypoint> METHOD_NAME() {\n    return waypoints;\n  }\n\n  public void setWaypoints(List<DiagramEdgeWaypoint> waypoints) {\n    this.waypoints = waypoints;\n  }\n\n}\n"}
{"label": "get|x", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.repository;\n\n/**\n * Stores position and dimensions of a diagram node.\n * \n\n */\npublic class DiagramNode extends DiagramElement {\n\n  private static final long serialVersionUID = 1L;\n\n  private Double x;\n  private Double y;\n  private Double width;\n  private Double height;\n\n  public DiagramNode() {\n    super();\n  }\n\n  public DiagramNode(String id) {\n    super(id);\n  }\n\n  public DiagramNode(String id, Double x, Double y, Double width, Double height) {\n    super(id);\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  public Double METHOD_NAME() {\n    return x;\n  }\n\n  public void setX(Double x) {\n    this.x = x;\n  }\n\n  public Double getY() {\n    return y;\n  }\n\n  public void setY(Double y) {\n    this.y = y;\n  }\n\n  public Double getWidth() {\n    return width;\n  }\n\n  public void setWidth(Double width) {\n    this.width = width;\n  }\n\n  public Double getHeight() {\n    return height;\n  }\n\n  public void setHeight(Double height) {\n    this.height = height;\n  }\n\n  @Override\n  public String toString() {\n    return super.toString() + \", x=\" + METHOD_NAME() + \", y=\" + getY() + \", width=\" + getWidth() + \", height=\" + getHeight();\n  }\n\n  @Override\n  public boolean isNode() {\n    return true;\n  }\n\n  @Override\n  public boolean isEdge() {\n    return false;\n  }\n\n}\n"}
{"label": "get|class|name", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine;\n\n/**\n * Runtime exception indicating the requested class was not found or an error occurred while loading the class.\n * \n\n */\npublic class ActivitiClassLoadingException extends ActivitiException {\n\n  private static final long serialVersionUID = 1L;\n  protected String className;\n\n  public ActivitiClassLoadingException(String className, Throwable cause) {\n    super(getExceptionMessageMessage(className, cause), cause);\n    this.className = className;\n  }\n\n  /**\n   * Returns the name of the class this exception is related to.\n   */\n  public String METHOD_NAME() {\n    return className;\n  }\n\n  private static String getExceptionMessageMessage(String className, Throwable cause) {\n    if (cause instanceof ClassNotFoundException) {\n      return \"Class not found: \" + className;\n    } else {\n      return \"Could not load class: \" + className;\n    }\n  }\n\n}\n"}
{"label": "get|object|class", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine;\n\n/**\n * An exception indicating that the object that is required or actioned on does not exist.\n * \n\n */\npublic class ActivitiObjectNotFoundException extends ActivitiException {\n\n  private static final long serialVersionUID = 1L;\n\n  private Class<?> objectClass;\n\n  public ActivitiObjectNotFoundException(String message) {\n    super(message);\n  }\n\n  public ActivitiObjectNotFoundException(String message, Class<?> objectClass) {\n    this(message, objectClass, null);\n  }\n\n  public ActivitiObjectNotFoundException(Class<?> objectClass) {\n    this(null, objectClass, null);\n  }\n\n  public ActivitiObjectNotFoundException(String message, Class<?> objectClass, Throwable cause) {\n    super(message, cause);\n    this.objectClass = objectClass;\n  }\n\n  /**\n   * The class of the object that was not found. Contains the interface-class of the activiti-object that was not found.\n   */\n  public Class<?> METHOD_NAME() {\n    return objectClass;\n  }\n}\n"}
{"label": "add|column|meta|data", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.management;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Structure containing meta data (column names, column types, etc.) about a certain database table.\n * \n\n */\npublic class TableMetaData {\n\n  protected String tableName;\n\n  protected List<String> columnNames = new ArrayList<String>();\n\n  protected List<String> columnTypes = new ArrayList<String>();\n\n  public TableMetaData() {\n\n  }\n\n  public TableMetaData(String tableName) {\n    this.tableName = tableName;\n  }\n\n  public void METHOD_NAME(String columnName, String columnType) {\n    columnNames.add(columnName);\n    columnTypes.add(columnType);\n  }\n\n  public String getTableName() {\n    return tableName;\n  }\n\n  public void setTableName(String tableName) {\n    this.tableName = tableName;\n  }\n\n  public List<String> getColumnNames() {\n    return columnNames;\n  }\n\n  public void setColumnNames(List<String> columnNames) {\n    this.columnNames = columnNames;\n  }\n\n  public List<String> getColumnTypes() {\n    return columnTypes;\n  }\n\n  public void setColumnTypes(List<String> columnTypes) {\n    this.columnTypes = columnTypes;\n  }\n\n}\n"}
{"label": "get|table|name", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.management;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Data structure used for retrieving database table content.\n * \n\n\n */\npublic class TablePage {\n\n  protected String tableName;\n\n  /**\n   * The total number of rows in the table.\n   */\n  protected long total = -1;\n\n  /**\n   * Identifies the index of the first result stored in this TablePage. For example in a paginated database table, this value identifies the record number of the result on the first row.\n   */\n  protected long firstResult;\n\n  /**\n   * The actual content of the database table, stored as a list of mappings of the form {column name, value}.\n   * \n   * This means that every map object in the list corresponds with one row in the database table.\n   */\n  protected List<Map<String, Object>> rowData;\n\n  public TablePage() {\n\n  }\n\n  public String METHOD_NAME() {\n    return tableName;\n  }\n\n  public void setTableName(String tableName) {\n    this.tableName = tableName;\n  }\n\n  /**\n   * @return the start index of this page (ie the index of the first element in the page)\n   */\n  public long getFirstResult() {\n    return firstResult;\n  }\n\n  public void setFirstResult(long firstResult) {\n    this.firstResult = firstResult;\n  }\n\n  public void setRows(List<Map<String, Object>> rowData) {\n    this.rowData = rowData;\n  }\n\n  /**\n   * @return the actual table content.\n   */\n  public List<Map<String, Object>> getRows() {\n    return rowData;\n  }\n\n  public void setTotal(long total) {\n    this.total = total;\n  }\n\n  /**\n   * @return the total rowcount of the table from which this page is only a subset.\n   */\n  public long getTotal() {\n    return total;\n  }\n\n  /**\n   * @return the actual number of rows in this page.\n   */\n  public long getSize() {\n    return rowData.size();\n  }\n}\n"}
{"label": "set|error|code", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.delegate;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.ActivitiIllegalArgumentException;\nimport org.activiti.engine.impl.bpmn.parser.Error;\n\n/**\n * Special exception that can be used to throw a BPMN Error from {@link JavaDelegate}s and expressions.\n * \n * This should only be used for business faults, which shall be handled by a Boundary Error Event or Error Event Sub-Process modeled in the process definition. Technical errors should be represented\n * by other exception types.\n * \n * This class represents an actual instance of a BPMN Error, whereas {@link Error} represents an Error definition.\n * \n\n */\npublic class BpmnError extends ActivitiException {\n\n  private static final long serialVersionUID = 1L;\n\n  private String errorCode;\n\n  public BpmnError(String errorCode) {\n    super(\"\");\n    METHOD_NAME(errorCode);\n  }\n\n  public BpmnError(String errorCode, String message) {\n    super(message);\n    METHOD_NAME(errorCode);\n  }\n\n  protected void METHOD_NAME(String errorCode) {\n    if (errorCode == null) {\n      throw new ActivitiIllegalArgumentException(\"Error Code must not be null.\");\n    }\n    if (errorCode.length() < 1) {\n      throw new ActivitiIllegalArgumentException(\"Error Code must not be empty.\");\n    }\n    this.errorCode = errorCode;\n  }\n\n  public String getErrorCode() {\n    return errorCode;\n  }\n}\n"}
{"label": "set|cause", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.delegate.event.impl;\n\nimport org.activiti.engine.delegate.event.ActivitiActivityCancelledEvent;\nimport org.activiti.engine.delegate.event.ActivitiEventType;\n\n/**\n * An {@link org.activiti.engine.delegate.event.ActivitiActivityCancelledEvent} implementation.\n * \n\n */\npublic class ActivitiActivityCancelledEventImpl extends ActivitiActivityEventImpl implements ActivitiActivityCancelledEvent {\n\n  protected Object cause;\n\n  public ActivitiActivityCancelledEventImpl() {\n    super(ActivitiEventType.ACTIVITY_CANCELLED);\n  }\n\n  public void METHOD_NAME(Object cause) {\n    this.cause = cause;\n  }\n\n  public Object getCause() {\n    return cause;\n  }\n\n}\n"}
{"label": "set|user|id", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.delegate.event.impl;\n\nimport org.activiti.engine.delegate.event.ActivitiEventType;\nimport org.activiti.engine.delegate.event.ActivitiMembershipEvent;\n\n/**\n * Implementation of {@link ActivitiMembershipEvent}.\n * \n\n */\npublic class ActivitiMembershipEventImpl extends ActivitiEventImpl implements ActivitiMembershipEvent {\n\n  protected String userId;\n  protected String groupId;\n\n  public ActivitiMembershipEventImpl(ActivitiEventType type) {\n    super(type);\n  }\n\n  public void METHOD_NAME(String userId) {\n    this.userId = userId;\n  }\n\n  public String getUserId() {\n    return userId;\n  }\n\n  public void setGroupId(String groupId) {\n    this.groupId = groupId;\n  }\n\n  public String getGroupId() {\n    return groupId;\n  }\n}\n"}
{"label": "get|error|id", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.delegate.event.impl;\n\nimport org.activiti.engine.delegate.event.ActivitiErrorEvent;\nimport org.activiti.engine.delegate.event.ActivitiEventType;\n\n/**\n * Implementation of an {@link ActivitiErrorEvent}.\n * \n\n */\npublic class ActivitiErrorEventImpl extends ActivitiActivityEventImpl implements ActivitiErrorEvent {\n\n  protected String errorId;\n  protected String errorCode;\n\n  public ActivitiErrorEventImpl(ActivitiEventType type) {\n    super(type);\n  }\n  \n  public String METHOD_NAME() {\n    return errorId;\n  }\n\n  public void setErrorId(String errorId) {\n    this.errorId = errorId;\n  }\n\n  public void setErrorCode(String errorCode) {\n    this.errorCode = errorCode;\n  }\n\n  @Override\n  public String getErrorCode() {\n    return errorCode;\n  }\n\n}\n"}
{"label": "set|message|name", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.delegate.event.impl;\n\nimport org.activiti.engine.delegate.event.ActivitiEventType;\nimport org.activiti.engine.delegate.event.ActivitiMessageEvent;\nimport org.activiti.engine.delegate.event.ActivitiSignalEvent;\n\n/**\n * An {@link ActivitiSignalEvent} implementation.\n * \n\n */\npublic class ActivitiMessageEventImpl extends ActivitiActivityEventImpl implements ActivitiMessageEvent {\n\n  protected String messageName;\n  protected Object messageData;\n\n  public ActivitiMessageEventImpl(ActivitiEventType type) {\n    super(type);\n  }\n\n  public void METHOD_NAME(String messageName) {\n    this.messageName = messageName;\n  }\n\n  public String getMessageName() {\n    return messageName;\n  }\n\n  public void setMessageData(Object messageData) {\n    this.messageData = messageData;\n  }\n\n  public Object getMessageData() {\n    return messageData;\n  }\n}\n"}
{"label": "set|signal|name", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.delegate.event.impl;\n\nimport org.activiti.engine.delegate.event.ActivitiEventType;\nimport org.activiti.engine.delegate.event.ActivitiSignalEvent;\n\n/**\n * An {@link ActivitiSignalEvent} implementation.\n * \n\n */\npublic class ActivitiSignalEventImpl extends ActivitiActivityEventImpl implements ActivitiSignalEvent {\n\n  protected String signalName;\n  protected Object signalData;\n\n  public ActivitiSignalEventImpl(ActivitiEventType type) {\n    super(type);\n  }\n\n  @Override\n  public String getSignalName() {\n    return signalName;\n  }\n\n  public void METHOD_NAME(String signalName) {\n    this.signalName = signalName;\n  }\n\n  @Override\n  public Object getSignalData() {\n    return signalData;\n  }\n\n  public void setSignalData(Object signalData) {\n    this.signalData = signalData;\n  }\n}\n"}
{"label": "set|variable|name", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.delegate.event.impl;\n\nimport org.activiti.engine.delegate.event.ActivitiEventType;\nimport org.activiti.engine.delegate.event.ActivitiVariableEvent;\nimport org.activiti.engine.impl.variable.VariableType;\n\n/**\n * Implementation of {@link ActivitiVariableEvent}.\n * \n\n */\npublic class ActivitiVariableEventImpl extends ActivitiEventImpl implements ActivitiVariableEvent {\n\n  protected String variableName;\n  protected Object variableValue;\n  protected VariableType variableType;\n  protected String taskId;\n\n  public ActivitiVariableEventImpl(ActivitiEventType type) {\n    super(type);\n  }\n\n  @Override\n  public String getVariableName() {\n    return variableName;\n  }\n\n  public void METHOD_NAME(String variableName) {\n    this.variableName = variableName;\n  }\n\n  @Override\n  public Object getVariableValue() {\n    return variableValue;\n  }\n\n  public void setVariableValue(Object variableValue) {\n    this.variableValue = variableValue;\n  }\n\n  public VariableType getVariableType() {\n    return variableType;\n  }\n\n  public void setVariableType(VariableType variableType) {\n    this.variableType = variableType;\n  }\n\n  @Override\n  public String getTaskId() {\n    return taskId;\n  }\n\n  public void setTaskId(String taskId) {\n    this.taskId = taskId;\n  }\n\n}\n"}
{"label": "set|cause", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.delegate.event.impl;\n\nimport org.activiti.engine.delegate.event.ActivitiCancelledEvent;\nimport org.activiti.engine.delegate.event.ActivitiEventType;\n\n/**\n * An {@link org.activiti.engine.delegate.event.ActivitiCancelledEvent} implementation.\n * \n\n */\npublic class ActivitiProcessCancelledEventImpl extends ActivitiEventImpl implements ActivitiCancelledEvent {\n\n  protected Object cause;\n\n  public ActivitiProcessCancelledEventImpl() {\n    super(ActivitiEventType.PROCESS_CANCELLED);\n  }\n\n  public void METHOD_NAME(Object cause) {\n    this.cause = cause;\n  }\n\n  public Object getCause() {\n    return cause;\n  }\n\n}\n"}
{"label": "set|activity|id", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.delegate.event.impl;\n\nimport org.activiti.engine.delegate.event.ActivitiActivityEvent;\nimport org.activiti.engine.delegate.event.ActivitiEventType;\n\n/**\n * Implementation of an {@link ActivitiActivityEvent}.\n * \n\n\n */\npublic class ActivitiActivityEventImpl extends ActivitiEventImpl implements ActivitiActivityEvent {\n\n  protected String activityId;\n  protected String activityName;\n  protected String activityType;\n  protected String behaviorClass;\n\n  public ActivitiActivityEventImpl(ActivitiEventType type) {\n    super(type);\n  }\n\n  @Override\n  public String getActivityId() {\n    return activityId;\n  }\n\n  public void METHOD_NAME(String activityId) {\n    this.activityId = activityId;\n  }\n\n  public String getActivityName() {\n    return activityName;\n  }\n\n  public void setActivityName(String activityName) {\n    this.activityName = activityName;\n  }\n\n  @Override\n  public String getActivityType() {\n    return activityType;\n  }\n\n  public void setActivityType(String activityType) {\n    this.activityType = activityType;\n  }\n\n  public String getBehaviorClass() {\n    return behaviorClass;\n  }\n\n  public void setBehaviorClass(String behaviorClass) {\n    this.behaviorClass = behaviorClass;\n  }\n  \n}\n"}
{"label": "get|task|id", "code": "package org.activiti.engine;\n\n/**\n * This exception is thrown when you try to claim a task that is already claimed by someone else.\n * \n\n\n */\npublic class ActivitiTaskAlreadyClaimedException extends ActivitiException {\n\n  private static final long serialVersionUID = 1L;\n\n  /** the id of the task that is already claimed */\n  private String taskId;\n\n  /** the assignee of the task that is already claimed */\n  private String taskAssignee;\n\n  public ActivitiTaskAlreadyClaimedException(String taskId, String taskAssignee) {\n    super(\"Task '\" + taskId + \"' is already claimed by someone else.\");\n    this.taskId = taskId;\n    this.taskAssignee = taskAssignee;\n  }\n\n  public String METHOD_NAME() {\n    return this.taskId;\n  }\n\n  public String getTaskAssignee() {\n    return this.taskAssignee;\n  }\n\n}\n"}
{"label": "get|compatibility|handler|class|name", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.compatibility;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n\n */\npublic class DefaultActiviti5CompatibilityHandlerFactory implements Activiti5CompatibilityHandlerFactory {\n\n  private static final Logger logger = LoggerFactory.getLogger(DefaultActiviti5CompatibilityHandlerFactory.class);\n\n  protected String compatibilityHandlerClassName;\n\n  @Override\n  public Activiti5CompatibilityHandler createActiviti5CompatibilityHandler() {\n\n    if (compatibilityHandlerClassName == null) {\n      compatibilityHandlerClassName = \"org.activiti.compatibility.DefaultActiviti5CompatibilityHandler\";\n    }\n\n    try {\n      Activiti5CompatibilityHandler handler = (Activiti5CompatibilityHandler) Class.forName(compatibilityHandlerClassName).newInstance();\n      return handler;\n    } catch (Exception e) {\n      logger.info(\"Activiti 5 compatibility handler implementation not found or error during instantiation : \" + e.getMessage() + \". Activiti 5 backwards compatibility disabled.\");\n    }\n    return null;\n  }\n\n  public String METHOD_NAME() {\n    return compatibilityHandlerClassName;\n  }\n\n  public void setCompatibilityHandlerClassName(String compatibilityHandlerClassName) {\n    this.compatibilityHandlerClassName = compatibilityHandlerClassName;\n  }\n\n}\n"}
{"label": "get|mocks", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.test.mock;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Registry for mock objects.\n * \n * <p>\n * Usage: <code>Mocks.register(\"myMock\", myMock);</code>\n * </p>\n * \n * <p>\n * This class lets you register mock objects that will then be used by the {@link MockElResolver}. It binds a map of mock objects to ThreadLocal. This way, the mocks can be set up independent of how\n * the process engine configuration is built.\n * </p>\n * \n\n */\npublic class Mocks {\n\n  private static ThreadLocal<Map<String, Object>> mockContainer = new ThreadLocal<Map<String, Object>>();\n\n  private static Map<String, Object> METHOD_NAME() {\n    Map<String, Object> mocks = mockContainer.get();\n    if (mocks == null) {\n      mocks = new HashMap<String, Object>();\n      Mocks.mockContainer.set(mocks);\n    }\n    return mocks;\n  }\n\n  /**\n   * This method lets you register a mock object. Make sure to register the {@link MockExpressionManager} with your process engine configuration.\n   * \n   * @param key\n   *          the key under which the mock object will be registered\n   * @param value\n   *          the mock object\n   */\n  public static void register(String key, Object value) {\n    METHOD_NAME().put(key, value);\n  }\n\n  /**\n   * This method returns the mock object registered under the provided key or null if there is no object for the provided key.\n   * \n   * @param key\n   *          the key of the requested object\n   * @return the mock object registered under the provided key or null if there is no object for the provided key\n   */\n  public static Object get(Object key) {\n    return METHOD_NAME().get(key);\n  }\n\n  /**\n   * This method resets the internal map of mock objects.\n   */\n  public static void reset() {\n    if (METHOD_NAME() != null) {\n      METHOD_NAME().clear();\n    }\n  }\n\n}\n"}
{"label": "get|execution|entity", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.test.impl.logger;\n\nimport org.activiti.engine.delegate.event.ActivitiEntityEvent;\nimport org.activiti.engine.delegate.event.ActivitiEvent;\nimport org.activiti.engine.delegate.event.BaseEntityEventListener;\nimport org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n\n/**\n\n */\npublic class DebugInfoEntityEventListener extends BaseEntityEventListener {\n\n  protected ProcessExecutionLogger processExecutionLogger;\n\n  public DebugInfoEntityEventListener(ProcessExecutionLogger processExecutionLogger) {\n    this.processExecutionLogger = processExecutionLogger;\n  }\n\n  @Override\n  protected void onCreate(ActivitiEvent event) {\n    ExecutionEntity executionEntity = METHOD_NAME(event);\n    if (executionEntity != null) {\n      processExecutionLogger.executionCreated(executionEntity);\n      processExecutionLogger.addDebugInfo(new DebugInfoExecutionCreated(executionEntity));\n    }\n  }\n\n  @Override\n  protected void onDelete(ActivitiEvent event) {\n    ExecutionEntity executionEntity = METHOD_NAME(event);\n    if (executionEntity != null) {\n      processExecutionLogger.executionDeleted(executionEntity);\n      processExecutionLogger.addDebugInfo(new DebugInfoExecutionDeleted(executionEntity));\n    }\n  }\n\n  protected ExecutionEntity METHOD_NAME(ActivitiEvent event) {\n    ActivitiEntityEvent entityEvent = (ActivitiEntityEvent) event;\n    Object entity = entityEvent.getEntity();\n    if (entity instanceof ExecutionEntity) {\n      ExecutionEntity executionEntity = (ExecutionEntity) entity;\n      return executionEntity;\n    }\n    return null;\n  }\n\n}\n"}
{"label": "get|execution|trees", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.test.impl.logger;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n\n */\npublic abstract class AbstractDebugInfo implements DebugInfo {\n\n  protected List<DebugInfoExecutionTree> executionTrees = new ArrayList<DebugInfoExecutionTree>();\n\n  public List<DebugInfoExecutionTree> METHOD_NAME() {\n    return executionTrees;\n  }\n\n  public void setExecutionTrees(List<DebugInfoExecutionTree> executionTrees) {\n    this.executionTrees = executionTrees;\n  }\n\n  public void addExecutionTree(DebugInfoExecutionTree executionTree) {\n    executionTrees.add(executionTree);\n  }\n\n}\n"}
{"label": "get|process|execution|logger", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.test.impl.logger;\n\nimport org.activiti.engine.cfg.AbstractProcessEngineConfigurator;\nimport org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;\n\n/**\n\n */\npublic class ProcessExecutionLoggerConfigurator extends AbstractProcessEngineConfigurator {\n\n  protected ProcessExecutionLogger processExecutionLogger;\n\n  @Override\n  public void beforeInit(ProcessEngineConfigurationImpl processEngineConfiguration) {\n    processExecutionLogger = new ProcessExecutionLogger();\n    processEngineConfiguration.setCommandInvoker(new LoggingCommandInvoker(processExecutionLogger));\n  }\n\n  @Override\n  public void configure(ProcessEngineConfigurationImpl processEngineConfiguration) {\n    processEngineConfiguration.getEventDispatcher().addEventListener(new DebugInfoEntityEventListener(processExecutionLogger));\n  }\n\n  public ProcessExecutionLogger METHOD_NAME() {\n    return processExecutionLogger;\n  }\n\n  public void setProcessExecutionLogger(ProcessExecutionLogger processExecutionLogger) {\n    this.processExecutionLogger = processExecutionLogger;\n  }\n\n}\n"}
{"label": "execute|list", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.activiti.engine.history.HistoricTaskInstance;\nimport org.activiti.engine.history.NativeHistoricTaskInstanceQuery;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.impl.interceptor.CommandExecutor;\n\npublic class NativeHistoricTaskInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricTaskInstanceQuery, HistoricTaskInstance> implements NativeHistoricTaskInstanceQuery {\n\n  private static final long serialVersionUID = 1L;\n\n  public NativeHistoricTaskInstanceQueryImpl(CommandContext commandContext) {\n    super(commandContext);\n  }\n\n  public NativeHistoricTaskInstanceQueryImpl(CommandExecutor commandExecutor) {\n    super(commandExecutor);\n  }\n\n  // results ////////////////////////////////////////////////////////////////\n\n  public List<HistoricTaskInstance> METHOD_NAME(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\n    return commandContext.getHistoricTaskInstanceEntityManager().findHistoricTaskInstancesByNativeQuery(parameterMap, firstResult, maxResults);\n  }\n\n  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n    return commandContext.getHistoricTaskInstanceEntityManager().findHistoricTaskInstanceCountByNativeQuery(parameterMap);\n  }\n\n}\n"}
{"label": "parse|process|engine|configuration", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.impl.cfg;\n\nimport java.io.InputStream;\n\nimport org.activiti.engine.ProcessEngineConfiguration;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.InputStreamResource;\nimport org.springframework.core.io.Resource;\n\n/**\n\n */\npublic class BeansConfigurationHelper {\n\n  public static ProcessEngineConfiguration METHOD_NAME(Resource springResource, String beanName) {\n    DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n    XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);\n    xmlBeanDefinitionReader.setValidationMode(XmlBeanDefinitionReader.VALIDATION_XSD);\n    xmlBeanDefinitionReader.loadBeanDefinitions(springResource);\n    ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) beanFactory.getBean(beanName);\n    processEngineConfiguration.setBeans(new SpringBeanFactoryProxyMap(beanFactory));\n    return processEngineConfiguration;\n  }\n\n  public static ProcessEngineConfiguration parseProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName) {\n    Resource springResource = new InputStreamResource(inputStream);\n    return METHOD_NAME(springResource, beanName);\n  }\n\n  public static ProcessEngineConfiguration parseProcessEngineConfigurationFromResource(String resource, String beanName) {\n    Resource springResource = new ClassPathResource(resource);\n    return METHOD_NAME(springResource, beanName);\n  }\n\n}\n"}
{"label": "open|transaction|context", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.impl.cfg.jta;\n\nimport javax.transaction.TransactionManager;\n\nimport org.activiti.engine.impl.cfg.TransactionContext;\nimport org.activiti.engine.impl.cfg.TransactionContextFactory;\nimport org.activiti.engine.impl.interceptor.CommandContext;\n\n/**\n\n */\npublic class JtaTransactionContextFactory implements TransactionContextFactory {\n\n  protected final TransactionManager transactionManager;\n\n  public JtaTransactionContextFactory(TransactionManager transactionManager) {\n    this.transactionManager = transactionManager;\n  }\n\n  public TransactionContext METHOD_NAME(CommandContext commandContext) {\n    return new JtaTransactionContext(transactionManager);\n  }\n\n}\n"}
{"label": "open|transaction|context", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.cfg.standalone;\n\nimport org.activiti.engine.impl.cfg.TransactionContext;\nimport org.activiti.engine.impl.cfg.TransactionContextFactory;\nimport org.activiti.engine.impl.interceptor.CommandContext;\n\n/**\n\n */\npublic class StandaloneMybatisTransactionContextFactory implements TransactionContextFactory {\n\n  public TransactionContext METHOD_NAME(CommandContext commandContext) {\n    return new StandaloneMybatisTransactionContext(commandContext);\n  }\n}\n"}
{"label": "get|transaction|manager", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.cfg;\n\nimport javax.transaction.TransactionManager;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.impl.cfg.jta.JtaTransactionContextFactory;\nimport org.activiti.engine.impl.interceptor.CommandInterceptor;\nimport org.activiti.engine.impl.interceptor.JtaTransactionInterceptor;\n\n/**\n\n */\npublic class JtaProcessEngineConfiguration extends ProcessEngineConfigurationImpl {\n\n  protected TransactionManager transactionManager;\n\n  public JtaProcessEngineConfiguration() {\n    this.transactionsExternallyManaged = true;\n  }\n\n  @Override\n  public CommandInterceptor createTransactionInterceptor() {\n    if (transactionManager == null) {\n      throw new ActivitiException(\"transactionManager is required property for JtaProcessEngineConfiguration, use \" + StandaloneProcessEngineConfiguration.class.getName() + \" otherwise\");\n    }\n\n    return new JtaTransactionInterceptor(transactionManager);\n  }\n\n  @Override\n  public void initTransactionContextFactory() {\n    if (transactionContextFactory == null) {\n      transactionContextFactory = new JtaTransactionContextFactory(transactionManager);\n    }\n  }\n\n  public TransactionManager METHOD_NAME() {\n    return transactionManager;\n  }\n\n  public void setTransactionManager(TransactionManager transactionManager) {\n    this.transactionManager = transactionManager;\n  }\n}\n"}
{"label": "get|first", "code": "package org.activiti.engine.impl.cfg;\n\nimport org.activiti.engine.impl.interceptor.Command;\nimport org.activiti.engine.impl.interceptor.CommandConfig;\nimport org.activiti.engine.impl.interceptor.CommandExecutor;\nimport org.activiti.engine.impl.interceptor.CommandInterceptor;\n\n/**\n * Command executor that passes commands to the first interceptor in the chain. If no {@link CommandConfig} is passed, the default configuration will be used.\n * \n\n\n */\npublic class CommandExecutorImpl implements CommandExecutor {\n\n  protected CommandConfig defaultConfig;\n  protected CommandInterceptor first;\n\n  public CommandExecutorImpl(CommandConfig defaultConfig, CommandInterceptor first) {\n    this.defaultConfig = defaultConfig;\n    this.first = first;\n  }\n\n  public CommandInterceptor METHOD_NAME() {\n    return first;\n  }\n  \n  public void setFirst(CommandInterceptor commandInterceptor) {\n    this.first = commandInterceptor;\n  }\n\n  @Override\n  public CommandConfig getDefaultConfig() {\n    return defaultConfig;\n  }\n\n  @Override\n  public <T> T execute(Command<T> command) {\n    return execute(defaultConfig, command);\n  }\n\n  @Override\n  public <T> T execute(CommandConfig config, Command<T> command) {\n    return first.execute(config, command);\n  }\n\n}\n"}
{"label": "create|bpmn|parse", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.cfg;\n\nimport org.activiti.engine.impl.bpmn.parser.BpmnParse;\nimport org.activiti.engine.impl.bpmn.parser.BpmnParser;\n\n/**\n\n */\npublic class DefaultBpmnParseFactory implements BpmnParseFactory {\n\n  public BpmnParse METHOD_NAME(BpmnParser bpmnParser) {\n    return new BpmnParse(bpmnParser);\n  }\n}\n"}
{"label": "is|enable|eager|execution|tree|fetching", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.cfg;\n\n/**\n\n */\npublic class PerformanceSettings {\n  \n  /**\n   * Experimental setting: if true, whenever an execution is fetched from the data store,\n   * the whole execution tree is fetched in the same roundtrip.\n   *  \n   * Less roundtrips to the database outweighs doing many, smaller fetches and often\n   * multiple executions from the same tree are needed anyway when executing process instances.\n   */\n  protected boolean enableEagerExecutionTreeFetching;\n  \n  /**\n   * Experimental setting: keeps a count on each execution that holds\n   * how many variables, jobs, tasks, event subscriptions, etc. the execution has.\n   * \n   * This makes the delete more performant as a query is not needed anymore\n   * to check if there is related data. However, maintaining the count\n   * does mean more updates to the execution and potentially more optimistic locking opportunities. \n   * Typically keeping the counts lead to better performance as deletes are a large part of the\n   * execution tree maintenance.  \n   */\n  protected boolean enableExecutionRelationshipCounts;\n  \n  /**\n   * If false, no check will be done on boot.\n   */\n  protected boolean validateExecutionRelationshipCountConfigOnBoot = true;\n  \n  /**\n   * Experimental setting: in certain places in the engine (execution/process instance/historic process instance/\n   * tasks/data objects) localization is supported. When this setting is false,\n   * localization is completely disabled, which gives a small performance gain.\n   */\n  protected boolean enableLocalization = true;\n\n  public boolean METHOD_NAME() {\n    return enableEagerExecutionTreeFetching;\n  }\n\n  public void setEnableEagerExecutionTreeFetching(boolean enableEagerExecutionTreeFetching) {\n    this.enableEagerExecutionTreeFetching = enableEagerExecutionTreeFetching;\n  }\n\n  public boolean isEnableExecutionRelationshipCounts() {\n    return enableExecutionRelationshipCounts;\n  }\n\n  public void setEnableExecutionRelationshipCounts(boolean enableExecutionRelationshipCounts) {\n    this.enableExecutionRelationshipCounts = enableExecutionRelationshipCounts;\n  }\n  \n  public boolean isValidateExecutionRelationshipCountConfigOnBoot() {\n    return validateExecutionRelationshipCountConfigOnBoot;\n  }\n\n  public void setValidateExecutionRelationshipCountConfigOnBoot(boolean validateExecutionRelationshipCountConfigOnBoot) {\n    this.validateExecutionRelationshipCountConfigOnBoot = validateExecutionRelationshipCountConfigOnBoot;\n  }\n\n  public boolean isEnableLocalization() {\n    return enableLocalization;\n  }\n\n  public void setEnableLocalization(boolean enableLocalization) {\n    this.enableLocalization = enableLocalization;\n  }\n\n}\n"}
{"label": "create|entity|manager|factory", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.impl.cfg;\n\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\n/**\n\n */\npublic class JpaHelper {\n\n  public static EntityManagerFactory METHOD_NAME(String jpaPersistenceUnitName) {\n    return Persistence.METHOD_NAME(jpaPersistenceUnitName);\n  }\n\n}\n"}
{"label": "get|command|executor", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl;\n\nimport org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;\nimport org.activiti.engine.impl.interceptor.CommandExecutor;\n\n/**\n\n\n */\npublic class ServiceImpl {\n\n  protected ProcessEngineConfigurationImpl processEngineConfiguration;\n\n  public ServiceImpl() {\n\n  }\n\n  public ServiceImpl(ProcessEngineConfigurationImpl processEngineConfiguration) {\n    this.processEngineConfiguration = processEngineConfiguration;\n  }\n\n  protected CommandExecutor commandExecutor;\n\n  public CommandExecutor METHOD_NAME() {\n    return commandExecutor;\n  }\n\n  public void setCommandExecutor(CommandExecutor commandExecutor) {\n    this.commandExecutor = commandExecutor;\n  }\n}\n"}
{"label": "get|java|version", "code": "package org.activiti.engine.impl.util;\n\n/**\n\n */\npublic class JvmUtil {\n\n  public static String METHOD_NAME() {\n    return System.getProperty(\"java.version\");\n  }\n\n  public static boolean isJDK8() {\n    String version = System.getProperty(\"java.version\");\n    return version.startsWith(\"1.8\");\n  }\n\n  public static boolean isJDK7() {\n    String version = System.getProperty(\"java.version\");\n    return version.startsWith(\"1.7\");\n  }\n\n  public static boolean isAtLeastJDK7() {\n    return isJDK7() || isJDK8();\n  }\n\n}\n"}
{"label": "get|input|stream", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.util.io;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\n\nimport org.activiti.engine.ActivitiException;\n\n/**\n\n */\npublic class StringStreamSource implements StreamSource {\n\n  String string;\n  String byteArrayEncoding = \"utf-8\";\n\n  public StringStreamSource(String string) {\n    this.string = string;\n  }\n\n  public StringStreamSource(String string, String byteArrayEncoding) {\n    this.string = string;\n    this.byteArrayEncoding = byteArrayEncoding;\n  }\n\n  public InputStream METHOD_NAME() {\n    try {\n      return new ByteArrayInputStream(byteArrayEncoding == null ? string.getBytes() : string.getBytes(byteArrayEncoding));\n    } catch (UnsupportedEncodingException e) {\n      throw new ActivitiException(\"Unsupported enconding for string\", e);\n    }\n  }\n\n  public String toString() {\n    return \"String\";\n  }\n}\n"}
{"label": "get|input|stream", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.util.io;\n\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\nimport org.activiti.engine.ActivitiIllegalArgumentException;\n\n/**\n\n */\npublic class UrlStreamSource implements StreamSource {\n\n  URL url;\n\n  public UrlStreamSource(URL url) {\n    this.url = url;\n  }\n\n  public InputStream METHOD_NAME() {\n    try {\n      return new BufferedInputStream(url.openStream());\n    } catch (IOException e) {\n      throw new ActivitiIllegalArgumentException(\"couldn't open url '\" + url + \"'\", e);\n    }\n  }\n}\n"}
{"label": "get|input|stream", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.util.io;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\n/**\n\n */\npublic class BytesStreamSource implements StreamSource {\n\n  protected byte[] bytes;\n\n  public BytesStreamSource(byte[] bytes) {\n    this.bytes = bytes;\n  }\n\n  public InputStream METHOD_NAME() {\n    return new ByteArrayInputStream(bytes);\n  }\n\n}\n"}
{"label": "get|input|stream", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.util.io;\n\nimport java.io.BufferedInputStream;\nimport java.io.InputStream;\n\nimport org.activiti.engine.ActivitiIllegalArgumentException;\nimport org.activiti.engine.impl.util.ReflectUtil;\n\n/**\n\n\n */\npublic class ResourceStreamSource implements StreamSource {\n\n  String resource;\n  ClassLoader classLoader;\n\n  public ResourceStreamSource(String resource) {\n    this.resource = resource;\n  }\n\n  public ResourceStreamSource(String resource, ClassLoader classLoader) {\n    this.resource = resource;\n    this.classLoader = classLoader;\n  }\n\n  public InputStream METHOD_NAME() {\n    InputStream inputStream = null;\n    if (classLoader == null) {\n      inputStream = ReflectUtil.getResourceAsStream(resource);\n    } else {\n      inputStream = classLoader.getResourceAsStream(resource);\n    }\n    if (inputStream == null) {\n      throw new ActivitiIllegalArgumentException(\"resource '\" + resource + \"' doesn't exist\");\n    }\n    return new BufferedInputStream(inputStream);\n  }\n\n  public String toString() {\n    return \"Resource[\" + resource + \"]\";\n  }\n}\n"}
{"label": "to|string", "code": "package org.activiti.engine.impl.util.json;\n\n/*\n Copyright (c) 2006 JSON.org\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n The Software shall be used for Good, not Evil.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nimport java.io.StringWriter;\n\n/**\n * JSONStringer provides a quick and convenient way of producing JSON text. The texts produced strictly conform to JSON syntax rules. No whitespace is added, so the results are ready for transmission\n * or storage. Each instance of JSONStringer can produce one JSON text.\n * <p>\n * A JSONStringer instance provides a <code>value</code> method for appending values to the text, and a <code>key</code> method for adding keys before values in objects. There are <code>array</code>\n * and <code>endArray</code> methods that make and bound array values, and <code>object</code> and <code>endObject</code> methods which make and bound object values. All of these methods return the\n * JSONWriter instance, permitting cascade style. For example,\n * \n * <pre>\n * myString = new JSONStringer().object().key(&quot;JSON&quot;).value(&quot;Hello, World!&quot;).endObject().toString();\n * </pre>\n * \n * which produces the string\n * \n * <pre>\n * {\"JSON\":\"Hello, World!\"}\n * </pre>\n * <p>\n * The first method called must be <code>array</code> or <code>object</code>. There are no methods for adding commas or colons. JSONStringer adds them for you. Objects and arrays can be nested up to\n * 20 levels deep.\n * <p>\n * This can sometimes be easier than using a JSONObject to build a string.\n * \n\n * @version 2008-09-18\n */\npublic class JSONStringer extends JSONWriter {\n  /**\n   * Make a fresh JSONStringer. It can be used to build one JSON text.\n   */\n  public JSONStringer() {\n    super(new StringWriter());\n  }\n\n  /**\n   * Return the JSON text. This method is used to obtain the product of the JSONStringer instance. It will return <code>null</code> if there was a problem in the construction of the JSON text (such as\n   * the calls to <code>array</code> were not properly balanced with calls to <code>endArray</code>).\n   * \n   * @return The JSON text.\n   */\n  public String METHOD_NAME() {\n    return this.mode == 'd' ? this.writer.METHOD_NAME() : null;\n  }\n}\n"}
{"label": "get|cause", "code": "package org.activiti.engine.impl.util.json;\n\n/**\n * The JSONException is thrown by the JSON.org classes when things are amiss.\n * \n\n * @version 2008-09-18\n */\npublic class JSONException extends RuntimeException {\n  /**\n\t * \n\t */\n  private static final long serialVersionUID = 0;\n  private Throwable cause;\n\n  /**\n   * Constructs a JSONException with an explanatory message.\n   * \n   * @param message\n   *          Detail about the reason for the exception.\n   */\n  public JSONException(String message) {\n    super(message);\n  }\n\n  public JSONException(Throwable t) {\n    super(t.getMessage());\n    this.cause = t;\n  }\n\n  public Throwable METHOD_NAME() {\n    return this.cause;\n  }\n}\n"}
{"label": "singleton|map", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.util;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.activiti.engine.ActivitiIllegalArgumentException;\n\n/**\n * helper/convenience methods for working with collections.\n * \n\n */\npublic class CollectionUtil {\n\n  // No need to instantiate\n  private CollectionUtil() {\n  }\n\n  /**\n   * Helper method that creates a singleton map.\n   * \n   * Alternative for Collections.singletonMap(), since that method returns a generic typed map <K,T> depending on the input type, but we often need a <String, Object> map.\n   */\n  public static Map<String, Object> METHOD_NAME(String key, Object value) {\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(key, value);\n    return map;\n  }\n\n  /**\n   * Helper method to easily create a map.\n   * \n   * Takes as input a varargs containing the key1, value1, key2, value2, etc. Note: although an Object, we will cast the key to String internally.\n   */\n  public static Map<String, Object> map(Object... objects) {\n\n    if (objects.length % 2 != 0) {\n      throw new ActivitiIllegalArgumentException(\"The input should always be even since we expect a list of key-value pairs!\");\n    }\n\n    Map<String, Object> map = new HashMap<String, Object>();\n    for (int i = 0; i < objects.length; i += 2) {\n      map.put((String) objects[i], objects[i + 1]);\n    }\n\n    return map;\n  }\n  \n  public static boolean isEmpty(@SuppressWarnings(\"rawtypes\") Collection collection) {\n    return (collection == null || collection.isEmpty());\n  }\n\n  public static boolean isNotEmpty(@SuppressWarnings(\"rawtypes\") Collection collection) {\n    return !isEmpty(collection);\n  }\n\n}\n"}
{"label": "convert|to|time|zone", "code": "package org.activiti.engine.impl.util;\n\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport java.util.TimeZone;\n\npublic class TimeZoneUtil {\n\n  public static Calendar METHOD_NAME(Calendar time, TimeZone timeZone) {\n    Calendar foreignTime = new GregorianCalendar(timeZone);\n    foreignTime.setTimeInMillis(time.getTimeInMillis());\n\n    return foreignTime;\n  }\n\n}\n"}
{"label": "get|first|result", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl;\n\n/**\n * holds the parameters of a page (partial result) for a query.\n * \n\n\n */\npublic class Page {\n\n  protected int firstResult;\n  protected int maxResults;\n\n  public Page(int firstResult, int maxResults) {\n    this.firstResult = firstResult;\n    this.maxResults = maxResults;\n  }\n\n  public int METHOD_NAME() {\n    return firstResult;\n  }\n\n  public int getMaxResults() {\n    return maxResults;\n  }\n}\n"}
{"label": "execute|list", "code": "package org.activiti.engine.impl;\n\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.impl.interceptor.CommandExecutor;\nimport org.activiti.engine.repository.NativeProcessDefinitionQuery;\nimport org.activiti.engine.repository.ProcessDefinition;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class NativeProcessDefinitionQueryImpl extends AbstractNativeQuery<NativeProcessDefinitionQuery, ProcessDefinition> implements NativeProcessDefinitionQuery {\n\n  private static final long serialVersionUID = 1L;\n\n  public NativeProcessDefinitionQueryImpl(CommandContext commandContext) {\n    super(commandContext);\n  }\n\n  public NativeProcessDefinitionQueryImpl(CommandExecutor commandExecutor) {\n    super(commandExecutor);\n  }\n\n  // results ////////////////////////////////////////////////////////////////\n\n  public List<ProcessDefinition> METHOD_NAME(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\n    return commandContext.getProcessDefinitionEntityManager().findProcessDefinitionsByNativeQuery(parameterMap, firstResult, maxResults);\n  }\n\n  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n    return commandContext.getProcessDefinitionEntityManager().findProcessDefinitionCountByNativeQuery(parameterMap);\n  }\n\n}\n"}
{"label": "get|name", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl;\n\nimport java.io.Serializable;\n\nimport org.activiti.engine.ProcessEngineInfo;\n\n/**\n\n */\npublic class ProcessEngineInfoImpl implements Serializable, ProcessEngineInfo {\n\n  private static final long serialVersionUID = 1L;\n\n  String name;\n  String resourceUrl;\n  String exception;\n\n  public ProcessEngineInfoImpl(String name, String resourceUrl, String exception) {\n    this.name = name;\n    this.resourceUrl = resourceUrl;\n    this.exception = exception;\n  }\n\n  public String METHOD_NAME() {\n    return name;\n  }\n\n  public String getResourceUrl() {\n    return resourceUrl;\n  }\n\n  public String getException() {\n    return exception;\n  }\n}\n"}
{"label": "transform", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.transformer;\n\nimport org.activiti.engine.ActivitiException;\n\n/**\n * A Transformer is responsible of transforming an object into a different object\n * \n\n */\npublic abstract class AbstractTransformer implements Transformer {\n\n  /**\n   * {@inheritDoc}\n   */\n  public Object METHOD_NAME(Object anObject) {\n    try {\n      return this.primTransform(anObject);\n    } catch (Exception e) {\n\n      throw new ActivitiException(\"Error while executing transformation from object: \" + anObject + \" using transformer \" + this);\n    }\n  }\n\n  /**\n   * Transforms anObject into a different object\n   * \n   * @param anObject\n   *          the object to be transformed\n   * @return the transformed object\n   */\n  protected abstract Object primTransform(Object anObject) throws Exception;\n}\n"}
{"label": "get|instance", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.transformer;\n\n/**\n * \n * \n\n */\npublic class Identity extends AbstractTransformer {\n\n  private static Identity instance = new Identity();\n\n  public static synchronized Identity METHOD_NAME() {\n    if (instance == null) {\n      instance = new Identity();\n    }\n    return instance;\n  }\n\n  private Identity() {\n\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  protected Object primTransform(Object anObject) throws Exception {\n    return anObject;\n  }\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport java.util.Date;\n\nimport org.activiti.engine.compatibility.Activiti5CompatibilityHandler;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.impl.persistence.entity.TaskEntity;\nimport org.activiti.engine.impl.util.Activiti5Util;\n\n/**\n\n */\npublic class SetTaskDueDateCmd extends NeedsActiveTaskCmd<Void> {\n\n  private static final long serialVersionUID = 1L;\n\n  protected Date dueDate;\n\n  public SetTaskDueDateCmd(String taskId, Date dueDate) {\n    super(taskId);\n    this.dueDate = dueDate;\n  }\n\n  protected Void METHOD_NAME(CommandContext commandContext, TaskEntity task) {\n    if (Activiti5Util.isActiviti5ProcessDefinitionId(commandContext, task.getProcessDefinitionId())) {\n      Activiti5CompatibilityHandler activiti5CompatibilityHandler = Activiti5Util.getActiviti5CompatibilityHandler(); \n      activiti5CompatibilityHandler.setTaskDueDate(taskId, dueDate);\n      return null;\n    }\n    \n    task.setDueDate(dueDate);\n    commandContext.getHistoryManager().recordTaskDueDateChange(task.getId(), task.getDueDate());\n    commandContext.getTaskEntityManager().update(task);\n    return null;\n  }\n\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.ActivitiIllegalArgumentException;\nimport org.activiti.engine.ActivitiObjectNotFoundException;\nimport org.activiti.engine.impl.interceptor.Command;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.impl.persistence.entity.TaskEntity;\nimport org.activiti.engine.task.Task;\n\n/**\n * An abstract superclass for {@link Command} implementations that want to verify the provided task is always active (ie. not suspended).\n * \n\n */\npublic abstract class NeedsActiveTaskCmd<T> implements Command<T>, Serializable {\n\n  private static final long serialVersionUID = 1L;\n\n  protected String taskId;\n\n  public NeedsActiveTaskCmd(String taskId) {\n    this.taskId = taskId;\n  }\n\n  public T METHOD_NAME(CommandContext commandContext) {\n\n    if (taskId == null) {\n      throw new ActivitiIllegalArgumentException(\"taskId is null\");\n    }\n\n    TaskEntity task = commandContext.getTaskEntityManager().findById(taskId);\n\n    if (task == null) {\n      throw new ActivitiObjectNotFoundException(\"Cannot find task with id \" + taskId, Task.class);\n    }\n\n    if (task.isSuspended()) {\n      throw new ActivitiException(getSuspendedTaskException());\n    }\n\n    return METHOD_NAME(commandContext, task);\n  }\n\n  /**\n   * Subclasses must implement in this method their normal command logic. The provided task is ensured to be active.\n   */\n  protected abstract T METHOD_NAME(CommandContext commandContext, TaskEntity task);\n\n  /**\n   * Subclasses can override this method to provide a customized exception message that will be thrown when the task is suspended.\n   */\n  protected String getSuspendedTaskException() {\n    return \"Cannot execute operation: task is suspended\";\n  }\n\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\nimport java.util.List;\n\nimport org.activiti.engine.impl.interceptor.Command;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.task.Attachment;\n\n/**\n\n */\npublic class GetProcessInstanceAttachmentsCmd implements Command<List<? extends Attachment>>, Serializable {\n\n  private static final long serialVersionUID = 1L;\n  protected String processInstanceId;\n\n  public GetProcessInstanceAttachmentsCmd(String taskId) {\n    this.processInstanceId = taskId;\n  }\n\n  public List<? extends Attachment> METHOD_NAME(CommandContext commandContext) {\n    return commandContext.getAttachmentEntityManager().findAttachmentsByProcessInstanceId(processInstanceId);\n  }\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\n\nimport org.activiti.engine.ActivitiIllegalArgumentException;\nimport org.activiti.engine.impl.interceptor.Command;\nimport org.activiti.engine.impl.interceptor.CommandContext;\n\n/**\n\n */\npublic class GetModelEditorSourceExtraCmd implements Command<byte[]>, Serializable {\n\n  private static final long serialVersionUID = 1L;\n  protected String modelId;\n\n  public GetModelEditorSourceExtraCmd(String modelId) {\n    this.modelId = modelId;\n  }\n\n  public byte[] METHOD_NAME(CommandContext commandContext) {\n    if (modelId == null) {\n      throw new ActivitiIllegalArgumentException(\"modelId is null\");\n    }\n\n    byte[] bytes = commandContext.getModelEntityManager().findEditorSourceExtraByModelId(modelId);\n\n    return bytes;\n  }\n\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\n\nimport org.activiti.engine.ActivitiIllegalArgumentException;\nimport org.activiti.engine.impl.interceptor.Command;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.repository.ProcessDefinition;\n\n/**\n * Gives access to a deployed process model, e.g., a BPMN 2.0 XML file, through a stream of bytes.\n * \n\n */\npublic class GetDeploymentProcessModelCmd implements Command<InputStream>, Serializable {\n\n  private static final long serialVersionUID = 1L;\n  protected String processDefinitionId;\n\n  public GetDeploymentProcessModelCmd(String processDefinitionId) {\n    if (processDefinitionId == null || processDefinitionId.length() < 1) {\n      throw new ActivitiIllegalArgumentException(\"The process definition id is mandatory, but '\" + processDefinitionId + \"' has been provided.\");\n    }\n    this.processDefinitionId = processDefinitionId;\n  }\n\n  public InputStream METHOD_NAME(CommandContext commandContext) {\n    ProcessDefinition processDefinition = commandContext.getProcessEngineConfiguration().getDeploymentManager().findDeployedProcessDefinitionById(processDefinitionId);\n    String deploymentId = processDefinition.getDeploymentId();\n    String resourceName = processDefinition.getResourceName();\n    InputStream processModelStream = new GetDeploymentResourceCmd(deploymentId, resourceName).METHOD_NAME(commandContext);\n    return processModelStream;\n  }\n\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\n\nimport org.activiti.engine.impl.interceptor.Command;\nimport org.activiti.engine.impl.interceptor.CommandContext;\n\n/**\n\n */\npublic class AddEditorSourceForModelCmd implements Command<Object>, Serializable {\n\n  private static final long serialVersionUID = 1L;\n\n  protected String modelId;\n  protected byte[] bytes;\n\n  public AddEditorSourceForModelCmd(String modelId, byte[] bytes) {\n    this.modelId = modelId;\n    this.bytes = bytes;\n  }\n\n  public Object METHOD_NAME(CommandContext commandContext) {\n    commandContext.getModelEntityManager().insertEditorSourceForModel(modelId, bytes);\n\n    return null;\n  }\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport org.activiti.engine.compatibility.Activiti5CompatibilityHandler;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.impl.persistence.entity.TaskEntity;\nimport org.activiti.engine.impl.util.Activiti5Util;\n\n/**\n\n */\npublic class SetTaskPriorityCmd extends NeedsActiveTaskCmd<Void> {\n\n  private static final long serialVersionUID = 1L;\n\n  protected int priority;\n\n  public SetTaskPriorityCmd(String taskId, int priority) {\n    super(taskId);\n    this.priority = priority;\n  }\n\n  protected Void METHOD_NAME(CommandContext commandContext, TaskEntity task) {\n    if (Activiti5Util.isActiviti5ProcessDefinitionId(commandContext, task.getProcessDefinitionId())) {\n      Activiti5CompatibilityHandler activiti5CompatibilityHandler = Activiti5Util.getActiviti5CompatibilityHandler(); \n      activiti5CompatibilityHandler.setTaskPriority(taskId, priority);\n      return null;\n    }\n    \n    task.setPriority(priority);\n    commandContext.getHistoryManager().recordTaskPriorityChange(task.getId(), task.getPriority());\n    commandContext.getTaskEntityManager().update(task);\n    return null;\n  }\n\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\n\nimport org.activiti.engine.ActivitiIllegalArgumentException;\nimport org.activiti.engine.ActivitiObjectNotFoundException;\nimport org.activiti.engine.impl.interceptor.Command;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.impl.persistence.entity.TaskEntity;\nimport org.activiti.engine.task.Task;\n\n/**\n\n */\npublic class HasTaskVariableCmd implements Command<Boolean>, Serializable {\n\n  private static final long serialVersionUID = 1L;\n  protected String taskId;\n  protected String variableName;\n  protected boolean isLocal;\n\n  public HasTaskVariableCmd(String taskId, String variableName, boolean isLocal) {\n    this.taskId = taskId;\n    this.variableName = variableName;\n    this.isLocal = isLocal;\n  }\n\n  public Boolean METHOD_NAME(CommandContext commandContext) {\n    if (taskId == null) {\n      throw new ActivitiIllegalArgumentException(\"taskId is null\");\n    }\n    if (variableName == null) {\n      throw new ActivitiIllegalArgumentException(\"variableName is null\");\n    }\n\n    TaskEntity task = commandContext.getTaskEntityManager().findById(taskId);\n\n    if (task == null) {\n      throw new ActivitiObjectNotFoundException(\"task \" + taskId + \" doesn't exist\", Task.class);\n    }\n    boolean hasVariable = false;\n\n    if (isLocal) {\n      hasVariable = task.hasVariableLocal(variableName);\n    } else {\n      hasVariable = task.hasVariable(variableName);\n    }\n\n    return hasVariable;\n  }\n}\n"}
{"label": "execute", "code": "/* Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\nimport java.util.List;\n\nimport org.activiti.engine.impl.interceptor.Command;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.task.Comment;\n\n/**\n\n */\npublic class GetTypeCommentsCmd implements Command<List<Comment>>, Serializable {\n\n  private static final long serialVersionUID = 1L;\n  protected String type;\n\n  public GetTypeCommentsCmd(String type) {\n    this.type = type;\n  }\n\n  public List<Comment> METHOD_NAME(CommandContext commandContext) {\n    return commandContext.getCommentEntityManager().findCommentsByType(type);\n  }\n}\n"}
