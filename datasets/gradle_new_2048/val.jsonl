{"label": "measure|scrap|child", "code": "package com.luck.pictureselector;\n\nimport android.content.Context;\nimport android.support.v7.widget.GridLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.view.View;\nimport android.view.ViewGroup;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.ui\n * email\uff1a893855882@qq.com\n * data\uff1a16/12/31\n */\n\npublic class FullyGridLayoutManager extends GridLayoutManager {\n    public FullyGridLayoutManager(Context context, int spanCount) {\n        super(context, spanCount);\n    }\n\n    public FullyGridLayoutManager(Context context, int spanCount, int orientation, boolean reverseLayout) {\n        super(context, spanCount, orientation, reverseLayout);\n    }\n\n    private int[] mMeasuredDimension = new int[2];\n\n    @Override\n    public void onMeasure(RecyclerView.Recycler recycler, RecyclerView.State state, int widthSpec, int heightSpec) {\n        final int widthMode = View.MeasureSpec.getMode(widthSpec);\n        final int heightMode = View.MeasureSpec.getMode(heightSpec);\n        final int widthSize = View.MeasureSpec.getSize(widthSpec);\n        final int heightSize = View.MeasureSpec.getSize(heightSpec);\n\n        int width = 0;\n        int height = 0;\n        int count = getItemCount();\n        int span = getSpanCount();\n        for (int i = 0; i < count; i++) {\n            METHOD_NAME(recycler, i,\n                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),\n                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),\n                    mMeasuredDimension);\n\n            if (getOrientation() == HORIZONTAL) {\n                if (i % span == 0) {\n                    width = width + mMeasuredDimension[0];\n                }\n                if (i == 0) {\n                    height = mMeasuredDimension[1];\n                }\n            } else {\n                if (i % span == 0) {\n                    height = height + mMeasuredDimension[1];\n                }\n                if (i == 0) {\n                    width = mMeasuredDimension[0];\n                }\n            }\n        }\n\n        switch (widthMode) {\n            case View.MeasureSpec.EXACTLY:\n                width = widthSize;\n            case View.MeasureSpec.AT_MOST:\n            case View.MeasureSpec.UNSPECIFIED:\n        }\n\n        switch (heightMode) {\n            case View.MeasureSpec.EXACTLY:\n                height = heightSize;\n            case View.MeasureSpec.AT_MOST:\n            case View.MeasureSpec.UNSPECIFIED:\n        }\n\n        setMeasuredDimension(width, height);\n    }\n\n    final RecyclerView.State mState = new RecyclerView.State();\n\n    private void METHOD_NAME(RecyclerView.Recycler recycler, int position, int widthSpec,\n                                   int heightSpec, int[] measuredDimension) {\n        int itemCount = mState.getItemCount();\n        if (position < itemCount) {\n            try {\n                View view = recycler.getViewForPosition(0);\n                if (view != null) {\n                    RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) view.getLayoutParams();\n                    int childWidthSpec = ViewGroup.getChildMeasureSpec(widthSpec,\n                            getPaddingLeft() + getPaddingRight(), p.width);\n                    int childHeightSpec = ViewGroup.getChildMeasureSpec(heightSpec,\n                            getPaddingTop() + getPaddingBottom(), p.height);\n                    view.measure(childWidthSpec, childHeightSpec);\n                    measuredDimension[0] = view.getMeasuredWidth() + p.leftMargin + p.rightMargin;\n                    measuredDimension[1] = view.getMeasuredHeight() + p.bottomMargin + p.topMargin;\n                    recycler.recycleView(view);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"}
{"label": "get|corners|from|rect", "code": "package com.yalantis.ucrop.util;\n\nimport android.graphics.RectF;\n\npublic class RectUtils {\n\n    /**\n     * Gets a float array of the 2D coordinates representing a rectangles\n     * corners.\n     * The order of the corners in the float array is:\n     * 0------->1\n     * ^        |\n     * |        |\n     * |        v\n     * 3<-------2\n     *\n     * @param r the rectangle to get the corners of\n     * @return the float array of corners (8 floats)\n     */\n    public static float[] METHOD_NAME(RectF r) {\n        return new float[]{\n                r.left, r.top,\n                r.right, r.top,\n                r.right, r.bottom,\n                r.left, r.bottom\n        };\n    }\n\n    /**\n     * Gets a float array of two lengths representing a rectangles width and height\n     * The order of the corners in the input float array is:\n     * 0------->1\n     * ^        |\n     * |        |\n     * |        v\n     * 3<-------2\n     *\n     * @param corners the float array of corners (8 floats)\n     * @return the float array of width and height (2 floats)\n     */\n    public static float[] getRectSidesFromCorners(float[] corners) {\n        return new float[]{(float) Math.sqrt(Math.pow(corners[0] - corners[2], 2) + Math.pow(corners[1] - corners[3], 2)),\n                (float) Math.sqrt(Math.pow(corners[2] - corners[4], 2) + Math.pow(corners[3] - corners[5], 2))};\n    }\n\n    public static float[] getCenterFromRect(RectF r) {\n        return new float[]{r.centerX(), r.centerY()};\n    }\n\n    /**\n     * Takes an array of 2D coordinates representing corners and returns the\n     * smallest rectangle containing those coordinates.\n     *\n     * @param array array of 2D coordinates\n     * @return smallest rectangle containing coordinates\n     */\n    public static RectF trapToRect(float[] array) {\n        RectF r = new RectF(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY,\n                Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);\n        for (int i = 1; i < array.length; i += 2) {\n            float x = Math.round(array[i - 1] * 10) / 10.f;\n            float y = Math.round(array[i] * 10) / 10.f;\n            r.left = (x < r.left) ? x : r.left;\n            r.top = (y < r.top) ? y : r.top;\n            r.right = (x > r.right) ? x : r.right;\n            r.bottom = (y > r.bottom) ? y : r.bottom;\n        }\n        r.sort();\n        return r;\n    }\n\n}"}
{"label": "ease|out", "code": "package com.yalantis.ucrop.util;\n\npublic final class CubicEasing {\n\n    public static float METHOD_NAME(float time, float start, float end, float duration) {\n        return end * ((time = time / duration - 1.0f) * time * time + 1.0f) + start;\n    }\n\n    public static float easeIn(float time, float start, float end, float duration) {\n        return end * (time /= duration) * time * time + start;\n    }\n\n    public static float easeInOut(float time, float start, float end, float duration) {\n        return (time /= duration / 2.0f) < 1.0f ? end / 2.0f * time * time * time + start : end / 2.0f * ((time -= 2.0f) * time * time + 2.0f) + start;\n    }\n\n}\n"}
{"label": "get|angle", "code": "package com.yalantis.ucrop.util;\n\nimport android.support.annotation.NonNull;\nimport android.view.MotionEvent;\n\npublic class RotationGestureDetector {\n\n    private static final int INVALID_POINTER_INDEX = -1;\n\n    private float fX, fY, sX, sY;\n\n    private int mPointerIndex1, mPointerIndex2;\n    private float mAngle;\n    private boolean mIsFirstTouch;\n\n    private OnRotationGestureListener mListener;\n\n    public RotationGestureDetector(OnRotationGestureListener listener) {\n        mListener = listener;\n        mPointerIndex1 = INVALID_POINTER_INDEX;\n        mPointerIndex2 = INVALID_POINTER_INDEX;\n    }\n\n    public float METHOD_NAME() {\n        return mAngle;\n    }\n\n    public boolean onTouchEvent(@NonNull MotionEvent event) {\n        switch (event.getActionMasked()) {\n            case MotionEvent.ACTION_DOWN:\n                sX = event.getX();\n                sY = event.getY();\n                mPointerIndex1 = event.findPointerIndex(event.getPointerId(0));\n                mAngle = 0;\n                mIsFirstTouch = true;\n                break;\n            case MotionEvent.ACTION_POINTER_DOWN:\n                fX = event.getX();\n                fY = event.getY();\n                mPointerIndex2 = event.findPointerIndex(event.getPointerId(event.getActionIndex()));\n                mAngle = 0;\n                mIsFirstTouch = true;\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (mPointerIndex1 != INVALID_POINTER_INDEX && mPointerIndex2 != INVALID_POINTER_INDEX && event.getPointerCount() > mPointerIndex2) {\n                    float nfX, nfY, nsX, nsY;\n\n                    nsX = event.getX(mPointerIndex1);\n                    nsY = event.getY(mPointerIndex1);\n                    nfX = event.getX(mPointerIndex2);\n                    nfY = event.getY(mPointerIndex2);\n\n                    if (mIsFirstTouch) {\n                        mAngle = 0;\n                        mIsFirstTouch = false;\n                    } else {\n                        calculateAngleBetweenLines(fX, fY, sX, sY, nfX, nfY, nsX, nsY);\n                    }\n\n                    if (mListener != null) {\n                        mListener.onRotation(this);\n                    }\n                    fX = nfX;\n                    fY = nfY;\n                    sX = nsX;\n                    sY = nsY;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                mPointerIndex1 = INVALID_POINTER_INDEX;\n                break;\n            case MotionEvent.ACTION_POINTER_UP:\n                mPointerIndex2 = INVALID_POINTER_INDEX;\n                break;\n        }\n        return true;\n    }\n\n    private float calculateAngleBetweenLines(float fx1, float fy1, float fx2, float fy2,\n                                             float sx1, float sy1, float sx2, float sy2) {\n        return calculateAngleDelta(\n                (float) Math.toDegrees((float) Math.atan2((fy1 - fy2), (fx1 - fx2))),\n                (float) Math.toDegrees((float) Math.atan2((sy1 - sy2), (sx1 - sx2))));\n    }\n\n    private float calculateAngleDelta(float angleFrom, float angleTo) {\n        mAngle = angleTo % 360.0f - angleFrom % 360.0f;\n\n        if (mAngle < -180.0f) {\n            mAngle += 360.0f;\n        } else if (mAngle > 180.0f) {\n            mAngle -= 360.0f;\n        }\n\n        return mAngle;\n    }\n\n    public static class SimpleOnRotationGestureListener implements OnRotationGestureListener {\n\n        @Override\n        public boolean onRotation(RotationGestureDetector rotationDetector) {\n            return false;\n        }\n    }\n\n    public interface OnRotationGestureListener {\n\n        boolean onRotation(RotationGestureDetector rotationDetector);\n    }\n\n}"}
{"label": "set|filter|bitmap", "code": "/*\n * Copyright (C) 2008 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.yalantis.ucrop.util;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.ColorFilter;\nimport android.graphics.Paint;\nimport android.graphics.PixelFormat;\nimport android.graphics.drawable.Drawable;\n\npublic class FastBitmapDrawable extends Drawable {\n\n    private final Paint mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);\n\n    private Bitmap mBitmap;\n    private int mAlpha;\n    private int mWidth, mHeight;\n\n    public FastBitmapDrawable(Bitmap b) {\n        mAlpha = 255;\n        setBitmap(b);\n    }\n\n    @Override\n    public void draw(Canvas canvas) {\n        if (mBitmap != null && !mBitmap.isRecycled()) {\n            canvas.drawBitmap(mBitmap, null, getBounds(), mPaint);\n        }\n    }\n\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        mPaint.setColorFilter(cf);\n    }\n\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n\n    public void METHOD_NAME(boolean filterBitmap) {\n        mPaint.METHOD_NAME(filterBitmap);\n    }\n\n    public int getAlpha() {\n        return mAlpha;\n    }\n\n    @Override\n    public void setAlpha(int alpha) {\n        mAlpha = alpha;\n        mPaint.setAlpha(alpha);\n    }\n\n    @Override\n    public int getIntrinsicWidth() {\n        return mWidth;\n    }\n\n    @Override\n    public int getIntrinsicHeight() {\n        return mHeight;\n    }\n\n    @Override\n    public int getMinimumWidth() {\n        return mWidth;\n    }\n\n    @Override\n    public int getMinimumHeight() {\n        return mHeight;\n    }\n\n    public Bitmap getBitmap() {\n        return mBitmap;\n    }\n\n    public void setBitmap(Bitmap b) {\n        mBitmap = b;\n        if (b != null) {\n            mWidth = mBitmap.getWidth();\n            mHeight = mBitmap.getHeight();\n        } else {\n            mWidth = mHeight = 0;\n        }\n    }\n\n}\n"}
{"label": "get|crop|image|view", "code": "package com.yalantis.ucrop.view;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.RectF;\nimport android.support.annotation.NonNull;\nimport android.util.AttributeSet;\nimport android.view.LayoutInflater;\nimport android.widget.FrameLayout;\n\nimport com.yalantis.ucrop.R;\nimport com.yalantis.ucrop.callback.CropBoundsChangeListener;\nimport com.yalantis.ucrop.callback.OverlayViewChangeListener;\n\npublic class UCropView extends FrameLayout {\n\n    private final GestureCropImageView mGestureCropImageView;\n    private final OverlayView mViewOverlay;\n\n    public UCropView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public UCropView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n\n        LayoutInflater.from(context).inflate(R.layout.ucrop_view, this, true);\n        mGestureCropImageView = (GestureCropImageView) findViewById(R.id.image_view_crop);\n        mViewOverlay = (OverlayView) findViewById(R.id.view_overlay);\n\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ucrop_UCropView);\n        mViewOverlay.processStyledAttributes(a);\n        mGestureCropImageView.processStyledAttributes(a);\n        a.recycle();\n\n\n        mGestureCropImageView.setCropBoundsChangeListener(new CropBoundsChangeListener() {\n            @Override\n            public void onCropAspectRatioChanged(float cropRatio) {\n                mViewOverlay.setTargetAspectRatio(cropRatio);\n            }\n        });\n        mViewOverlay.setOverlayViewChangeListener(new OverlayViewChangeListener() {\n            @Override\n            public void onCropRectUpdated(RectF cropRect) {\n                mGestureCropImageView.setCropRect(cropRect);\n            }\n        });\n    }\n\n    @Override\n    public boolean shouldDelayChildPressedState() {\n        return false;\n    }\n\n    @NonNull\n    public GestureCropImageView METHOD_NAME() {\n        return mGestureCropImageView;\n    }\n\n    @NonNull\n    public OverlayView getOverlayView() {\n        return mViewOverlay;\n    }\n\n}"}
{"label": "set|scale|enabled", "code": "package com.yalantis.ucrop.view;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.view.GestureDetector;\nimport android.view.MotionEvent;\nimport android.view.ScaleGestureDetector;\n\nimport com.yalantis.ucrop.util.RotationGestureDetector;\n\n/**\n * Created by Oleksii Shliama (https://github.com/shliama).\n */\npublic class GestureCropImageView extends CropImageView {\n\n    private static final int DOUBLE_TAP_ZOOM_DURATION = 200;\n\n    private ScaleGestureDetector mScaleDetector;\n    private RotationGestureDetector mRotateDetector;\n    private GestureDetector mGestureDetector;\n\n    private float mMidPntX, mMidPntY;\n\n    private boolean mIsRotateEnabled = true, mIsScaleEnabled = true;\n    private int mDoubleTapScaleSteps = 5;\n\n    public GestureCropImageView(Context context) {\n        super(context);\n    }\n\n    public GestureCropImageView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public GestureCropImageView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n    }\n\n    public void METHOD_NAME(boolean scaleEnabled) {\n        mIsScaleEnabled = scaleEnabled;\n    }\n\n    public boolean isScaleEnabled() {\n        return mIsScaleEnabled;\n    }\n\n    public void setRotateEnabled(boolean rotateEnabled) {\n        mIsRotateEnabled = rotateEnabled;\n    }\n\n    public boolean isRotateEnabled() {\n        return mIsRotateEnabled;\n    }\n\n    public void setDoubleTapScaleSteps(int doubleTapScaleSteps) {\n        mDoubleTapScaleSteps = doubleTapScaleSteps;\n    }\n\n    public int getDoubleTapScaleSteps() {\n        return mDoubleTapScaleSteps;\n    }\n\n    /**\n     * If it's ACTION_DOWN event - user touches the screen and all current animation must be canceled.\n     * If it's ACTION_UP event - user removed all fingers from the screen and current image position must be corrected.\n     * If there are more than 2 fingers - update focal point coordinates.\n     * Pass the event to the gesture detectors if those are enabled.\n     */\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {\n            cancelAllAnimations();\n        }\n\n        if (event.getPointerCount() > 1) {\n            mMidPntX = (event.getX(0) + event.getX(1)) / 2;\n            mMidPntY = (event.getY(0) + event.getY(1)) / 2;\n        }\n\n        mGestureDetector.onTouchEvent(event);\n\n        if (mIsScaleEnabled) {\n            mScaleDetector.onTouchEvent(event);\n        }\n\n        if (mIsRotateEnabled) {\n            mRotateDetector.onTouchEvent(event);\n        }\n\n        if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {\n            setImageToWrapCropBounds();\n        }\n        return true;\n    }\n\n    @Override\n    protected void init() {\n        super.init();\n        setupGestureListeners();\n    }\n\n    /**\n     * This method calculates target scale value for double tap gesture.\n     * User is able to zoom the image from min scale value\n     * to the max scale value with {@link #mDoubleTapScaleSteps} double taps.\n     */\n    protected float getDoubleTapTargetScale() {\n        return getCurrentScale() * (float) Math.pow(getMaxScale() / getMinScale(), 1.0f / mDoubleTapScaleSteps);\n    }\n\n    private void setupGestureListeners() {\n        mGestureDetector = new GestureDetector(getContext(), new GestureListener(), null, true);\n        mScaleDetector = new ScaleGestureDetector(getContext(), new ScaleListener());\n        mRotateDetector = new RotationGestureDetector(new RotateListener());\n    }\n\n    private class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\n\n        @Override\n        public boolean onScale(ScaleGestureDetector detector) {\n            postScale(detector.getScaleFactor(), mMidPntX, mMidPntY);\n            return true;\n        }\n    }\n\n    private class GestureListener extends GestureDetector.SimpleOnGestureListener {\n\n        @Override\n        public boolean onDoubleTap(MotionEvent e) {\n            zoomImageToPosition(getDoubleTapTargetScale(), e.getX(), e.getY(), DOUBLE_TAP_ZOOM_DURATION);\n            return super.onDoubleTap(e);\n        }\n\n        @Override\n        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n            postTranslate(-distanceX, -distanceY);\n            return true;\n        }\n\n    }\n\n    private class RotateListener extends RotationGestureDetector.SimpleOnRotationGestureListener {\n\n        @Override\n        public boolean onRotation(RotationGestureDetector rotationDetector) {\n            postRotate(rotationDetector.getAngle(), mMidPntX, mMidPntY);\n            return true;\n        }\n\n    }\n\n}\n"}
{"label": "bind|data", "code": "/*\n * Copyright (C) 2014 pengjianbo(pengjianbosoft@gmail.com), Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\npackage com.yalantis.ucrop;\n\nimport android.content.Context;\nimport android.support.v7.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\n\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\nimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;\nimport com.bumptech.glide.request.RequestOptions;\nimport com.yalantis.ucrop.model.CutInfo;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.adapter\n * email\uff1a893855882@qq.com\n * data\uff1a16/12/31\n */\n\npublic class PicturePhotoGalleryAdapter extends RecyclerView.Adapter<PicturePhotoGalleryAdapter.ViewHolder> {\n\n    private Context context;\n    private List<CutInfo> list = new ArrayList<>();\n    private LayoutInflater mInflater;\n\n    public PicturePhotoGalleryAdapter(Context context, List<CutInfo> list) {\n        mInflater = LayoutInflater.from(context);\n        this.context = context;\n        this.list = list;\n    }\n\n    public void METHOD_NAME(List<CutInfo> list) {\n        this.list = list;\n        notifyDataSetChanged();\n    }\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int position) {\n        View view = mInflater.inflate(R.layout.ucrop_picture_gf_adapter_edit_list,\n                parent, false);\n        return new ViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        String path = \"\";\n        CutInfo photoInfo = list.get(position);\n        if (photoInfo != null) {\n            path = photoInfo.getPath();\n        }\n        if (photoInfo.isCut()) {\n            holder.iv_dot.setVisibility(View.VISIBLE);\n            holder.iv_dot.setImageResource(R.drawable.ucrop_oval_true);\n        } else {\n            holder.iv_dot.setVisibility(View.GONE);\n        }\n\n        RequestOptions options = new RequestOptions()\n                .placeholder(R.color.ucrop_color_grey)\n                .centerCrop()\n                .diskCacheStrategy(DiskCacheStrategy.ALL);\n\n        Glide.with(context)\n                .load(path)\n                .transition(DrawableTransitionOptions.withCrossFade())\n                .apply(options)\n                .into(holder.mIvPhoto);\n    }\n\n\n    @Override\n    public int getItemCount() {\n        return list.size();\n    }\n\n\n    public static class ViewHolder extends RecyclerView.ViewHolder {\n        ImageView mIvPhoto;\n        ImageView iv_dot;\n\n        public ViewHolder(View view) {\n            super(view);\n            mIvPhoto = (ImageView) view.findViewById(R.id.iv_photo);\n            iv_dot = (ImageView) view.findViewById(R.id.iv_dot);\n        }\n    }\n\n}\n"}
{"label": "get|exif|orientation", "code": "package com.yalantis.ucrop.model;\n\n/**\n * Created by Oleksii Shliama [https://github.com/shliama] on 6/21/16.\n */\npublic class ExifInfo {\n\n    private int mExifOrientation;\n    private int mExifDegrees;\n    private int mExifTranslation;\n\n    public ExifInfo(int exifOrientation, int exifDegrees, int exifTranslation) {\n        mExifOrientation = exifOrientation;\n        mExifDegrees = exifDegrees;\n        mExifTranslation = exifTranslation;\n    }\n\n    public int METHOD_NAME() {\n        return mExifOrientation;\n    }\n\n    public int getExifDegrees() {\n        return mExifDegrees;\n    }\n\n    public int getExifTranslation() {\n        return mExifTranslation;\n    }\n\n    public void setExifOrientation(int exifOrientation) {\n        mExifOrientation = exifOrientation;\n    }\n\n    public void setExifDegrees(int exifDegrees) {\n        mExifDegrees = exifDegrees;\n    }\n\n    public void setExifTranslation(int exifTranslation) {\n        mExifTranslation = exifTranslation;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ExifInfo exifInfo = (ExifInfo) o;\n\n        if (mExifOrientation != exifInfo.mExifOrientation) return false;\n        if (mExifDegrees != exifInfo.mExifDegrees) return false;\n        return mExifTranslation == exifInfo.mExifTranslation;\n\n    }\n\n    @Override\n    public int hashCode() {\n        int result = mExifOrientation;\n        result = 31 * result + mExifDegrees;\n        result = 31 * result + mExifTranslation;\n        return result;\n    }\n\n}\n"}
{"label": "get|aspect|ratio|title", "code": "package com.yalantis.ucrop.model;\n\nimport android.os.Parcel;\nimport android.os.Parcelable;\nimport android.support.annotation.Nullable;\n\n/**\n * Created by Oleksii Shliama [https://github.com/shliama] on 6/24/16.\n */\npublic class AspectRatio implements Parcelable {\n\n    @Nullable\n    private final String mAspectRatioTitle;\n    private final float mAspectRatioX;\n    private final float mAspectRatioY;\n\n    public AspectRatio(@Nullable String aspectRatioTitle, float aspectRatioX, float aspectRatioY) {\n        mAspectRatioTitle = aspectRatioTitle;\n        mAspectRatioX = aspectRatioX;\n        mAspectRatioY = aspectRatioY;\n    }\n\n    protected AspectRatio(Parcel in) {\n        mAspectRatioTitle = in.readString();\n        mAspectRatioX = in.readFloat();\n        mAspectRatioY = in.readFloat();\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeString(mAspectRatioTitle);\n        dest.writeFloat(mAspectRatioX);\n        dest.writeFloat(mAspectRatioY);\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    public static final Creator<AspectRatio> CREATOR = new Creator<AspectRatio>() {\n        @Override\n        public AspectRatio createFromParcel(Parcel in) {\n            return new AspectRatio(in);\n        }\n\n        @Override\n        public AspectRatio[] newArray(int size) {\n            return new AspectRatio[size];\n        }\n    };\n\n    @Nullable\n    public String METHOD_NAME() {\n        return mAspectRatioTitle;\n    }\n\n    public float getAspectRatioX() {\n        return mAspectRatioX;\n    }\n\n    public float getAspectRatioY() {\n        return mAspectRatioY;\n    }\n\n}\n"}
{"label": "get|max|result|image|size|x", "code": "package com.yalantis.ucrop.model;\n\nimport android.graphics.Bitmap;\n\n/**\n * Created by Oleksii Shliama [https://github.com/shliama] on 6/21/16.\n */\npublic class CropParameters {\n\n    private int mMaxResultImageSizeX, mMaxResultImageSizeY;\n\n    private Bitmap.CompressFormat mCompressFormat;\n    private int mCompressQuality;\n    private String mImageInputPath, mImageOutputPath;\n    private ExifInfo mExifInfo;\n\n\n    public CropParameters(int maxResultImageSizeX, int maxResultImageSizeY,\n                          Bitmap.CompressFormat compressFormat, int compressQuality,\n                          String imageInputPath, String imageOutputPath, ExifInfo exifInfo) {\n        mMaxResultImageSizeX = maxResultImageSizeX;\n        mMaxResultImageSizeY = maxResultImageSizeY;\n        mCompressFormat = compressFormat;\n        mCompressQuality = compressQuality;\n        mImageInputPath = imageInputPath;\n        mImageOutputPath = imageOutputPath;\n        mExifInfo = exifInfo;\n    }\n\n    public int METHOD_NAME() {\n        return mMaxResultImageSizeX;\n    }\n\n    public int getMaxResultImageSizeY() {\n        return mMaxResultImageSizeY;\n    }\n\n    public Bitmap.CompressFormat getCompressFormat() {\n        return mCompressFormat;\n    }\n\n    public int getCompressQuality() {\n        return mCompressQuality;\n    }\n\n    public String getImageInputPath() {\n        return mImageInputPath;\n    }\n\n    public String getImageOutputPath() {\n        return mImageOutputPath;\n    }\n\n    public ExifInfo getExifInfo() {\n        return mExifInfo;\n    }\n\n}\n"}
{"label": "get|crop|rect", "code": "package com.yalantis.ucrop.model;\n\nimport android.graphics.RectF;\n\n/**\n * Created by Oleksii Shliama [https://github.com/shliama] on 6/21/16.\n */\npublic class ImageState {\n\n    private RectF mCropRect;\n    private RectF mCurrentImageRect;\n\n    private float mCurrentScale, mCurrentAngle;\n\n    public ImageState(RectF cropRect, RectF currentImageRect, float currentScale, float currentAngle) {\n        mCropRect = cropRect;\n        mCurrentImageRect = currentImageRect;\n        mCurrentScale = currentScale;\n        mCurrentAngle = currentAngle;\n    }\n\n    public RectF METHOD_NAME() {\n        return mCropRect;\n    }\n\n    public RectF getCurrentImageRect() {\n        return mCurrentImageRect;\n    }\n\n    public float getCurrentScale() {\n        return mCurrentScale;\n    }\n\n    public float getCurrentAngle() {\n        return mCurrentAngle;\n    }\n}\n"}
{"label": "get|path", "code": "package com.yalantis.ucrop.model;\n\nimport java.io.Serializable;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.yalantis.ucrop.model\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/30\n */\n\npublic class CutInfo implements Serializable {\n    private String path;\n    private String cutPath;\n    private int offsetX;\n    private int offsetY;\n    private int imageWidth;\n    private int imageHeight;\n    private float resultAspectRatio;\n    private boolean isCut;\n\n    public CutInfo() {\n    }\n\n    public CutInfo(String path, boolean isCut) {\n        this.path = path;\n        this.isCut = isCut;\n    }\n\n    public String METHOD_NAME() {\n        return path;\n    }\n\n    public void setPath(String path) {\n        this.path = path;\n    }\n\n    public String getCutPath() {\n        return cutPath;\n    }\n\n    public void setCutPath(String cutPath) {\n        this.cutPath = cutPath;\n    }\n\n    public int getOffsetX() {\n        return offsetX;\n    }\n\n    public void setOffsetX(int offsetX) {\n        this.offsetX = offsetX;\n    }\n\n    public int getOffsetY() {\n        return offsetY;\n    }\n\n    public void setOffsetY(int offsetY) {\n        this.offsetY = offsetY;\n    }\n\n    public int getImageWidth() {\n        return imageWidth;\n    }\n\n    public void setImageWidth(int imageWidth) {\n        this.imageWidth = imageWidth;\n    }\n\n    public int getImageHeight() {\n        return imageHeight;\n    }\n\n    public void setImageHeight(int imageHeight) {\n        this.imageHeight = imageHeight;\n    }\n\n    public float getResultAspectRatio() {\n        return resultAspectRatio;\n    }\n\n    public void setResultAspectRatio(float resultAspectRatio) {\n        this.resultAspectRatio = resultAspectRatio;\n    }\n\n    public boolean isCut() {\n        return isCut;\n    }\n\n    public void setCut(boolean cut) {\n        isCut = cut;\n    }\n}\n"}
{"label": "create", "code": "package com.luck.picture.lib;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.Fragment;\n\nimport com.luck.picture.lib.config.PictureConfig;\nimport com.luck.picture.lib.entity.LocalMedia;\nimport com.luck.picture.lib.tools.DoubleUtils;\n\nimport java.io.Serializable;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib\n * describe\uff1afor PictureSelector's media selection.\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/24\n */\n\npublic final class PictureSelector {\n\n    private final WeakReference<Activity> mActivity;\n    private final WeakReference<Fragment> mFragment;\n\n    private PictureSelector(Activity activity) {\n        this(activity, null);\n    }\n\n    private PictureSelector(Fragment fragment) {\n        this(fragment.getActivity(), fragment);\n    }\n\n    private PictureSelector(Activity activity, Fragment fragment) {\n        mActivity = new WeakReference<>(activity);\n        mFragment = new WeakReference<>(fragment);\n    }\n\n    /**\n     * Start PictureSelector for Activity.\n     *\n     * @param activity\n     * @return PictureSelector instance.\n     */\n    public static PictureSelector METHOD_NAME(Activity activity) {\n        return new PictureSelector(activity);\n    }\n\n    /**\n     * Start PictureSelector for Fragment.\n     *\n     * @param fragment\n     * @return PictureSelector instance.\n     */\n    public static PictureSelector METHOD_NAME(Fragment fragment) {\n        return new PictureSelector(fragment);\n    }\n\n    /**\n     * @param mimeType Select the type of picture you want\uff0call or Picture or Video .\n     * @return LocalMedia PictureSelectionModel\n     */\n    public PictureSelectionModel openGallery(int mimeType) {\n        return new PictureSelectionModel(this, mimeType);\n    }\n\n    /**\n     * @param mimeType Select the type of picture you want\uff0cPicture or Video.\n     * @return LocalMedia PictureSelectionModel\n     */\n    public PictureSelectionModel openCamera(int mimeType) {\n        return new PictureSelectionModel(this, mimeType, true);\n    }\n\n    /**\n     * @param data\n     * @return Selector Multiple LocalMedia\n     */\n    public static List<LocalMedia> obtainMultipleResult(Intent data) {\n        List<LocalMedia> result = new ArrayList<>();\n        if (data != null) {\n            result = (List<LocalMedia>) data.getSerializableExtra(PictureConfig.EXTRA_RESULT_SELECTION);\n            if (result == null) {\n                result = new ArrayList<>();\n            }\n            return result;\n        }\n        return result;\n    }\n\n    /**\n     * @param data\n     * @return Put image Intent Data\n     */\n    public static Intent putIntentResult(List<LocalMedia> data) {\n        return new Intent().putExtra(PictureConfig.EXTRA_RESULT_SELECTION, (Serializable) data);\n    }\n\n    /**\n     * @param bundle\n     * @return get Selector  LocalMedia\n     */\n    public static List<LocalMedia> obtainSelectorList(Bundle bundle) {\n        List<LocalMedia> selectionMedias;\n        if (bundle != null) {\n            selectionMedias = (List<LocalMedia>) bundle\n                    .getSerializable(PictureConfig.EXTRA_SELECT_LIST);\n            return selectionMedias;\n        }\n        selectionMedias = new ArrayList<>();\n        return selectionMedias;\n    }\n\n    /**\n     * @param selectedImages\n     * @return put Selector  LocalMedia\n     */\n    public static void saveSelectorList(Bundle outState, List<LocalMedia> selectedImages) {\n        outState.putSerializable(PictureConfig.EXTRA_SELECT_LIST, (Serializable) selectedImages);\n    }\n\n    /**\n     * set preview image\n     *\n     * @param position\n     * @param medias\n     */\n    public void externalPicturePreview(int position, List<LocalMedia> medias) {\n        if (!DoubleUtils.isFastDoubleClick()) {\n            Intent intent = new Intent(getActivity(), PictureExternalPreviewActivity.class);\n            intent.putExtra(PictureConfig.EXTRA_PREVIEW_SELECT_LIST, (Serializable) medias);\n            intent.putExtra(PictureConfig.EXTRA_POSITION, position);\n            getActivity().startActivity(intent);\n            getActivity().overridePendingTransition(R.anim.a5, 0);\n        }\n    }\n\n    /**\n     * set preview image\n     *\n     * @param position\n     * @param medias\n     * @param directory_path\n     */\n    public void externalPicturePreview(int position, String directory_path, List<LocalMedia> medias) {\n        if (!DoubleUtils.isFastDoubleClick()) {\n            Intent intent = new Intent(getActivity(), PictureExternalPreviewActivity.class);\n            intent.putExtra(PictureConfig.EXTRA_PREVIEW_SELECT_LIST, (Serializable) medias);\n            intent.putExtra(PictureConfig.EXTRA_POSITION, position);\n            intent.putExtra(PictureConfig.DIRECTORY_PATH, directory_path);\n            getActivity().startActivity(intent);\n            getActivity().overridePendingTransition(R.anim.a5, 0);\n        }\n    }\n\n    /**\n     * set preview video\n     *\n     * @param path\n     */\n    public void externalPictureVideo(String path) {\n        if (!DoubleUtils.isFastDoubleClick()) {\n            Intent intent = new Intent(getActivity(), PictureVideoPlayActivity.class);\n            intent.putExtra(\"video_path\", path);\n            getActivity().startActivity(intent);\n        }\n    }\n\n    /**\n     * set preview audio\n     *\n     * @param path\n     */\n    public void externalPictureAudio(String path) {\n        if (!DoubleUtils.isFastDoubleClick()) {\n            Intent intent = new Intent(getActivity(), PicturePlayAudioActivity.class);\n            intent.putExtra(\"audio_path\", path);\n            getActivity().startActivity(intent);\n            getActivity().overridePendingTransition(R.anim.a5, 0);\n        }\n    }\n\n    /**\n     * @return Activity.\n     */\n    @Nullable\n    Activity getActivity() {\n        return mActivity.get();\n    }\n\n    /**\n     * @return Fragment.\n     */\n    @Nullable\n    Fragment getFragment() {\n        return mFragment != null ? mFragment.get() : null;\n    }\n\n}\n"}
{"label": "set|color", "code": "package com.luck.picture.lib.tools;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.os.Build;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.WindowManager;\nimport android.widget.LinearLayout;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.tool\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/25\n */\n\npublic class ToolbarUtil {\n\n    private static final int DEFAULT_STATUS_BAR_ALPHA = 15;\n\n    /**\n     * \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272\n     */\n    public static void METHOD_NAME(Activity activity, int color, int statusBarAlpha) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n            activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n            activity.getWindow().setStatusBarColor(calculateStatusColor(color, statusBarAlpha));\n        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n            // \u751f\u6210\u4e00\u4e2a\u72b6\u6001\u680f\u5927\u5c0f\u7684\u77e9\u5f62\n            View statusView = createStatusBarView(activity, color, statusBarAlpha);\n            // \u6dfb\u52a0 statusView \u5230\u5e03\u5c40\u4e2d\n            ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();\n            decorView.addView(statusView);\n            setRootView(activity);\n        }\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6839\u5e03\u5c40\u53c2\u6570\n     */\n    private static void setRootView(Activity activity) {\n        ViewGroup rootView = (ViewGroup) ((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(0);\n        if (rootView != null) {\n            rootView.setFitsSystemWindows(true);\n            rootView.setClipToPadding(true);\n        }\n    }\n\n    /**\n     * \u751f\u6210\u4e00\u4e2a\u548c\u72b6\u6001\u680f\u5927\u5c0f\u76f8\u540c\u7684\u534a\u900f\u660e\u77e9\u5f62\u6761\n     */\n    private static View createStatusBarView(Activity activity, int color, int alpha) {\n        // \u7ed8\u5236\u4e00\u4e2a\u548c\u72b6\u6001\u680f\u4e00\u6837\u9ad8\u7684\u77e9\u5f62\n        View statusBarView = new View(activity);\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n                getStatusBarHeight(activity));\n        statusBarView.setLayoutParams(params);\n        statusBarView.setBackgroundColor(calculateStatusColor(color, alpha));\n        return statusBarView;\n    }\n\n    /**\n     * \u83b7\u53d6\u72b6\u6001\u680f\u9ad8\u5ea6\n     */\n    public static int getStatusBarHeight(Context context) {\n        // \u83b7\u5f97\u72b6\u6001\u680f\u9ad8\u5ea6\n        int resourceId = context.getResources().getIdentifier(\"status_bar_height\", \"dimen\", \"android\");\n        return context.getResources().getDimensionPixelSize(resourceId);\n    }\n\n    /**\n     * \u8ba1\u7b97\u72b6\u6001\u680f\u989c\u8272\n     */\n    private static int calculateStatusColor(int color, int alpha) {\n        float a = 1 - alpha / 255f;\n        int red = color >> 16 & 0xff;\n        int green = color >> 8 & 0xff;\n        int blue = color & 0xff;\n        red = (int) (red * a + 0.5);\n        green = (int) (green * a + 0.5);\n        blue = (int) (blue * a + 0.5);\n        return 0xff << 24 | red << 16 | green << 8 | blue;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272\n     */\n    public static void METHOD_NAME(Activity activity, int color) {\n        METHOD_NAME(activity, color, DEFAULT_STATUS_BAR_ALPHA);\n    }\n\n    /**\n     * \u76f4\u63a5\u8bbe\u7f6e\u72b6\u6001\u680f\u7eaf\u8272 \u4e0d\u52a0\u534a\u900f\u660e\u6548\u679c\uff08\u5168\u900f\u660e\uff09\n     */\n    public static void setColorNoTranslucent(Activity activity, int color) {\n        METHOD_NAME(activity, color, 0);\n    }\n}\n"}
{"label": "time|parse", "code": "package com.luck.picture.lib.tools;\n\nimport java.text.SimpleDateFormat;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.tool\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/25\n */\n\npublic class DateUtils {\n    private static SimpleDateFormat msFormat = new SimpleDateFormat(\"mm:ss\");\n\n    /**\n     * MS turn every minute\n     *\n     * @param duration Millisecond\n     * @return Every minute\n     */\n    public static String METHOD_NAME(long duration) {\n        String time = \"\";\n        if (duration > 1000) {\n            time = timeParseMinute(duration);\n        } else {\n            long minute = duration / 60000;\n            long seconds = duration % 60000;\n            long second = Math.round((float) seconds / 1000);\n            if (minute < 10) {\n                time += \"0\";\n            }\n            time += minute + \":\";\n            if (second < 10) {\n                time += \"0\";\n            }\n            time += second;\n        }\n        return time;\n    }\n\n    /**\n     * MS turn every minute\n     *\n     * @param duration Millisecond\n     * @return Every minute\n     */\n    public static String timeParseMinute(long duration) {\n        try {\n            return msFormat.format(duration);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"0:00\";\n        }\n    }\n\n    /**\n     * \u5224\u65ad\u4e24\u4e2a\u65f6\u95f4\u6233\u76f8\u5dee\u591a\u5c11\u79d2\n     *\n     * @param d\n     * @return\n     */\n    public static int dateDiffer(long d) {\n        try {\n            long l1 = Long.parseLong(String.valueOf(System.currentTimeMillis()).substring(0, 10));\n            long interval = l1 - d;\n            return (int) Math.abs(interval);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n\n    /**\n     * \u8ba1\u7b97\u4e24\u4e2a\u65f6\u95f4\u95f4\u9694\n     *\n     * @param sTime\n     * @param eTime\n     * @return\n     */\n    public static String cdTime(long sTime, long eTime) {\n        long diff = eTime - sTime;\n        return diff > 1000 ? diff / 1000 + \"\u79d2\" : diff + \"\u6beb\u79d2\";\n    }\n}\n"}
{"label": "is|camera", "code": "package com.luck.picture.lib.tools;\n\nimport android.graphics.drawable.Drawable;\nimport android.text.Spannable;\nimport android.text.SpannableString;\nimport android.text.TextUtils;\nimport android.text.style.RelativeSizeSpan;\nimport android.widget.TextView;\n\nimport com.luck.picture.lib.R;\nimport com.luck.picture.lib.config.PictureMimeType;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.tool\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/25\n */\n\npublic class StringUtils {\n    public static boolean METHOD_NAME(String title) {\n        if (!TextUtils.isEmpty(title) && title.startsWith(\"\u76f8\u673a\u80f6\u5377\")\n                || title.startsWith(\"CameraRoll\")\n                || title.startsWith(\"\u6240\u6709\u97f3\u9891\")\n                || title.startsWith(\"All audio\")) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static void tempTextFont(TextView tv, int mimeType) {\n        String text = tv.getText().toString().trim();\n        String str = mimeType == PictureMimeType.ofAudio() ?\n                tv.getContext().getString(R.string.picture_empty_audio_title)\n                : tv.getContext().getString(R.string.picture_empty_title);\n        String sumText = str + text;\n        Spannable placeSpan = new SpannableString(sumText);\n        placeSpan.setSpan(new RelativeSizeSpan(0.8f), str.length(), sumText.length(),\n                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n        tv.setText(placeSpan);\n    }\n\n    public static void modifyTextViewDrawable(TextView v, Drawable drawable, int index) {\n        drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());\n        //index 0:\u5de6 1\uff1a\u4e0a 2\uff1a\u53f3 3\uff1a\u4e0b\n        if (index == 0) {\n            v.setCompoundDrawables(drawable, null, null, null);\n        } else if (index == 1) {\n            v.setCompoundDrawables(null, drawable, null, null);\n        } else if (index == 2) {\n            v.setCompoundDrawables(null, null, drawable, null);\n        } else {\n            v.setCompoundDrawables(null, null, null, drawable);\n        }\n    }\n\n}\n"}
{"label": "is|light|status|bar|available", "code": "package com.luck.picture.lib.tools;\n\nimport android.os.Build;\nimport android.text.TextUtils;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.tool\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/25\n */\npublic class RomUtils {\n\n    class AvailableRomType {\n        public static final int MIUI = 1;\n        public static final int FLYME = 2;\n        public static final int ANDROID_NATIVE = 3;\n        public static final int NA = 4;\n    }\n\n    public static boolean METHOD_NAME () {\n        if (isMIUIV6OrAbove() || isFlymeV4OrAbove() || isAndroidMOrAbove()) {\n            return true;\n        }\n        return false;\n    }\n\n    public static int getLightStatausBarAvailableRomType() {\n        if (isMIUIV6OrAbove()) {\n            return AvailableRomType.MIUI;\n        }\n\n        if (isFlymeV4OrAbove()) {\n            return AvailableRomType.FLYME;\n        }\n\n        if (isAndroidMOrAbove()) {\n            return AvailableRomType.ANDROID_NATIVE;\n        }\n\n        return AvailableRomType.NA;\n    }\n\n    //Flyme V4\u7684displayId\u683c\u5f0f\u4e3a [Flyme OS 4.x.x.xA]\n    //Flyme V5\u7684displayId\u683c\u5f0f\u4e3a [Flyme 5.x.x.x beta]\n    private static boolean isFlymeV4OrAbove() {\n        String displayId = Build.DISPLAY;\n        if (!TextUtils.isEmpty(displayId) && displayId.contains(\"Flyme\")) {\n            String[] displayIdArray = displayId.split(\" \");\n            for (String temp : displayIdArray) {\n                //\u7248\u672c\u53f74\u4ee5\u4e0a\uff0c\u5f62\u59824.x.\n                if (temp.matches(\"^[4-9]\\\\.(\\\\d+\\\\.)+\\\\S*\")) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    //MIUI V6\u5bf9\u5e94\u7684versionCode\u662f4\n    //MIUI V7\u5bf9\u5e94\u7684versionCode\u662f5\n    private static boolean isMIUIV6OrAbove() {\n        String miuiVersionCodeStr = getSystemProperty(\"ro.miui.ui.version.code\");\n        if (!TextUtils.isEmpty(miuiVersionCodeStr)) {\n            try {\n                int miuiVersionCode = Integer.parseInt(miuiVersionCodeStr);\n                if (miuiVersionCode >= 4) {\n                    return true;\n                }\n            } catch (Exception e) {}\n        }\n        return false;\n    }\n\n    //Android Api 23\u4ee5\u4e0a\n    private static boolean isAndroidMOrAbove() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            return true;\n        }\n        return false;\n    }\n\n    private static String getSystemProperty(String propName) {\n        String line;\n        BufferedReader input = null;\n        try {\n            Process p = Runtime.getRuntime().exec(\"getprop \" + propName);\n            input = new BufferedReader(new InputStreamReader(p.getInputStream()), 1024);\n            line = input.readLine();\n            input.close();\n        } catch (IOException ex) {\n            return null;\n        } finally {\n            if (input != null) {\n                try {\n                    input.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n        return line;\n    }\n}\n"}
{"label": "debug", "code": "package com.luck.picture.lib.tools;\n\nimport android.util.Log;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.tool\n * email\uff1a893855882@qq.com\n * data\uff1a2017/3/14\n */\n\npublic class DebugUtil {\n    public static final String TAG = \"com.luck.picture.lib\";\n\n    public static final boolean METHOD_NAME = false;\n\n    public static void METHOD_NAME(String tag, String msg) {\n        if (METHOD_NAME) {\n            Log.d(tag, msg);\n        }\n    }\n\n    public static void METHOD_NAME(String msg) {\n        if (METHOD_NAME) {\n            Log.d(TAG, msg);\n        }\n    }\n\n    public static void v(String msg) {\n        if (METHOD_NAME) {\n            Log.v(TAG, msg);\n        }\n    }\n\n    public static void v(String tag, String msg) {\n        if (METHOD_NAME) {\n            Log.v(tag, msg);\n        }\n    }\n\n    public static void log(String msg) {\n        if (METHOD_NAME) {\n            Log.d(TAG, msg);\n        }\n    }\n\n    public static void log(String tag, String msg) {\n        if (METHOD_NAME) {\n            Log.d(tag, msg);\n        }\n    }\n\n    public static void i(String tag, String msg) {\n        if (METHOD_NAME) {\n            Log.i(tag, msg);\n        }\n    }\n\n    public static void i(String msg) {\n        if (METHOD_NAME) {\n            Log.i(TAG, msg);\n        }\n    }\n\n\n    public static void error(String tag, String error) {\n\n        if (METHOD_NAME) {\n\n            Log.e(tag, error);\n        }\n    }\n\n    public static void error(String error) {\n\n        if (METHOD_NAME) {\n\n            Log.e(TAG, error);\n        }\n    }\n\n}\n"}
{"label": "play|voice", "code": "package com.luck.picture.lib.tools;\n\nimport android.content.Context;\nimport android.media.AudioManager;\nimport android.media.SoundPool;\nimport android.os.Handler;\n\nimport com.luck.picture.lib.R;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.tool\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/25\n */\n\npublic class VoiceUtils {\n    private static SoundPool soundPool;\n    private static int soundID;//\u521b\u5efa\u67d0\u4e2a\u58f0\u97f3\u5bf9\u5e94\u7684\u97f3\u9891ID\n    private boolean isPlay;\n\n    /**\n     * start SoundPool\n     */\n    public static void METHOD_NAME(Context mContext, final boolean enableVoice) {\n\n        if (soundPool == null) {\n            soundPool = new SoundPool(1, AudioManager.STREAM_ALARM, 0);\n            soundID = soundPool.load(mContext, R.raw.music, 1);\n        }\n        new Handler().postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                play(enableVoice, soundPool);\n            }\n        }, 20);\n    }\n\n    public static void play(boolean enableVoice, SoundPool soundPool) {\n        if (enableVoice) {\n            soundPool.play(\n                    soundID,\n                    0.1f,\n                    0.5f,\n                    0,\n                    1,\n                    1\n            );\n        }\n    }\n\n    /**\n     * release SoundPool\n     */\n    public static void release() {\n        if (soundPool != null) {\n            soundPool.stop(soundID);\n        }\n        soundPool = null;\n    }\n}\n"}
{"label": "is|fast|double|click", "code": "package com.luck.picture.lib.tools;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.tool\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/25\n */\n\npublic class DoubleUtils {\n    /**\n     * Prevent continuous click, jump two pages\n     */\n    private static long lastClickTime;\n    private final static long TIME = 800;\n\n    public static boolean METHOD_NAME() {\n        long time = System.currentTimeMillis();\n        if (time - lastClickTime < TIME) {\n            return true;\n        }\n        lastClickTime = time;\n        return false;\n    }\n}\n"}
{"label": "get|type|value|color", "code": "package com.luck.picture.lib.tools;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.drawable.Drawable;\nimport android.util.TypedValue;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.tools\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/27\n */\n\npublic class AttrsUtils {\n\n    /**\n     * get attrs color\n     *\n     * @param mContext\n     * @param attr\n     * @return\n     */\n    public static int METHOD_NAME(Context mContext, int attr) {\n        TypedValue typedValue = new TypedValue();\n        int[] attribute = new int[]{attr};\n        TypedArray array = mContext.obtainStyledAttributes(typedValue.resourceId, attribute);\n        int color = array.getColor(0, -1);\n        array.recycle();\n        return color;\n    }\n\n    /**\n     * attrs status color or black\n     *\n     * @param mContext\n     * @param attr\n     * @return\n     */\n    public static boolean getTypeValueBoolean(Context mContext, int attr) {\n        TypedValue typedValue = new TypedValue();\n        int[] attribute = new int[]{attr};\n        TypedArray array = mContext.obtainStyledAttributes(typedValue.resourceId, attribute);\n        boolean statusFont = array.getBoolean(0, false);\n        array.recycle();\n        return statusFont;\n    }\n\n    /**\n     * attrs PopupWindow down or up icon\n     *\n     * @param mContext\n     * @param attr\n     * @return\n     */\n    public static Drawable getTypeValuePopWindowImg(Context mContext, int attr) {\n        TypedValue typedValue = new TypedValue();\n        int[] attribute = new int[]{attr};\n        TypedArray array = mContext.obtainStyledAttributes(typedValue.resourceId, attribute);\n        Drawable drawable = array.getDrawable(0);\n        array.recycle();\n        return drawable;\n    }\n}\n"}
{"label": "set|light|status|bar", "code": "package com.luck.picture.lib.tools;\n\nimport android.app.Activity;\nimport android.os.Build;\nimport android.text.TextUtils;\nimport android.view.View;\nimport android.view.Window;\nimport android.view.WindowManager;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.tool\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/25\n */\npublic class LightStatusBarUtils {\n\n    public static void METHOD_NAME(Activity activity, boolean dark) {\n        int availableRomType = RomUtils.getLightStatausBarAvailableRomType();\n        switch (availableRomType) {\n            case RomUtils.AvailableRomType.MIUI:\n                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {\n                    dark = false;\n                }\n                setMIUILightStatusBar(activity, dark);\n                break;\n\n            case RomUtils.AvailableRomType.FLYME:\n                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {\n                    dark = false;\n                }\n                setFlymeLightStatusBar(activity, dark);\n                break;\n\n            case RomUtils.AvailableRomType.ANDROID_NATIVE:\n                setAndroidNativeLightStatusBar(activity, dark);\n                break;\n\n            case RomUtils.AvailableRomType.NA:\n                // N/A do nothing\n                setAndroidNativeLightStatusBar(activity, dark);\n                break;\n        }\n    }\n\n    private static boolean setMIUILightStatusBar(Activity activity, boolean darkmode) {\n        Class<? extends Window> clazz = activity.getWindow().getClass();\n        try {\n            int darkModeFlag = 0;\n            Class<?> layoutParams = Class.forName(\"android.view.MiuiWindowManager$LayoutParams\");\n            Field field = layoutParams.getField(\"EXTRA_FLAG_STATUS_BAR_DARK_MODE\");\n            darkModeFlag = field.getInt(layoutParams);\n            Method extraFlagField = clazz.getMethod(\"setExtraFlags\", int.class, int.class);\n            extraFlagField.invoke(activity.getWindow(), darkmode ? darkModeFlag : 0, darkModeFlag);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    private static boolean setFlymeLightStatusBar(Activity activity, boolean dark) {\n        boolean result = false;\n        if (activity != null) {\n            try {\n                WindowManager.LayoutParams lp = activity.getWindow().getAttributes();\n                Field darkFlag = WindowManager.LayoutParams.class\n                        .getDeclaredField(\"MEIZU_FLAG_DARK_STATUS_BAR_ICON\");\n                Field meizuFlags = WindowManager.LayoutParams.class\n                        .getDeclaredField(\"meizuFlags\");\n                darkFlag.setAccessible(true);\n                meizuFlags.setAccessible(true);\n                int bit = darkFlag.getInt(null);\n                int value = meizuFlags.getInt(lp);\n                if (dark) {\n                    value |= bit;\n                } else {\n                    value &= ~bit;\n                }\n                meizuFlags.setInt(lp, value);\n                activity.getWindow().setAttributes(lp);\n                result = true;\n            } catch (Exception e) {\n            }\n        }\n        return result;\n    }\n\n    private static void setAndroidNativeLightStatusBar(Activity activity, boolean dark) {\n        View decor = activity.getWindow().getDecorView();\n        if (dark) {\n            String model = android.os.Build.MODEL; // \u624b\u673a\u578b\u53f7\n            if (!TextUtils.isEmpty(model) && model.startsWith(\"Le\")) {\n            } else {\n                decor.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);\n            }\n        } else {\n            // We want to change tint color to white again.\n            // You can also record the flags in advance so that you can turn UI back completely if\n            // you have set other flags before, such as translucent or full screen.\n            decor.setSystemUiVisibility(0);\n        }\n    }\n\n}\n"}
{"label": "get|scale", "code": "/*\nCopyright 2014 David Morrissey\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage com.luck.picture.lib.widget.longimage;\n\nimport android.graphics.PointF;\n\nimport java.io.Serializable;\n\n/**\n * Wraps the scale, center and orientation of a displayed image for easy restoration on screen rotate.\n */\npublic class ImageViewState implements Serializable {\n\n    private float scale;\n\n    private float centerX;\n\n    private float centerY;\n\n    private int orientation;\n\n    public ImageViewState(float scale, PointF center, int orientation) {\n        this.scale = scale;\n        this.centerX = center.x;\n        this.centerY = center.y;\n        this.orientation = orientation;\n    }\n\n    public float METHOD_NAME() {\n        return scale;\n    }\n\n    public PointF getCenter() {\n        return new PointF(centerX, centerY);\n    }\n\n    public int getOrientation() {\n        return orientation;\n    }\n\n}\n"}
{"label": "resource", "code": "package com.luck.picture.lib.widget.longimage;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Rect;\nimport android.net.Uri;\n\nimport java.io.File;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\n\n/**\n * Helper class used to set the source and additional attributes from a variety of sources. Supports\n * use of a bitmap, asset, resource, external file or any other URI.\n *\n * When you are using a preview image, you must set the dimensions of the full size image on the\n * ImageSource object for the full size image using the {@link #dimensions(int, int)} method.\n */\npublic final class ImageSource {\n\n    static final String FILE_SCHEME = \"file:///\";\n    static final String ASSET_SCHEME = \"file:///android_asset/\";\n\n    private final Uri uri;\n    private final Bitmap bitmap;\n    private final Integer METHOD_NAME;\n    private boolean tile;\n    private int sWidth;\n    private int sHeight;\n    private Rect sRegion;\n    private boolean cached;\n\n    private ImageSource(Bitmap bitmap, boolean cached) {\n        this.bitmap = bitmap;\n        this.uri = null;\n        this.METHOD_NAME = null;\n        this.tile = false;\n        this.sWidth = bitmap.getWidth();\n        this.sHeight = bitmap.getHeight();\n        this.cached = cached;\n    }\n\n    private ImageSource(Uri uri) {\n        // #114 If file doesn't exist, attempt to url decode the URI and try again\n        String uriString = uri.toString();\n        if (uriString.startsWith(FILE_SCHEME)) {\n            File uriFile = new File(uriString.substring(FILE_SCHEME.length() - 1));\n            if (!uriFile.exists()) {\n                try {\n                    uri = Uri.parse(URLDecoder.decode(uriString, \"UTF-8\"));\n                } catch (UnsupportedEncodingException e) {\n                    // Fallback to encoded URI. This exception is not expected.\n                }\n            }\n        }\n        this.bitmap = null;\n        this.uri = uri;\n        this.METHOD_NAME = null;\n        this.tile = true;\n    }\n\n    private ImageSource(int METHOD_NAME) {\n        this.bitmap = null;\n        this.uri = null;\n        this.METHOD_NAME = METHOD_NAME;\n        this.tile = true;\n    }\n\n    /**\n     * Create an instance from a resource. The correct resource for the device screen resolution will be used.\n     * @param resId resource ID.\n     */\n    public static ImageSource METHOD_NAME(int resId) {\n        return new ImageSource(resId);\n    }\n\n    /**\n     * Create an instance from an asset name.\n     * @param assetName asset name.\n     */\n    public static ImageSource asset(String assetName) {\n        if (assetName == null) {\n            throw new NullPointerException(\"Asset name must not be null\");\n        }\n        return uri(ASSET_SCHEME + assetName);\n    }\n\n    /**\n     * Create an instance from a URI. If the URI does not start with a scheme, it's assumed to be the URI\n     * of a file.\n     * @param uri image URI.\n     */\n    public static ImageSource uri(String uri) {\n        if (uri == null) {\n            throw new NullPointerException(\"Uri must not be null\");\n        }\n        if (!uri.contains(\"://\")) {\n            if (uri.startsWith(\"/\")) {\n                uri = uri.substring(1);\n            }\n            uri = FILE_SCHEME + uri;\n        }\n        return new ImageSource(Uri.parse(uri));\n    }\n\n    /**\n     * Create an instance from a URI.\n     * @param uri image URI.\n     */\n    public static ImageSource uri(Uri uri) {\n        if (uri == null) {\n            throw new NullPointerException(\"Uri must not be null\");\n        }\n        return new ImageSource(uri);\n    }\n\n    /**\n     * Provide a loaded bitmap for display.\n     * @param bitmap bitmap to be displayed.\n     */\n    public static ImageSource bitmap(Bitmap bitmap) {\n        if (bitmap == null) {\n            throw new NullPointerException(\"Bitmap must not be null\");\n        }\n        return new ImageSource(bitmap, false);\n    }\n\n    /**\n     * Provide a loaded and cached bitmap for display. This bitmap will not be recycled when it is no\n     * longer needed. Use this method if you loaded the bitmap with an image loader such as Picasso\n     * or Volley.\n     * @param bitmap bitmap to be displayed.\n     */\n    public static ImageSource cachedBitmap(Bitmap bitmap) {\n        if (bitmap == null) {\n            throw new NullPointerException(\"Bitmap must not be null\");\n        }\n        return new ImageSource(bitmap, true);\n    }\n\n    /**\n     * Enable tiling of the image. This does not apply to preview images which are always loaded as a single bitmap.,\n     * and tiling cannot be disabled when displaying a region of the source image.\n     * @return this instance for chaining.\n     */\n    public ImageSource tilingEnabled() {\n        return tiling(true);\n    }\n\n    /**\n     * Disable tiling of the image. This does not apply to preview images which are always loaded as a single bitmap,\n     * and tiling cannot be disabled when displaying a region of the source image.\n     * @return this instance for chaining.\n     */\n    public ImageSource tilingDisabled() {\n        return tiling(false);\n    }\n\n    /**\n     * Enable or disable tiling of the image. This does not apply to preview images which are always loaded as a single bitmap,\n     * and tiling cannot be disabled when displaying a region of the source image.\n     * @return this instance for chaining.\n     */\n    public ImageSource tiling(boolean tile) {\n        this.tile = tile;\n        return this;\n    }\n\n    /**\n     * Use a region of the source image. Region must be set independently for the full size image and the preview if\n     * you are using one.\n     * @return this instance for chaining.\n     */\n    public ImageSource region(Rect sRegion) {\n        this.sRegion = sRegion;\n        setInvariants();\n        return this;\n    }\n\n    /**\n     * Declare the dimensions of the image. This is only required for a full size image, when you are specifying a URI\n     * and also a preview image. When displaying a bitmap object, or not using a preview, you do not need to declare\n     * the image dimensions. Note if the declared dimensions are found to be incorrect, the view will reset.\n     * @return this instance for chaining.\n     */\n    public ImageSource dimensions(int sWidth, int sHeight) {\n        if (bitmap == null) {\n            this.sWidth = sWidth;\n            this.sHeight = sHeight;\n        }\n        setInvariants();\n        return this;\n    }\n\n    private void setInvariants() {\n        if (this.sRegion != null) {\n            this.tile = true;\n            this.sWidth = this.sRegion.width();\n            this.sHeight = this.sRegion.height();\n        }\n    }\n\n    protected final Uri getUri() {\n        return uri;\n    }\n\n    protected final Bitmap getBitmap() {\n        return bitmap;\n    }\n\n    protected final Integer getResource() {\n        return METHOD_NAME;\n    }\n\n    protected final boolean getTile() {\n        return tile;\n    }\n\n    protected final int getSWidth() {\n        return sWidth;\n    }\n\n    protected final int getSHeight() {\n        return sHeight;\n    }\n\n    protected final Rect getSRegion() {\n        return sRegion;\n    }\n\n    protected final boolean isCached() {\n        return cached;\n    }\n}\n"}
{"label": "post|on|animation", "code": "/*******************************************************************************\n * Copyright 2011, 2012 Chris Banes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\npackage com.luck.picture.lib.photoview;\n\nimport android.annotation.TargetApi;\nimport android.os.Build.VERSION;\nimport android.os.Build.VERSION_CODES;\nimport android.view.View;\n\nclass Compat {\n\n    private static final int SIXTY_FPS_INTERVAL = 1000 / 60;\n\n    public static void METHOD_NAME(View view, Runnable runnable) {\n        if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {\n            postOnAnimationJellyBean(view, runnable);\n        } else {\n            view.postDelayed(runnable, SIXTY_FPS_INTERVAL);\n        }\n    }\n\n    @TargetApi(16)\n    private static void postOnAnimationJellyBean(View view, Runnable runnable) {\n        view.METHOD_NAME(runnable);\n    }\n}\n"}
{"label": "check|zoom|levels", "code": "package com.luck.picture.lib.photoview;\n\nimport android.view.MotionEvent;\nimport android.widget.ImageView;\n\nclass Util {\n\n    static void METHOD_NAME(float minZoom, float midZoom,\n                                float maxZoom) {\n        if (minZoom >= midZoom) {\n            throw new IllegalArgumentException(\n                    \"Minimum zoom has to be less than Medium zoom. Call setMinimumZoom() with a more appropriate value\");\n        } else if (midZoom >= maxZoom) {\n            throw new IllegalArgumentException(\n                    \"Medium zoom has to be less than Maximum zoom. Call setMaximumZoom() with a more appropriate value\");\n        }\n    }\n\n    static boolean hasDrawable(ImageView imageView) {\n        return imageView.getDrawable() != null;\n    }\n\n    static boolean isSupportedScaleType(final ImageView.ScaleType scaleType) {\n        if (scaleType == null) {\n            return false;\n        }\n        switch (scaleType) {\n            case MATRIX:\n                throw new IllegalStateException(\"Matrix scale type is not supported\");\n        }\n        return true;\n    }\n\n    static int getPointerIndex(int action) {\n        return (action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;\n    }\n}\n"}
{"label": "is|image", "code": "package com.luck.picture.lib.compress;\n\nimport android.text.TextUtils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Checker {\n    private static List<String> format = new ArrayList<>();\n    private static final String JPG = \"jpg\";\n    private static final String JPEG = \"jpeg\";\n    private static final String PNG = \"png\";\n    private static final String WEBP = \"webp\";\n    private static final String GIF = \"gif\";\n    private static final String BMP = \"bmp\";\n\n    static {\n        format.add(JPG);\n        format.add(JPEG);\n        format.add(PNG);\n        format.add(WEBP);\n        format.add(GIF);\n        format.add(BMP);\n    }\n\n    static boolean METHOD_NAME(String path) {\n        if (TextUtils.isEmpty(path)) {\n            return false;\n        }\n\n        String suffix = path.substring(path.lastIndexOf(\".\") + 1, path.length());\n        return format.contains(suffix.toLowerCase());\n    }\n\n    static boolean isJPG(String path) {\n        if (TextUtils.isEmpty(path)) {\n            return false;\n        }\n\n        String suffix = path.substring(path.lastIndexOf(\".\"), path.length()).toLowerCase();\n        return suffix.contains(JPG) || suffix.contains(JPEG);\n    }\n\n    static String checkSuffix(String path) {\n        if (TextUtils.isEmpty(path)) {\n            return \".jpg\";\n        }\n\n        return path.substring(path.lastIndexOf(\".\"), path.length());\n    }\n\n    static boolean isNeedCompress(int leastCompressSize, String path) {\n        if (leastCompressSize > 0) {\n            File source = new File(path);\n            if (!source.exists()) {\n                return false;\n            }\n\n            if (source.length() <= (leastCompressSize << 10)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"label": "compute|size", "code": "package com.luck.picture.lib.compress;\n\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Matrix;\nimport android.media.ExifInterface;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\n/**\n * Responsible for starting compress and managing active and cached resources.\n */\nclass Engine {\n  private ExifInterface srcExif;\n  private String srcImg;\n  private File tagImg;\n  private int srcWidth;\n  private int srcHeight;\n\n  Engine(String srcImg, File tagImg) throws IOException {\n    if (Checker.isJPG(srcImg)) {\n      this.srcExif = new ExifInterface(srcImg);\n    }\n    this.tagImg = tagImg;\n    this.srcImg = srcImg;\n\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    options.inSampleSize = 1;\n\n    BitmapFactory.decodeFile(srcImg, options);\n    this.srcWidth = options.outWidth;\n    this.srcHeight = options.outHeight;\n  }\n\n  private int METHOD_NAME() {\n    srcWidth = srcWidth % 2 == 1 ? srcWidth + 1 : srcWidth;\n    srcHeight = srcHeight % 2 == 1 ? srcHeight + 1 : srcHeight;\n\n    int longSide = Math.max(srcWidth, srcHeight);\n    int shortSide = Math.min(srcWidth, srcHeight);\n\n    float scale = ((float) shortSide / longSide);\n    if (scale <= 1 && scale > 0.5625) {\n      if (longSide < 1664) {\n        return 1;\n      } else if (longSide >= 1664 && longSide < 4990) {\n        return 2;\n      } else if (longSide > 4990 && longSide < 10240) {\n        return 4;\n      } else {\n        return longSide / 1280 == 0 ? 1 : longSide / 1280;\n      }\n    } else if (scale <= 0.5625 && scale > 0.5) {\n      return longSide / 1280 == 0 ? 1 : longSide / 1280;\n    } else {\n      return (int) Math.ceil(longSide / (1280.0 / scale));\n    }\n  }\n\n  private Bitmap rotatingImage(Bitmap bitmap) {\n    if (srcExif == null) return bitmap;\n\n    Matrix matrix = new Matrix();\n    int angle = 0;\n    int orientation = srcExif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);\n    switch (orientation) {\n      case ExifInterface.ORIENTATION_ROTATE_90:\n        angle = 90;\n        break;\n      case ExifInterface.ORIENTATION_ROTATE_180:\n        angle = 180;\n        break;\n      case ExifInterface.ORIENTATION_ROTATE_270:\n        angle = 270;\n        break;\n    }\n\n    matrix.postRotate(angle);\n\n    return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);\n  }\n\n  File compress() throws IOException {\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inSampleSize = METHOD_NAME();\n\n    Bitmap tagBitmap = BitmapFactory.decodeFile(srcImg, options);\n    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n\n    tagBitmap = rotatingImage(tagBitmap);\n    tagBitmap.compress(Bitmap.CompressFormat.JPEG, 90, stream);\n    tagBitmap.recycle();\n\n    FileOutputStream fos = new FileOutputStream(tagImg);\n    fos.write(stream.toByteArray());\n    fos.flush();\n    fos.close();\n    stream.close();\n\n    return tagImg;\n  }\n}"}
{"label": "is|checked", "code": "package com.luck.picture.lib.entity;\n\nimport android.os.Parcel;\nimport android.os.Parcelable;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.entity\n * email\uff1a893855882@qq.com\n * data\uff1a16/12/31\n */\npublic class LocalMediaFolder implements Parcelable {\n    private String name;\n    private String path;\n    private String firstImagePath;\n    private int imageNum;\n    private int checkedNum;\n    private boolean METHOD_NAME;\n    private List<LocalMedia> images = new ArrayList<LocalMedia>();\n\n\n    public boolean METHOD_NAME() {\n        return METHOD_NAME;\n    }\n\n    public void setChecked(boolean checked) {\n        METHOD_NAME = checked;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public void setPath(String path) {\n        this.path = path;\n    }\n\n    public String getFirstImagePath() {\n        return firstImagePath;\n    }\n\n    public void setFirstImagePath(String firstImagePath) {\n        this.firstImagePath = firstImagePath;\n    }\n\n    public int getImageNum() {\n        return imageNum;\n    }\n\n    public void setImageNum(int imageNum) {\n        this.imageNum = imageNum;\n    }\n\n    public List<LocalMedia> getImages() {\n        if (images == null) {\n            images = new ArrayList<>();\n        }\n        return images;\n    }\n\n    public void setImages(List<LocalMedia> images) {\n        this.images = images;\n    }\n\n    public int getCheckedNum() {\n        return checkedNum;\n    }\n\n    public void setCheckedNum(int checkedNum) {\n        this.checkedNum = checkedNum;\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeString(this.name);\n        dest.writeString(this.path);\n        dest.writeString(this.firstImagePath);\n        dest.writeInt(this.imageNum);\n        dest.writeInt(this.checkedNum);\n        dest.writeByte(this.METHOD_NAME ? (byte) 1 : (byte) 0);\n        dest.writeTypedList(this.images);\n    }\n\n    public LocalMediaFolder() {\n    }\n\n    protected LocalMediaFolder(Parcel in) {\n        this.name = in.readString();\n        this.path = in.readString();\n        this.firstImagePath = in.readString();\n        this.imageNum = in.readInt();\n        this.checkedNum = in.readInt();\n        this.METHOD_NAME = in.readByte() != 0;\n        this.images = in.createTypedArrayList(LocalMedia.CREATOR);\n    }\n\n    public static final Parcelable.Creator<LocalMediaFolder> CREATOR = new Parcelable.Creator<LocalMediaFolder>() {\n        @Override\n        public LocalMediaFolder createFromParcel(Parcel source) {\n            return new LocalMediaFolder(source);\n        }\n\n        @Override\n        public LocalMediaFolder[] newArray(int size) {\n            return new LocalMediaFolder[size];\n        }\n    };\n}\n"}
{"label": "get|instance", "code": "package com.luck.picture.lib.observable;\n\n\nimport com.luck.picture.lib.entity.LocalMedia;\nimport com.luck.picture.lib.entity.LocalMediaFolder;\nimport com.luck.picture.lib.tools.DebugUtil;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.observable\n * email\uff1a893855882@qq.com\n * data\uff1a17/1/11\n */\npublic class ImagesObservable implements SubjectListener {\n    //\u89c2\u5bdf\u8005\u63a5\u53e3\u96c6\u5408\n    private List<ObserverListener> observers = new ArrayList<>();\n\n    private List<LocalMediaFolder> folders;\n    private List<LocalMedia> medias;\n    private List<LocalMedia> selectedImages;\n    private static ImagesObservable sObserver;\n\n    private ImagesObservable() {\n        folders = new ArrayList<>();\n        medias = new ArrayList<>();\n        selectedImages = new ArrayList<>();\n    }\n\n    public static ImagesObservable METHOD_NAME() {\n        if (sObserver == null) {\n            synchronized (ImagesObservable.class) {\n                if (sObserver == null) {\n                    sObserver = new ImagesObservable();\n                }\n            }\n        }\n        return sObserver;\n    }\n\n\n    /**\n     * \u5b58\u50a8\u6587\u4ef6\u5939\u56fe\u7247\n     *\n     * @param list\n     */\n\n    public void saveLocalFolders(List<LocalMediaFolder> list) {\n        if (list != null) {\n            folders = list;\n        }\n    }\n\n\n    /**\n     * \u5b58\u50a8\u56fe\u7247\n     *\n     * @param list\n     */\n    public void saveLocalMedia(List<LocalMedia> list) {\n        medias = list;\n    }\n\n\n    /**\n     * \u8bfb\u53d6\u56fe\u7247\n     */\n    public List<LocalMedia> readLocalMedias() {\n        if (medias == null) {\n            medias = new ArrayList<>();\n        }\n        return medias;\n    }\n\n    /**\n     * \u8bfb\u53d6\u6240\u6709\u6587\u4ef6\u5939\u56fe\u7247\n     */\n    public List<LocalMediaFolder> readLocalFolders() {\n        if (folders == null) {\n            folders = new ArrayList<>();\n        }\n        return folders;\n    }\n\n\n    /**\n     * \u8bfb\u53d6\u9009\u4e2d\u7684\u56fe\u7247\n     */\n    public List<LocalMedia> readSelectLocalMedias() {\n        return selectedImages;\n    }\n\n\n    public void clearLocalFolders() {\n        if (folders != null)\n            folders.clear();\n    }\n\n    public void clearLocalMedia() {\n        if (medias != null)\n            medias.clear();\n        DebugUtil.i(\"ImagesObservable:\", \"clearLocalMedia success!\");\n    }\n\n    public void clearSelectedLocalMedia() {\n        if (selectedImages != null)\n            selectedImages.clear();\n    }\n\n    @Override\n    public void add(ObserverListener observerListener) {\n        observers.add(observerListener);\n    }\n\n    @Override\n    public void remove(ObserverListener observerListener) {\n        if (observers.contains(observerListener)) {\n            observers.remove(observerListener);\n        }\n    }\n}"}
{"label": "draw|horizontal", "code": "package com.luck.picture.lib.decoration;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.support.v4.content.ContextCompat;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.view.View;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.adapter\n * email\uff1a893855882@qq.com\n * data\uff1a16/12/31\n */\n\npublic class RecycleViewDivider extends RecyclerView.ItemDecoration {\n\n    private Paint mPaint;\n    private Drawable mDivider;\n    private int mDividerHeight = 2;//\u5206\u5272\u7ebf\u9ad8\u5ea6\uff0c\u9ed8\u8ba4\u4e3a1px\n    private int mOrientation;//\u5217\u8868\u7684\u65b9\u5411\uff1aLinearLayoutManager.VERTICAL\u6216LinearLayoutManager.HORIZONTAL\n    private static final int[] ATTRS = new int[]{android.R.attr.listDivider};\n\n    /**\n     * \u9ed8\u8ba4\u5206\u5272\u7ebf\uff1a\u9ad8\u5ea6\u4e3a2px\uff0c\u989c\u8272\u4e3a\u7070\u8272\n     *\n     * @param context\n     * @param orientation \u5217\u8868\u65b9\u5411\n     */\n    public RecycleViewDivider(Context context, int orientation) {\n        if (orientation != LinearLayoutManager.VERTICAL && orientation != LinearLayoutManager.HORIZONTAL) {\n            throw new IllegalArgumentException(\"\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u53c2\u6570\uff01\");\n        }\n        mOrientation = orientation;\n\n        final TypedArray a = context.obtainStyledAttributes(ATTRS);\n        mDivider = a.getDrawable(0);\n        a.recycle();\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u5206\u5272\u7ebf\n     *\n     * @param context\n     * @param orientation \u5217\u8868\u65b9\u5411\n     * @param drawableId  \u5206\u5272\u7ebf\u56fe\u7247\n     */\n    public RecycleViewDivider(Context context, int orientation, int drawableId) {\n        this(context, orientation);\n        mDivider = ContextCompat.getDrawable(context, drawableId);\n        mDividerHeight = mDivider.getIntrinsicHeight();\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u5206\u5272\u7ebf\n     *\n     * @param context\n     * @param orientation   \u5217\u8868\u65b9\u5411\n     * @param dividerHeight \u5206\u5272\u7ebf\u9ad8\u5ea6\n     * @param dividerColor  \u5206\u5272\u7ebf\u989c\u8272\n     */\n    public RecycleViewDivider(Context context, int orientation, int dividerHeight, int dividerColor) {\n        this(context, orientation);\n        mDividerHeight = dividerHeight;\n        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint.setColor(dividerColor);\n        mPaint.setStyle(Paint.Style.FILL);\n    }\n\n\n    //\u83b7\u53d6\u5206\u5272\u7ebf\u5c3a\u5bf8\n    @Override\n    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {\n        super.getItemOffsets(outRect, view, parent, state);\n        outRect.set(0, 0, 0, mDividerHeight);\n    }\n\n    //\u7ed8\u5236\u5206\u5272\u7ebf\n    @Override\n    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {\n        super.onDraw(c, parent, state);\n        if (mOrientation == LinearLayoutManager.VERTICAL) {\n            drawVertical(c, parent);\n        } else {\n            METHOD_NAME(c, parent);\n        }\n    }\n\n    //\u7ed8\u5236\u6a2a\u5411 item \u5206\u5272\u7ebf\n    private void METHOD_NAME(Canvas canvas, RecyclerView parent) {\n        final int left = parent.getPaddingLeft();\n        final int right = parent.getMeasuredWidth() - parent.getPaddingRight();\n        final int childSize = parent.getChildCount();\n        for (int i = 0; i < childSize; i++) {\n            final View child = parent.getChildAt(i);\n            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n            final int top = child.getBottom() + layoutParams.bottomMargin;\n            final int bottom = top + mDividerHeight;\n            if (mDivider != null) {\n                mDivider.setBounds(left, top, right, bottom);\n                mDivider.draw(canvas);\n            }\n            if (mPaint != null) {\n                canvas.drawRect(left, top, right, bottom, mPaint);\n            }\n        }\n    }\n\n    //\u7ed8\u5236\u7eb5\u5411 item \u5206\u5272\u7ebf\n    private void drawVertical(Canvas canvas, RecyclerView parent) {\n        final int top = parent.getPaddingTop();\n        final int bottom = parent.getMeasuredHeight() - parent.getPaddingBottom();\n        final int childSize = parent.getChildCount();\n        for (int i = 0; i < childSize; i++) {\n            final View child = parent.getChildAt(i);\n            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();\n            final int left = child.getRight() + layoutParams.rightMargin;\n            final int right = left + mDividerHeight;\n            if (mDivider != null) {\n                mDivider.setBounds(left, top, right, bottom);\n                mDivider.draw(canvas);\n            }\n            if (mPaint != null) {\n                canvas.drawRect(left, top, right, bottom, mPaint);\n            }\n        }\n    }\n}\n"}
{"label": "on|start", "code": "package com.luck.picture.lib;\n\nimport android.content.Context;\nimport android.content.ContextWrapper;\nimport android.graphics.Color;\nimport android.media.MediaPlayer;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.WindowManager;\nimport android.widget.ImageView;\nimport android.widget.MediaController;\nimport android.widget.VideoView;\n\npublic class PictureVideoPlayActivity extends PictureBaseActivity implements MediaPlayer.OnErrorListener, MediaPlayer.OnPreparedListener, MediaPlayer.OnCompletionListener, View.OnClickListener {\n    private String video_path = \"\";\n    private ImageView picture_left_back;\n    private MediaController mMediaController;\n    private VideoView mVideoView;\n    private ImageView iv_play;\n    private int mPositionWhenPaused = -1;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.picture_activity_video_play);\n        video_path = getIntent().getStringExtra(\"video_path\");\n        picture_left_back = (ImageView) findViewById(R.id.picture_left_back);\n        mVideoView = (VideoView) findViewById(R.id.video_view);\n        mVideoView.setBackgroundColor(Color.BLACK);\n        iv_play = (ImageView) findViewById(R.id.iv_play);\n        mMediaController = new MediaController(this);\n        mVideoView.setOnCompletionListener(this);\n        mVideoView.setOnPreparedListener(this);\n        mVideoView.setMediaController(mMediaController);\n        picture_left_back.setOnClickListener(this);\n        iv_play.setOnClickListener(this);\n    }\n\n\n    public void METHOD_NAME() {\n        // Play Video\n        mVideoView.setVideoPath(video_path);\n        mVideoView.start();\n        super.METHOD_NAME();\n    }\n\n    public void onPause() {\n        // Stop video when the activity is pause.\n        mPositionWhenPaused = mVideoView.getCurrentPosition();\n        mVideoView.stopPlayback();\n\n        super.onPause();\n    }\n\n    @Override\n    protected void onDestroy() {\n        mMediaController = null;\n        mVideoView = null;\n        iv_play = null;\n        super.onDestroy();\n    }\n\n    public void onResume() {\n        // Resume video player\n        if (mPositionWhenPaused >= 0) {\n            mVideoView.seekTo(mPositionWhenPaused);\n            mPositionWhenPaused = -1;\n        }\n\n        super.onResume();\n    }\n\n    @Override\n    public boolean onError(MediaPlayer player, int arg1, int arg2) {\n        return false;\n    }\n\n    @Override\n    public void onCompletion(MediaPlayer mp) {\n        if (null != iv_play) {\n            iv_play.setVisibility(View.VISIBLE);\n        }\n\n    }\n\n    @Override\n    public void onClick(View v) {\n        int id = v.getId();\n        if (id == R.id.picture_left_back) {\n            finish();\n        } else if (id == R.id.iv_play) {\n            mVideoView.start();\n            iv_play.setVisibility(View.INVISIBLE);\n        }\n    }\n\n    @Override\n    protected void attachBaseContext(Context newBase) {\n        super.attachBaseContext(new ContextWrapper(newBase) {\n            @Override\n            public Object getSystemService(String name) {\n                if (Context.AUDIO_SERVICE.equals(name))\n                    return getApplicationContext().getSystemService(name);\n                return super.getSystemService(name);\n            }\n        });\n    }\n\n    @Override\n    public void onPrepared(MediaPlayer mp) {\n        mp.setOnInfoListener(new MediaPlayer.OnInfoListener() {\n            @Override\n            public boolean onInfo(MediaPlayer mp, int what, int extra) {\n                if (what == MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START) {\n                    // video started\n                    mVideoView.setBackgroundColor(Color.TRANSPARENT);\n                    return true;\n                }\n                return false;\n            }\n        });\n    }\n}\n"}
{"label": "get|density", "code": "package com.luck.picture.lib.dialog;\n\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.res.Resources;\nimport android.util.DisplayMetrics;\nimport android.view.Gravity;\nimport android.view.Window;\nimport android.view.WindowManager;\n\npublic class CustomDialog extends Dialog {\n\n\tpublic CustomDialog(Context context, int width, int height, int layout,\n                        int style) {\n\t\tsuper(context, style);\n\t\tsetContentView(layout);\n\t\tWindow window = getWindow();\n\t\tWindowManager.LayoutParams params = window.getAttributes();\n\t\tparams.width = width;\n\t\tparams.height = height;\n\t\tparams.gravity = Gravity.CENTER;\n\t\twindow.setAttributes(params);\n\t}\n\n\tpublic float METHOD_NAME(Context context) {\n\t\tResources resources = context.getResources();\n\t\tDisplayMetrics dm = resources.getDisplayMetrics();\n\t\treturn dm.density;\n\t}\n\n}\n"}
{"label": "init", "code": "/*\n *    Copyright 2015 Kaopiz Software Co., Ltd.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\n\npackage com.luck.picture.lib.dialog;\n\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.util.AttributeSet;\nimport android.widget.ImageView;\n\nimport com.luck.picture.lib.R;\n\npublic class PictureSpinView extends ImageView implements PictureIndeterminate {\n\n    private float mRotateDegrees;\n    private int mFrameTime;\n    private boolean mNeedToUpdateView;\n    private Runnable mUpdateViewRunnable;\n\n    public PictureSpinView(Context context) {\n        super(context);\n        METHOD_NAME();\n    }\n\n    public PictureSpinView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        METHOD_NAME();\n    }\n\n    private void METHOD_NAME() {\n        setImageResource(R.drawable.kprogresshud_spinner);\n        mFrameTime = 1000 / 12;\n        mUpdateViewRunnable = new Runnable() {\n            @Override\n            public void run() {\n                mRotateDegrees += 30;\n                mRotateDegrees = mRotateDegrees < 360 ? mRotateDegrees : mRotateDegrees - 360;\n                invalidate();\n                if (mNeedToUpdateView) {\n                    postDelayed(this, mFrameTime);\n                }\n            }\n        };\n    }\n\n    @Override\n    public void setAnimationSpeed(float scale) {\n        mFrameTime = (int) (1000 / 12 / scale);\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        canvas.rotate(mRotateDegrees, getWidth() / 2, getHeight() / 2);\n        super.onDraw(canvas);\n    }\n\n    @Override\n    protected void onAttachedToWindow() {\n        super.onAttachedToWindow();\n        mNeedToUpdateView = true;\n        post(mUpdateViewRunnable);\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        mNeedToUpdateView = false;\n        super.onDetachedFromWindow();\n    }\n}\n"}
{"label": "on|create", "code": "package com.luck.picture.lib.dialog;\n\n\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.view.Window;\n\nimport com.luck.picture.lib.R;\n\npublic class PictureDialog extends Dialog {\n    public Context context;\n\n    public PictureDialog(Context context) {\n        super(context, R.style.picture_alert_dialog);\n        this.context = context;\n        setCancelable(true);\n        setCanceledOnTouchOutside(false);\n        Window window = getWindow();\n        window.setWindowAnimations(R.style.DialogWindowStyle);\n    }\n\n\n    protected void METHOD_NAME(Bundle savedInstanceState) {\n        super.METHOD_NAME(savedInstanceState);\n        setContentView(R.layout.picture_alert_dialog);\n    }\n}"}
{"label": "request|permissions", "code": "package com.luck.picture.lib.permissions;\n\nimport android.annotation.TargetApi;\nimport android.app.Fragment;\nimport android.content.pm.PackageManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.util.Log;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport io.reactivex.subjects.PublishSubject;\n\n/**\n * author\uff1aluck\n * project\uff1aPictureSelector\n * package\uff1acom.luck.picture.lib.permissions\n * email\uff1a893855882@qq.com\n * data\uff1a2017/5/31\n */\n\npublic class RxPermissionsFragment extends Fragment {\n\n    private static final int PERMISSIONS_REQUEST_CODE = 42;\n\n    // Contains all the current permission requests.\n    // Once granted or denied, they are removed from it.\n    private Map<String, PublishSubject<Permission>> mSubjects = new HashMap<>();\n    private boolean mLogging;\n\n    public RxPermissionsFragment() {\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n    }\n\n    @TargetApi(Build.VERSION_CODES.M)\n    void METHOD_NAME(@NonNull String[] permissions) {\n        METHOD_NAME(permissions, PERMISSIONS_REQUEST_CODE);\n    }\n\n    @TargetApi(Build.VERSION_CODES.M)\n    public void onRequestPermissionsResult(int requestCode, @NonNull String permissions[], @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n\n        if (requestCode != PERMISSIONS_REQUEST_CODE) return;\n\n        boolean[] shouldShowRequestPermissionRationale = new boolean[permissions.length];\n\n        for (int i = 0; i < permissions.length; i++) {\n            shouldShowRequestPermissionRationale[i] = shouldShowRequestPermissionRationale(permissions[i]);\n        }\n\n        onRequestPermissionsResult(permissions, grantResults, shouldShowRequestPermissionRationale);\n    }\n\n    void onRequestPermissionsResult(String permissions[], int[] grantResults, boolean[] shouldShowRequestPermissionRationale) {\n        for (int i = 0, size = permissions.length; i < size; i++) {\n            log(\"onRequestPermissionsResult  \" + permissions[i]);\n            // Find the corresponding subject\n            PublishSubject<Permission> subject = mSubjects.get(permissions[i]);\n            if (subject == null) {\n                // No subject found\n                Log.e(RxPermissions.TAG, \"RxPermissions.onRequestPermissionsResult invoked but didn't find the corresponding permission request.\");\n                return;\n            }\n            mSubjects.remove(permissions[i]);\n            boolean granted = grantResults[i] == PackageManager.PERMISSION_GRANTED;\n            subject.onNext(new Permission(permissions[i], granted, shouldShowRequestPermissionRationale[i]));\n            subject.onComplete();\n        }\n    }\n\n    @TargetApi(Build.VERSION_CODES.M)\n    boolean isGranted(String permission) {\n        return getActivity().checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;\n    }\n\n    @TargetApi(Build.VERSION_CODES.M)\n    boolean isRevoked(String permission) {\n        return getActivity().getPackageManager().isPermissionRevokedByPolicy(permission, getActivity().getPackageName());\n    }\n\n    public void setLogging(boolean logging) {\n        mLogging = logging;\n    }\n\n    public PublishSubject<Permission> getSubjectByPermission(@NonNull String permission) {\n        return mSubjects.get(permission);\n    }\n\n    public boolean containsByPermission(@NonNull String permission) {\n        return mSubjects.containsKey(permission);\n    }\n\n    public PublishSubject<Permission> setSubjectForPermission(@NonNull String permission, @NonNull PublishSubject<Permission> subject) {\n        return mSubjects.put(permission, subject);\n    }\n\n    void log(String message) {\n        if (mLogging) {\n            Log.d(RxPermissions.TAG, message);\n        }\n    }\n}\n"}
{"label": "output", "code": "package DeepLearning;\n\nimport java.util.Random;\nimport java.util.function.DoubleFunction;\nimport static DeepLearning.utils.*;\n\npublic class HiddenLayer {\n    public int N;\n    public int n_in;\n    public int n_out;\n    public double[][] W;\n    public double[] b;\n    public Random rng;\n    public DoubleFunction<Double> activation;\n    public DoubleFunction<Double> dactivation;\n\n    public HiddenLayer(int N, int n_in, int n_out, double[][] W, double[] b, Random rng, String activation) {\n        this.N = N;\n        this.n_in = n_in;\n        this.n_out = n_out;\n\n        if (rng == null) this.rng = new Random(1234);\n        else this.rng = rng;\n\n        if (W == null) {\n            this.W = new double[n_out][n_in];\n            double a = 1.0 / this.n_in;\n\n            for(int i=0; i<n_out; i++) {\n                for(int j=0; j<n_in; j++) {\n                    this.W[i][j] = uniform(-a, a, rng);\n                }\n            }\n        } else {\n            this.W = W;\n        }\n\n        if (b == null) this.b = new double[n_out];\n        else this.b = b;\n\n        if (activation == \"sigmoid\" || activation == null) {\n            this.activation = (double x) -> sigmoid(x);\n            this.dactivation = (double x) -> dsigmoid(x);\n\n        } else if (activation == \"tanh\") {\n            this.activation = (double x) -> tanh(x);\n            this.dactivation = (double x) -> dtanh(x);\n        } else if (activation == \"ReLU\") {\n            this.activation = (double x) -> ReLU(x);\n            this.dactivation = (double x) -> dReLU(x);\n        } else {\n            throw new IllegalArgumentException(\"activation function not supported\");\n        }\n\n    }\n\n    public double METHOD_NAME(double[] input, double[] w, double b) {\n        double linear_output = 0.0;\n        for(int j=0; j<n_in; j++) {\n            linear_output += w[j] * input[j];\n        }\n        linear_output += b;\n\n        return activation.apply(linear_output);\n    }\n\n\n    public void forward(double[] input, double[] METHOD_NAME) {\n        for(int i=0; i<n_out; i++) {\n            METHOD_NAME[i] = this.METHOD_NAME(input, W[i], b[i]);\n        }\n    }\n\n    public void backward(double[] input, double[] dy, double[] prev_layer_input, double[] prev_layer_dy, double[][] prev_layer_W, double lr) {\n        if(dy == null) dy = new double[n_out];\n\n        int prev_n_in = n_out;\n        int prev_n_out = prev_layer_dy.length;\n\n        for(int i=0; i<prev_n_in; i++) {\n            dy[i] = 0;\n            for(int j=0; j<prev_n_out; j++) {\n                dy[i] += prev_layer_dy[j] * prev_layer_W[j][i];\n            }\n\n            dy[i] *= dactivation.apply(prev_layer_input[i]);\n        }\n\n        for(int i=0; i<n_out; i++) {\n            for(int j=0; j<n_in; j++) {\n                W[i][j] += lr * dy[i] * input[j] / N;\n            }\n            b[i] += lr * dy[i] / N;\n        }\n    }\n\n    public int[] dropout(int size, double p, Random rng) {\n        int[] mask = new int[size];\n\n        for(int i=0; i<size; i++) {\n            mask[i] = binomial(1, p, rng);\n        }\n\n        return mask;\n    }\n}\n"}
{"label": "train", "code": "package DeepLearning;\n\nimport java.util.Random;\n\npublic class MLP {\n    public int N;\n    public int n_in;\n    public int n_hidden;\n    public int n_out;\n    public HiddenLayer hiddenLayer;\n    public LogisticRegression logisticLayer;\n    public Random rng;\n\n\n    public MLP(int N, int n_in, int n_hidden, int n_out, Random rng) {\n\n        this.N = N;\n        this.n_in = n_in;\n        this.n_hidden = n_hidden;\n        this.n_out = n_out;\n\n        if (rng == null)rng = new Random(1234);\n        this.rng = rng;\n\n        // construct hiddenLayer\n        this.hiddenLayer = new HiddenLayer(N, n_in, n_hidden, null, null, rng, \"tanh\");\n\n        // construct logisticLayer\n        this.logisticLayer = new LogisticRegression(N, n_hidden, n_out);\n    }\n\n\n    public void METHOD_NAME(double[][] train_X, int[][] train_Y, double lr) {\n        double[] hidden_layer_input;\n        double[] logistic_layer_input;\n        double[] dy;\n\n        for(int n=0; n<N; n++) {\n            hidden_layer_input = new double[n_in];\n            logistic_layer_input = new double[n_hidden];\n\n            for(int j=0; j<n_in; j++) hidden_layer_input[j] = train_X[n][j];\n\n            // forward hiddenLayer\n            hiddenLayer.forward(hidden_layer_input, logistic_layer_input);\n\n            // forward and backward logisticLayer\n            // dy = new double[n_out];  // define delta of y for backpropagation\n            dy = logisticLayer.METHOD_NAME(logistic_layer_input, train_Y[n], lr); //, dy);\n\n            // backward hiddenLayer\n            hiddenLayer.backward(hidden_layer_input, null, logistic_layer_input, dy, logisticLayer.W, lr);\n\n        }\n    }\n\n    public void predict(double[] x, double[] y) {\n        double[] logistic_layer_input = new double[n_hidden];\n        hiddenLayer.forward(x, logistic_layer_input);\n        logisticLayer.predict(logistic_layer_input, y);\n    }\n\n\n\n    private static void test_mlp() {\n        Random rng = new Random(123);\n\n        double learning_rate = 0.1;\n        int n_epochs = 5000;\n\n        int train_N = 4;\n        int test_N = 4;\n        int n_in = 2;\n        int n_hidden = 3;\n        int n_out = 2;\n\n        double[][] train_X = {\n                {0., 0.},\n                {0., 1.},\n                {1., 0.},\n                {1., 1.},\n        };\n\n        int[][] train_Y = {\n                {0, 1},\n                {1, 0},\n                {1, 0},\n                {0, 1},\n        };\n\n        // construct MLP\n        MLP classifier = new MLP(train_N, n_in, n_hidden, n_out, rng);\n\n        // train\n        for(int epoch=0; epoch<n_epochs; epoch++) {\n            classifier.METHOD_NAME(train_X, train_Y, learning_rate);\n        }\n\n        // test data\n        double[][] test_X = {\n                {0., 0.},\n                {0., 1.},\n                {1., 0.},\n                {1., 1.},\n        };\n\n        double[][] test_Y = new double[test_N][n_out];\n\n\n        // test\n        for(int i=0; i<test_N; i++) {\n            classifier.predict(test_X[i], test_Y[i]);\n            for(int j=0; j<n_out; j++) {\n                System.out.print(test_Y[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n    }\n\n    public static void main(String[] args) {\n        test_mlp();\n    }\n}\n"}
{"label": "uniform", "code": "package DeepLearning;\n\nimport java.util.Random;\n\npublic class utils {\n    public static double METHOD_NAME(double min, double max, Random rng) {\n        return rng.nextDouble() * (max - min) + min;\n    }\n\n    public static int binomial(int n, double p, Random rng) {\n        if(p < 0 || p > 1) return 0;\n\n        int c = 0;\n        double r;\n\n        for(int i=0; i<n; i++) {\n            r = rng.nextDouble();\n            if (r < p) c++;\n        }\n\n        return c;\n    }\n\n    public static double sigmoid(double x) {\n        return 1. / (1. + Math.pow(Math.E, -x));\n    }\n\n    public static double dsigmoid(double x) {\n        return x * (1. - x);\n    }\n\n    public static double tanh(double x) {\n        return Math.tanh(x);\n    }\n\n    public static double dtanh(double x) {\n        return 1. - x * x;\n    }\n\n    public static double ReLU(double x) {\n        if(x > 0) {\n            return x;\n        } else {\n            return 0.;\n        }\n    }\n\n    public static double dReLU(double x) {\n        if(x > 0) {\n            return 1.;\n        } else {\n            return 0.;\n        }\n    }\n}\n"}
{"label": "output", "code": "package DeepLearning;\n\nimport java.util.Random;\nimport static DeepLearning.utils.*;\n\npublic class HiddenLayerDiscrete extends HiddenLayer {\n    public int N;\n    public int n_in;\n    public int n_out;\n    public double[][] W;\n    public double[] b;\n    public Random rng;\n\n\n    public HiddenLayerDiscrete(int N, int n_in, int n_out, double[][] W, double[] b, Random rng) {\n        super(N, n_in, n_out, W, b, rng, null);\n\n        this.N = N;\n        this.n_in = n_in;\n        this.n_out = n_out;\n\n        if(rng == null)\tthis.rng = new Random(1234);\n        else this.rng = rng;\n\n        if(W == null) {\n            this.W = new double[n_out][n_in];\n            double a = 1.0 / this.n_in;\n\n            for(int i=0; i<n_out; i++) {\n                for(int j=0; j<n_in; j++) {\n                    this.W[i][j] = uniform(-a, a, rng);\n                }\n            }\n        } else {\n            this.W = W;\n        }\n\n        if(b == null) this.b = new double[n_out];\n        else this.b = b;\n    }\n\n    public double METHOD_NAME(int[] input, double[] w, double b) {\n        double linear_output = 0.0;\n        for(int j=0; j<n_in; j++) {\n            linear_output += w[j] * input[j];\n        }\n        linear_output += b;\n        return sigmoid(linear_output);\n    }\n\n    public void sample_h_given_v(int[] input, int[] sample) {\n        for(int i=0; i<n_out; i++) {\n            sample[i] = binomial(1, METHOD_NAME(input, W[i], b[i]), rng);\n        }\n    }\n}\n"}
{"label": "train", "code": "package DeepLearning;\n\npublic class LogisticRegressionDiscrete extends LogisticRegression {\n    public int N;\n    public int n_in;\n    public int n_out;\n    public double[][] W;\n    public double[] b;\n\n    public LogisticRegressionDiscrete(int N, int n_in, int n_out) {\n        super(N, n_in, n_out);\n\n        this.N = N;\n        this.n_in = n_in;\n        this.n_out = n_out;\n\n        W = new double[this.n_out][this.n_in];\n        b = new double[this.n_out];\n    }\n\n    public void METHOD_NAME(int[] x, int[] y, double lr) {\n        double[] p_y_given_x = new double[n_out];\n        double[] dy = new double[n_out];\n\n        for(int i=0; i<n_out; i++) {\n            p_y_given_x[i] = 0;\n            for(int j=0; j<n_in; j++) {\n                p_y_given_x[i] += W[i][j] * x[j];\n            }\n            p_y_given_x[i] += b[i];\n        }\n        softmax(p_y_given_x);\n\n        for(int i=0; i<n_out; i++) {\n            dy[i] = y[i] - p_y_given_x[i];\n\n            for(int j=0; j<n_in; j++) {\n                W[i][j] += lr * dy[i] * x[j] / N;\n            }\n\n            b[i] += lr * dy[i] / N;\n        }\n    }\n\n    public void predict(int[] x, double[] y) {\n        for(int i=0; i<n_out; i++) {\n            y[i] = 0;\n            for(int j=0; j<n_in; j++) {\n                y[i] += W[i][j] * x[j];\n            }\n            y[i] += b[i];\n        }\n\n        softmax(y);\n    }\n\n    private static void test_lr() {\n        double learning_rate = 0.1;\n        int n_epochs = 500;\n\n        int train_N = 6;\n        int test_N = 2;\n        int n_in = 6;\n        int n_out = 2;\n\n        int[][] train_X = {\n                {1, 1, 1, 0, 0, 0},\n                {1, 0, 1, 0, 0, 0},\n                {1, 1, 1, 0, 0, 0},\n                {0, 0, 1, 1, 1, 0},\n                {0, 0, 1, 1, 0, 0},\n                {0, 0, 1, 1, 1, 0}\n        };\n\n        int[][] train_Y = {\n                {1, 0},\n                {1, 0},\n                {1, 0},\n                {0, 1},\n                {0, 1},\n                {0, 1}\n        };\n\n        // construct\n        LogisticRegressionDiscrete classifier = new LogisticRegressionDiscrete(train_N, n_in, n_out);\n\n        // train\n        for(int epoch=0; epoch<n_epochs; epoch++) {\n            for(int i=0; i<train_N; i++) {\n                classifier.METHOD_NAME(train_X[i], train_Y[i], learning_rate);\n            }\n            //learning_rate *= 0.95;\n        }\n\n        // test data\n        int[][] test_X = {\n                {1, 0, 1, 0, 0, 0},\n                {0, 0, 1, 1, 1, 0}\n        };\n\n        double[][] test_Y = new double[test_N][n_out];\n\n\n        // test\n        for(int i=0; i<test_N; i++) {\n            classifier.predict(test_X[i], test_Y[i]);\n            for(int j=0; j<n_out; j++) {\n                System.out.print(test_Y[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public static void main(String[] args) {\n        test_lr();\n    }\n}\n"}
{"label": "train", "code": "package DeepLearning;\n\npublic class LogisticRegression {\n    public int N;\n    public int n_in;\n    public int n_out;\n    public double[][] W;\n    public double[] b;\n\n    public LogisticRegression(int N, int n_in, int n_out) {\n        this.N = N;\n        this.n_in = n_in;\n        this.n_out = n_out;\n\n        W = new double[n_out][n_in];\n        b = new double[n_out];\n    }\n\n    public double[] METHOD_NAME(double[] x, int[] y, double lr) {\n        double[] p_y_given_x = new double[n_out];\n        double[] dy = new double[n_out];\n\n        for(int i=0; i<n_out; i++) {\n            p_y_given_x[i] = 0;\n            for(int j=0; j<n_in; j++) {\n                p_y_given_x[i] += W[i][j] * x[j];\n            }\n            p_y_given_x[i] += b[i];\n        }\n        softmax(p_y_given_x);\n\n        for(int i=0; i<n_out; i++) {\n            dy[i] = y[i] - p_y_given_x[i];\n\n            for(int j=0; j<n_in; j++) {\n                W[i][j] += lr * dy[i] * x[j] / N;\n            }\n\n            b[i] += lr * dy[i] / N;\n        }\n\n        return dy;\n    }\n\n    public void softmax(double[] x) {\n        double max = 0.0;\n        double sum = 0.0;\n\n        for(int i=0; i<n_out; i++) if(max < x[i]) max = x[i];\n\n        for(int i=0; i<n_out; i++) {\n            x[i] = Math.exp(x[i] - max);\n            sum += x[i];\n        }\n\n        for(int i=0; i<n_out; i++) x[i] /= sum;\n    }\n\n    public void predict(double[] x, double[] y) {\n        for(int i=0; i<n_out; i++) {\n            y[i] = 0.;\n            for(int j=0; j<n_in; j++) {\n                y[i] += W[i][j] * x[j];\n            }\n            y[i] += b[i];\n        }\n\n        softmax(y);\n    }\n\n    private static void test_lr() {\n        double learning_rate = 0.1;\n        int n_epochs = 500;\n\n        int train_N = 6;\n        int test_N = 2;\n        int n_in = 6;\n        int n_out = 2;\n\n        double[][] train_X = {\n                {1., 1., 1., 0., 0., 0.},\n                {1., 0., 1., 0., 0., 0.},\n                {1., 1., 1., 0., 0., 0.},\n                {0., 0., 1., 1., 1., 0.},\n                {0., 0., 1., 1., 0., 0.},\n                {0., 0., 1., 1., 1., 0.}\n        };\n\n        int[][] train_Y = {\n                {1, 0},\n                {1, 0},\n                {1, 0},\n                {0, 1},\n                {0, 1},\n                {0, 1}\n        };\n\n        // construct\n        LogisticRegression classifier = new LogisticRegression(train_N, n_in, n_out);\n\n        // train\n        for(int epoch=0; epoch<n_epochs; epoch++) {\n            for(int i=0; i<train_N; i++) {\n                classifier.METHOD_NAME(train_X[i], train_Y[i], learning_rate);\n            }\n            //learning_rate *= 0.95;\n        }\n\n        // test data\n        double[][] test_X = {\n                {1., 0., 1., 0., 0., 0.},\n                {0., 0., 1., 1., 1., 0.}\n        };\n\n        double[][] test_Y = new double[test_N][n_out];\n\n\n        // test\n        for(int i=0; i<test_N; i++) {\n            classifier.predict(test_X[i], test_Y[i]);\n            for(int j=0; j<n_out; j++) {\n                System.out.print(test_Y[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public static void main(String[] args) {\n        test_lr();\n    }\n}\n"}
{"label": "say", "code": "package logansquare;\n\nimport com.bluelinelabs.logansquare.annotation.JsonField;\nimport com.bluelinelabs.logansquare.annotation.JsonObject;\n\n/**\n * Created by vedenin on 22.04.16.\n */\n@JsonObject\npublic class Human {\n    @JsonField(name=\"message\")\n    public String message;\n    @JsonField(name=\"place\")\n    public Place place;\n\n\n\n    public void METHOD_NAME() {\n        System.out.println();\n        System.out.println(message + \" , \" + place.name + \"!\");\n    }\n}\n"}
{"label": "main", "code": "package logansquare;\n\nimport com.bluelinelabs.logansquare.LoganSquare;\n\n/**\n *  Ig Json Parser Hello World\n *\n  */\npublic class LoganSquarenParserHelloWorld {\n\n    public static void METHOD_NAME(String[] args) throws Exception {\n        // init class\n        Place place = new Place();\n        place.name = \"World\";\n\n        Human human = new Human();\n        human.message = \"Hi\";\n        human.place = place;\n\n        // convert to json\n        String jsonString = LoganSquare.serialize(human);\n        System.out.println(\"json \" + jsonString); //print \"json {\"place\":{\"name\":\"World\"},\"message\":\"Hi\"}\"\n\n        // convert from json\n        Human newHuman = LoganSquare.parse(jsonString, Human.class);\n        newHuman.say(); // print \"Hi , World!\"\n    }\n}\n"}
{"label": "main", "code": "package moshi;\n\nimport com.squareup.moshi.JsonAdapter;\nimport com.squareup.moshi.Moshi;\n\nimport java.io.IOException;\n\n/**\n *  Moshi Hello World\n *\n  */\npublic class MoshiHelloWorld {\n    public static void METHOD_NAME(String[] args) throws IOException {\n        // init class\n        Place place = new Place();\n        place.setName(\"World\");\n\n        Human human = new Human();\n        human.setMessage(\"Hi\");\n        human.setPlace(place);\n\n        // convert to json\n        Moshi moshi = new Moshi.Builder().build();\n        JsonAdapter<Human> jsonAdapter = moshi.adapter(Human.class);\n\n        String jsonString = jsonAdapter.toJson(human);\n        System.out.println(\"json \" + jsonString); //print \"json {\"message\":\"Hi\",\"place\":{\"name\":\"World\"}}\"\n\n        // convert from json\n        Human newHuman = jsonAdapter.fromJson(jsonString);\n        newHuman.say(); // print \"Hi , World!\"\n    }\n\n    private static class Human {\n        private String message;\n        private Place place;\n\n        String getMessage() {\n            return message;\n        }\n\n        void setMessage(String message) {\n            this.message = message;\n        }\n\n        Place getPlace() {\n            return place;\n        }\n\n        void setPlace(Place place) {\n            this.place = place;\n        }\n\n        void say() {\n            System.out.println();\n            System.out.println(getMessage() + \" , \" + getPlace().getName() + \"!\");\n        }\n    }\n\n    private static class Place {\n        private String name;\n\n        String getName() {\n            return name;\n        }\n\n        void setName(String name) {\n            this.name = name;\n        }\n    }\n\n}\n"}
{"label": "main", "code": "package fastjson;\n\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONPath;\n\n/**\n *  Json Path Hello World\n *\n  */\npublic class JsonPathHelloWorld {\n\n    public  static void METHOD_NAME(String[] args) {\n        // init class\n        Place place = new Place();\n        place.setName(\"World\");\n\n        Human human = new Human();\n        human.setMessage(\"Hi\");\n        human.setPlace(place);\n\n        // convert to json and from json\n        String jsonString = JSON.toJSONString(human);\n        Human newHuman = JSON.parseObject(jsonString, Human.class);\n\n        // use eval to get info\n        Object message = JSONPath.eval(newHuman, \"$.message\");\n        Object world = JSONPath.eval(newHuman, \"$.place.name\");\n        System.out.println(message + \" \" + world); // print Hi World\n    }\n\n    private static class Human {\n        private String message;\n        private Place place;\n\n        public String getMessage() {\n            return message;\n        }\n\n        public void setMessage(String message) {\n            this.message = message;\n        }\n\n        public Place getPlace() {\n            return place;\n        }\n\n        public void setPlace(Place place) {\n            this.place = place;\n        }\n\n        public void say() {\n            System.out.println();\n            System.out.println(getMessage() + \" , \" + getPlace().getName() + \"!\");\n        }\n    }\n\n    private static class Place {\n        private String name;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n    }\n}\n"}
{"label": "main", "code": "package fastjson;\n\nimport com.alibaba.fastjson.JSON;\n\n/**\n *  FastJson Hello Place\n *\n  */\npublic class FastJsonHelloWorld {\n\n    public static void METHOD_NAME(String[] args) {\n        // init class\n        Place place = new Place();\n        place.setName(\"World\");\n\n        Human human = new Human();\n        human.setMessage(\"Hi\");\n        human.setPlace(place);\n\n        // convert to json\n        String jsonString = JSON.toJSONString(human);\n        System.out.println(\"json \" + jsonString); // print \"json {\"message\":\"Hi\",\"place\":{\"name\":\"World\"}}\"\n\n        // convert from json\n        Human newHuman = JSON.parseObject(jsonString, Human.class);\n        newHuman.say(); // print \"Hi , World!\"\n    }\n\n    private static class Human {\n        private String message;\n        private Place place;\n\n        public String getMessage() {\n            return message;\n        }\n\n        public void setMessage(String message) {\n            this.message = message;\n        }\n\n        public Place getPlace() {\n            return place;\n        }\n\n        public void setPlace(Place place) {\n            this.place = place;\n        }\n\n        public void say() {\n            System.out.println();\n            System.out.println(getMessage() + \" , \" + getPlace().getName() + \"!\");\n        }\n    }\n\n    private static class Place {\n        private String name;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n    }\n\n}\n"}
{"label": "main", "code": "package minimal_json;\n\n\nimport com.eclipsesource.json.Json;\nimport com.eclipsesource.json.JsonObject;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\n\n/**\n * Json-Java Hello World\n */\npublic class JsonMinimalHelloWorld {\n\n    public static void METHOD_NAME(String[] args) throws IOException {\n        // convert Java to writer\n        JsonObject root = Json.object().add(\"message\", \"Hi\").add(\n                \"place\", Json.object().add(\"name\", \"World!\")\n        );\n        StringWriter writer = new StringWriter();\n        root.writeTo(writer);\n        String json = writer.toString();\n        System.out.println(json);\n\n        System.out.println();\n        // convert writer to Java\n        JsonObject obj = Json.parse(json).asObject();\n        String message = obj.get(\"message\").asString();\n        String name = obj.get(\"place\").asObject().get(\"name\").asString();\n        System.out.println(message + \" \" + name);\n    }\n}\n"}
{"label": "main", "code": "package gson.advanced;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\n\nimport java.io.IOException;\n\n/**\n * Example of TreeModel (write and read)\n *\n *\n * Created by vvedenin on 4/24/2016.\n */\npublic class TreeModel {\n    public static void METHOD_NAME(String[] args) throws IOException {\n        System.out.print(\"readJson: \");\n        readJson();\n        System.out.println();\n        System.out.print(\"writeJson: \");\n        writeJson();\n    }\n\n    /**\n     *  Example to readJson using TreeModel\n     */\n    private static void readJson() throws IOException {\n        JsonParser parser = new JsonParser();\n        JsonElement jsonElement = parser.parse(\"{\\\"message\\\":\\\"Hi\\\",\\\"place\\\":{\\\"name\\\":\\\"World!\\\"}}\");\n        JsonObject rootObject = jsonElement.getAsJsonObject();\n        String message = rootObject.get(\"message\").getAsString(); // get property \"message\"\n        JsonObject childObject = rootObject.getAsJsonObject(\"place\"); // get place object\n        String place = childObject.get(\"name\").getAsString(); // get property \"name\"\n        System.out.println(message + \" \" + place); // print \"Hi World!\"*/\n    }\n\n\n    /**\n     * Example to writeJson using TreeModel\n     */\n    private static void writeJson() throws IOException {\n        JsonObject rootObject = new JsonObject();\n        rootObject.addProperty(\"message\", \"Hi\");\n        JsonObject childObject = new JsonObject();\n        childObject.addProperty(\"name\", \"World!\");\n        rootObject.add(\"place\", childObject);\n\n        Gson gson = new Gson();\n        String json = gson.toJson(rootObject);\n        System.out.println(json); // print \"{\"message\":\"Hi\",\"place\":{\"name\":\"World!\"}}\"\n    }\n}\n"}
{"label": "main", "code": "package gson.advanced;\n\nimport com.google.gson.stream.JsonReader;\nimport com.google.gson.stream.JsonToken;\nimport com.google.gson.stream.JsonWriter;\n\nimport java.io.*;\nimport java.nio.charset.Charset;\n\n/**\n * Example of StreamingAPI (write and read)\n *\n * Created by vvedenin on 4/24/2016.\n */\npublic class StreamingAPI {\n    public static void METHOD_NAME(String[] args) throws IOException {\n        System.out.print(\"readJson: \");\n        readJson();\n        System.out.println();\n        System.out.print(\"writeJson: \");\n        writeJson();\n    }\n\n    /**\n     *  Example to readJson using StreamingAPI\n     */\n    private static void readJson() throws IOException {\n        String str = \"{\\\"message\\\":\\\"Hi\\\",\\\"place\\\":{\\\"name\\\":\\\"World!\\\"}}\";\n        InputStream in = new ByteArrayInputStream(str.getBytes(Charset.forName(\"UTF-8\")));\n        JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n        while (reader.hasNext()) {\n            JsonToken jsonToken = reader.peek();\n            if(jsonToken == JsonToken.BEGIN_OBJECT) {\n                reader.beginObject();\n            } else if(jsonToken == JsonToken.END_OBJECT) {\n                reader.endObject();\n            } if(jsonToken == JsonToken.STRING) {\n                System.out.print(reader.nextString() + \" \"); // print Hi World!\n            } else {\n                reader.skipValue();\n            }\n        }\n        reader.close();\n    }\n\n    /**\n     * Example to writeJson using StreamingAPI\n     */\n    private static void writeJson() throws IOException {\n        OutputStream outputStream = new ByteArrayOutputStream();\n        JsonWriter writer = new JsonWriter(new OutputStreamWriter(outputStream, \"UTF-8\"));\n        writer.beginObject(); // main object\n        writer.name(\"message\");\n        writer.value(\"Hi\");\n        writer.name(\"place\"); // save object Place\n        writer.beginObject();\n        writer.name(\"name\");\n        writer.value(\"World!\");\n        writer.endObject();\n        writer.endObject();\n        writer.close();\n        System.out.println(outputStream.toString()); // print \"{\"message\":\"Hi\",\"place\":{\"name\":\"World!\"}}\"\n    }\n}\n"}
{"label": "main", "code": "package gson;\n\nimport com.google.gson.Gson;\n\n/**\n *  Gson Hello World\n *\n  */\npublic class GsonHelloWorld {\n\n    public static void METHOD_NAME(String[] args) {\n        // init class\n        Place place = new Place();\n        place.setName(\"World\");\n\n        Human human = new Human();\n        human.setMessage(\"Hi\");\n        human.setPlace(place);\n\n        // convert to json\n        Gson gson = new Gson();\n        String jsonString = gson.toJson(human);\n        System.out.println(\"json \" + jsonString); // print \"json {\"message\":\"Hi\",\"place\":{\"name\":\"World\"}}\"\n\n        // convert from json\n        Human newHuman = gson.fromJson(jsonString, Human.class);\n        newHuman.say(); // print \"Hi , World!\"\n    }\n\n    private static class Human {\n        private String message;\n        private Place place;\n\n        public String getMessage() {\n            return message;\n        }\n\n        public void setMessage(String message) {\n            this.message = message;\n        }\n\n        public Place getPlace() {\n            return place;\n        }\n\n        public void setPlace(Place place) {\n            this.place = place;\n        }\n\n        public void say() {\n            System.out.println();\n            System.out.println(getMessage() + \" , \" + getPlace().getName() + \"!\");\n        }\n    }\n\n    private static class Place {\n        private String name;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n    }\n}\n"}
{"label": "main", "code": "package json_schema_validator;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.github.fge.jsonschema.core.exceptions.ProcessingException;\nimport com.github.fge.jsonschema.core.report.ProcessingReport;\nimport com.github.fge.jsonschema.examples.Utils;\nimport com.github.fge.jsonschema.METHOD_NAME.JsonSchema;\nimport com.github.fge.jsonschema.METHOD_NAME.JsonSchemaFactory;\n\nimport java.io.IOException;\n\n/**\n * Json Schema Validator Hello World\n */\npublic class JsonSchemaValidatorHelloWorld {\n\n\n    public static void METHOD_NAME(final String... args)\n            throws IOException, ProcessingException {\n        final JsonNode fstabSchema = Utils.loadResource(\"/fstab.json\");\n        final JsonNode good = Utils.loadResource(\"/fstab-good.json\");\n        final JsonNode bad = Utils.loadResource(\"/fstab-bad.json\");\n        final JsonNode bad2 = Utils.loadResource(\"/fstab-bad2.json\");\n\n        final JsonSchemaFactory factory = JsonSchemaFactory.byDefault();\n\n        final JsonSchema schema = factory.getJsonSchema(fstabSchema);\n\n        ProcessingReport report;\n\n        report = schema.validate(good);\n        System.out.println(report);\n\n        report = schema.validate(bad);\n        System.out.println(report);\n\n        report = schema.validate(bad2);\n        System.out.println(report);\n    }\n}\n"}
{"label": "main", "code": "package jsonschema2pojo;\n\nimport com.google.common.io.Files;\nimport com.sun.codemodel.JCodeModel;\nimport org.apache.commons.io.Charsets;\nimport org.jsonschema2pojo.*;\nimport org.jsonschema2pojo.rules.RuleFactory;\n\nimport java.io.File;\n\n/**\n *  JsonSchema2 Hello World - generate java class from json fro GSON, Jackson and other lib\n *\n  */\npublic class JsonSchema2HelloWorld {\n\n    public static void METHOD_NAME(String[] args) throws Exception {\n        // Init json\n        String source = \"{\\n\" +\n                \"  \\\"type\\\":\\\"object\\\",\\n\" +\n                \"  \\\"properties\\\": {\\n\" +\n                \"    \\\"messageHiWorld\\\": {\\n\" +\n                \"      \\\"type\\\": \\\"string\\\"\\n\" +\n                \"    },\\n\" +\n                \"    \\\"bar\\\": {\\n\" +\n                \"      \\\"type\\\": \\\"integer\\\"\\n\" +\n                \"    },\\n\" +\n                \"    \\\"baz\\\": {\\n\" +\n                \"      \\\"type\\\": \\\"boolean\\\"\\n\" +\n                \"    }\\n\" +\n                \"  }\\n\" +\n                \"}\";\n\n        // Init config\n        JCodeModel codeModel = new JCodeModel();\n\n        GenerationConfig config = new DefaultGenerationConfig() {\n            @Override\n            public boolean isGenerateBuilders() { // set config option by overriding method\n                return true;\n            }\n        };\n\n        // Generate Java POJO from json\n        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, new Jackson2Annotator(), new SchemaStore()), new SchemaGenerator());\n        mapper.generate(codeModel, \"HelloWorldClass\", \"com.github.vedenin\", source);\n\n        // Save generated class to file\n        File directory = new File(\"helloworlds/3.8-json/jsonschema2pojo/output\");\n        directory.mkdirs();\n        codeModel.build(directory);\n\n        // Show generated class\n        File cls = new File(\"helloworlds/3.8-json/jsonschema2pojo/output/com/github/vedenin/HelloWorldClass.java\");\n        String codeHelloWorld = Files.toString(cls, Charsets.UTF_8);\n        System.out.println(codeHelloWorld);\n    }\n}\n"}
{"label": "main", "code": "package genson;\n\nimport com.owlike.genson.Genson;\n\nimport java.io.IOException;\n\n/**\n *  Genson Hello Place\n *\n  */\npublic class GensonHelloWorld {\n\n    public static void METHOD_NAME(String[] args) throws IOException {\n        // init class\n        Place place = new Place();\n        place.setName(\"World\");\n\n        Human human = new Human();\n        human.setMessage(\"Hi\");\n        human.setPlace(place);\n\n        // convert to json\n        String jsonString = new Genson().serialize(human);\n\n        System.out.println(\"json \" + jsonString); //print \"json {\"message\":\"Hi\",\"place\":{\"name\":\"World\"}}\"\n\n        // convert from json\n        Human newHuman =  new Genson().deserialize(jsonString, Human.class);\n        newHuman.say(); // print \"Hi , World!\"\n    }\n\n    private static class Human {\n        private String message;\n        private Place place;\n\n        String getMessage() {\n            return message;\n        }\n\n        void setMessage(String message) {\n            this.message = message;\n        }\n\n        Place getPlace() {\n            return place;\n        }\n\n        void setPlace(Place place) {\n            this.place = place;\n        }\n\n        void say() {\n            System.out.println();\n            System.out.println(getMessage() + \" , \" + getPlace().getName() + \"!\");\n        }\n\n        public Human() {\n        }\n\n        public Human(String message, Place place) {\n            this.message = message;\n            this.place = place;\n        }\n    }\n\n    private static class Place {\n        private String name;\n\n        String getName() {\n            return name;\n        }\n\n        void setName(String name) {\n            this.name = name;\n        }\n\n        public Place(String name) {\n            this.name = name;\n        }\n\n        public Place() {\n        }\n    }\n}\n"}
{"label": "main", "code": "package ig_json_parser;\n\nimport com.instagram.common.json.annotation.JsonField;\nimport com.instagram.common.json.annotation.JsonType;\n\n/**\n *  Ig Json Parser Hello World\n *\n  */\npublic class IgJsonParserHelloWorld {\n\n    public static void METHOD_NAME(String[] args) throws Exception {\n        // init class\n        Place place = new Place();\n        place.name = \"World\";\n\n        Human human = new Human();\n        human.message = \"Hi\";\n        human.place = place;\n\n        // convert to json\n        String jsonString = Human__JsonHelper.serializeToJson(human);\n        System.out.println(\"json \" + jsonString); //print \"json {\"place\":{\"name\":\"World\"},\"message\":\"Hi\"}\"\n\n        // convert from json\n        Human newHuman = Human__JsonHelper.parseFromJson(jsonString);\n        newHuman.say(); // print \"Hi , World!\"\n    }\n}\n"}
{"label": "say", "code": "package ig_json_parser;\n\nimport com.instagram.common.json.annotation.JsonField;\nimport com.instagram.common.json.annotation.JsonType;\n\n/**\n * Created by vedenin on 22.04.16.\n */\n@JsonType\npublic class Human {\n    @JsonField(fieldName=\"message\")\n    public String message;\n    @JsonField(fieldName=\"place\")\n    public Place place;\n\n\n\n    public void METHOD_NAME() {\n        System.out.println();\n        System.out.println(message + \" , \" + place.name + \"!\");\n    }\n}\n"}
{"label": "main", "code": "package json_simple;\n\n\nimport org.json.simple.JSONObject;\nimport org.json.simple.JSONValue;\n\n/**\n * Json-Java Hello World\n */\npublic class JsonSimpleHelloWorld {\n\n    public static void METHOD_NAME(String[] args) {\n        // convert Java to json\n        JSONObject root = new JSONObject();\n        root.put(\"message\", \"Hi\");\n        JSONObject place = new JSONObject();\n        place.put(\"name\", \"World!\");\n        root.put(\"place\", place);\n        String json = root.toJSONString();\n        System.out.println(json);\n\n        System.out.println();\n        // convert json to Java\n        JSONObject obj = (JSONObject) JSONValue.parse(json);\n        String message = (String) obj.get(\"message\");\n        place = (JSONObject) obj.get(\"place\");\n        String name = (String) place.get(\"name\");\n        System.out.println(message + \" \" + name);\n    }\n}\n"}
{"label": "main", "code": "package jackson.advanced;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.IOException;\n\n/**\n *  Json Path Hello World\n *\n  */\npublic class JsonPointerHelloWorld {\n\n    public  static void METHOD_NAME(String[] args) throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode root = mapper.readTree(json);\n        String author = root.at(\"/store/book/3/title\").asText();\n        System.out.println(author); // print [\"Hello, Middle-earth! \"]\n\n        System.out.println();\n        String jsonHiWorld = \"{\\\"message\\\":\\\"Hi\\\",\\\"place\\\":{\\\"name\\\":\\\"World!\\\"}}\\\"\";\n        String message = mapper.readTree(jsonHiWorld).at(\"/message\").asText();\n        String place = mapper.readTree(jsonHiWorld).at(\"/place/name\").asText();\n        System.out.println(message + \" \" + place); // print \"Hi World!\"\n\n    }\n\n    private final static String json = \"{\\n\" +\n            \"    \\\"store\\\": {\\n\" +\n            \"        \\\"book\\\": [\\n\" +\n            \"            {\\n\" +\n            \"                \\\"category\\\": \\\"reference\\\",\\n\" +\n            \"                \\\"author\\\": \\\"Nigel Rees\\\",\\n\" +\n            \"                \\\"title\\\": \\\"Sayings of the Century\\\",\\n\" +\n            \"                \\\"price\\\": 8.95\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"                \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"                \\\"author\\\": \\\"Evelyn Waugh\\\",\\n\" +\n            \"                \\\"title\\\": \\\"Sword of Honour\\\",\\n\" +\n            \"                \\\"price\\\": 12.99\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"                \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"                \\\"author\\\": \\\"Herman Melville\\\",\\n\" +\n            \"                \\\"title\\\": \\\"Moby Dick\\\",\\n\" +\n            \"                \\\"isbn\\\": \\\"0-553-21311-3\\\",\\n\" +\n            \"                \\\"price\\\": 8.99\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"                \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"                \\\"author\\\": \\\"J. R. R. Tolkien\\\",\\n\" +\n            \"                \\\"title\\\": \\\"Hello, Middle-earth! \\\",\\n\" +\n            \"                \\\"isbn\\\": \\\"0-395-19395-8\\\",\\n\" +\n            \"                \\\"price\\\": 22.99\\n\" +\n            \"            }\\n\" +\n            \"        ],\\n\" +\n            \"        \\\"bicycle\\\": {\\n\" +\n            \"            \\\"color\\\": \\\"red\\\",\\n\" +\n            \"            \\\"price\\\": 19.95\\n\" +\n            \"        }\\n\" +\n            \"    },\\n\" +\n            \"    \\\"expensive\\\": 10\\n\" +\n            \"}\";\n}\n"}
{"label": "main", "code": "package jackson.advanced;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n/**\n * Example of TreeModel (write and read)\n *\n * Of 3 major processing modes that Jackson supports, Tree Model may be most familiar to developers with experience using XML\n * as the main data/transfer format. At conceptual level it has many similarities to DOM XML tree model; although there are\n * also many differences due to structural and semantic differences between JSON and XML.\n *\n * Created by vvedenin on 4/24/2016.\n */\npublic class TreeModel {\n    public static void METHOD_NAME(String[] args) throws IOException {\n        System.out.print(\"readJson: \");\n        readJson();\n        System.out.println();\n        System.out.print(\"writeJson: \");\n        writeJson();\n    }\n\n    /**\n     *  Example to readJson using TreeModel\n     */\n    private static void readJson() throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode rootNode = mapper.readValue(\"{\\\"message\\\":\\\"Hi\\\",\\\"place\\\":{\\\"name\\\":\\\"World!\\\"}}\", JsonNode.class);\n        String message = rootNode.get(\"message\").asText(); // get property message\n        JsonNode childNode =  rootNode.get(\"place\"); // get object Place\n        String place = childNode.get(\"name\").asText(); // get property name\n        System.out.println(message + \" \" + place); // print \"Hi World!\"\n    }\n\n\n    /**\n     * Example to writeJson using TreeModel\n     */\n    private static void writeJson() throws IOException {\n        OutputStream outputStream = new ByteArrayOutputStream();\n\n        ObjectMapper mapper = new ObjectMapper();\n        ObjectNode rootNode = mapper.createObjectNode();\n        rootNode.put(\"message\", \"Hi\");\n        ObjectNode childNode = rootNode.putObject(\"place\");\n        childNode.put(\"name\", \"World!\");\n        mapper.writeValue(outputStream, childNode);\n\n        System.out.println(outputStream.toString()); // print \"{\"message\":\"Hi\",\"place\":{\"name\":\"World!\"}}\"\n    }\n}\n"}
{"label": "main", "code": "package jackson.advanced;\n\nimport com.fasterxml.jackson.core.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport static com.fasterxml.jackson.core.JsonToken.VALUE_STRING;\n\n/**\n * Example of StreamingAPI (write and read)\n *\n * Of 3 major processing modes that Jackson supports, Streaming Processing (also known as Incremental Processing) is the most efficient way to\n * process JSON content. It has the lowest memory and processing overhead, and can often match performance of many binary data formats available\n * on Java platform.\n *\n * Created by vvedenin on 4/24/2016.\n */\npublic class StreamingAPI {\n    public static void METHOD_NAME(String[] args) throws IOException {\n        System.out.print(\"readJson: \");\n        readJson();\n        System.out.println();\n        System.out.print(\"writeJson: \");\n        writeJson();\n    }\n\n    /**\n     *  Example to readJson using StreamingAPI\n     */\n    private static void readJson() throws IOException {\n        JsonFactory jsonFactory = new JsonFactory();\n        JsonParser jsonParser = jsonFactory.createParser(\"{\\\"message\\\":\\\"Hi\\\",\\\"place\\\":{\\\"name\\\":\\\"World!\\\"}}\");\n        JsonToken jsonToken = jsonParser.nextToken();\n        while(jsonParser.hasCurrentToken()) {\n            if(jsonToken == VALUE_STRING) {\n                System.out.print(jsonParser.getText() + \" \"); // print \"Hi World!\"\n            }\n            jsonToken = jsonParser.nextToken();\n        }\n        System.out.println();\n    }\n\n    /**\n     * Example to writeJson using StreamingAPI\n     */\n    private static void writeJson() throws IOException {\n        JsonFactory jsonFactory = new JsonFactory();\n        OutputStream outputStream = new ByteArrayOutputStream();\n        JsonGenerator jsonGenerator = jsonFactory.createGenerator(outputStream, JsonEncoding.UTF8); // or Stream, Reader\n        jsonGenerator.writeStartObject();\n        jsonGenerator.writeStringField(\"message\", \"Hi\");\n        jsonGenerator.writeFieldName(\"place\");\n        jsonGenerator.writeStartObject();\n        jsonGenerator.writeStringField(\"name\", \"World!\");\n        jsonGenerator.writeEndObject();\n        jsonGenerator.writeEndObject();\n        jsonGenerator.close();\n        System.out.println(outputStream.toString()); // print \"{\"message\":\"Hi\",\"place\":{\"name\":\"World!\"}}\"\n    }\n}\n"}
{"label": "main", "code": "package jackson;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.IOException;\n\n/**\n *  Jackson Hello World\n *\n  */\npublic class JacksonHelloWorld {\n\n    public static void METHOD_NAME(String[] args) throws IOException {\n        // init class\n        Place place = new Place();\n        place.setName(\"World\");\n\n        Human human = new Human();\n        human.setMessage(\"Hi\");\n        human.setPlace(place);\n\n        // convert to json\n        ObjectMapper mapper = new ObjectMapper();\n        String jsonString = mapper.writeValueAsString(human);\n        System.out.println(\"json \" + jsonString); // print \"json {\"message\":\"Hi\",\"place\":{\"name\":\"World\"}}\"\n\n        // convert from json\n        Human newHuman = mapper.readValue(jsonString, Human.class);\n        newHuman.say(); // print \"Hi , World!\"\n    }\n\n    private static class Human {\n        private String message;\n        private Place place;\n\n        public String getMessage() {\n            return message;\n        }\n\n        public void setMessage(String message) {\n            this.message = message;\n        }\n\n        public Place getPlace() {\n            return place;\n        }\n\n        public void setPlace(Place place) {\n            this.place = place;\n        }\n\n        public void say() {\n            System.out.println();\n            System.out.println(getMessage() + \" , \" + getPlace().getName() + \"!\");\n        }\n    }\n\n    private static class Place {\n        private String name;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n    }\n}\n"}
{"label": "main", "code": "package json_java;\n\nimport org.json.JSONObject;\n\n/**\n *  Json-Java Hello World\n *\n  */\npublic class JsonJavaHelloWorld {\n\n    public static void METHOD_NAME(String[] args) {\n        // convert Java to json\n        JSONObject root = new JSONObject();\n        root.put(\"message\", \"Hi\");\n        JSONObject place = new JSONObject();\n        place.put(\"name\", \"World!\");\n        root.put(\"place\", place);\n        String json = root.toString();\n        System.out.println(json);\n\n        System.out.println();\n        // convert json to Java\n        JSONObject jsonObject = new JSONObject(json);\n        String message = jsonObject.getString(\"message\");\n        String name = jsonObject.getJSONObject(\"place\").getString(\"name\");\n        System.out.println(message + \" \" + name);\n    }\n}\n"}
{"label": "main", "code": "package json_path;\n\nimport com.jayway.jsonpath.Configuration;\nimport com.jayway.jsonpath.JsonPath;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n *  Json Path Hello World\n *\n  */\npublic class JsonPathHelloWorld {\n\n    public  static void METHOD_NAME(String[] args) {\n        List<String> authors = JsonPath.read(json, \"$.store.book[*].author\");\n        System.out.println(\"authors: \" + authors); // print [\"Nigel Rees\",\"Evelyn Waugh\",\"Herman Melville\",\"J. R. R. Tolkien\"]\n\n        List<Map<String, Object>> expensiveBooks = JsonPath\n                .using(Configuration.defaultConfiguration())\n                .parse(json)\n                .read(\"$.store.book[?(@.price > 22)].title\", List.class);\n\n        System.out.println(expensiveBooks); // print [\"Hello, Middle-earth! \"]\n\n        System.out.println();\n        String jsonHiWorld = \"{\\\"message\\\":\\\"Hi\\\",\\\"place\\\":{\\\"name\\\":\\\"World!\\\"}}\\\"\";\n        String message = JsonPath.read(jsonHiWorld, \"$.message\");\n        String place = JsonPath.read(jsonHiWorld, \"$.place.name\");\n        System.out.println(message + \" \" + place); // print \"Hi World!\"\n\n    }\n\n    private final static String json = \"{\\n\" +\n            \"    \\\"store\\\": {\\n\" +\n            \"        \\\"book\\\": [\\n\" +\n            \"            {\\n\" +\n            \"                \\\"category\\\": \\\"reference\\\",\\n\" +\n            \"                \\\"author\\\": \\\"Nigel Rees\\\",\\n\" +\n            \"                \\\"title\\\": \\\"Sayings of the Century\\\",\\n\" +\n            \"                \\\"price\\\": 8.95\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"                \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"                \\\"author\\\": \\\"Evelyn Waugh\\\",\\n\" +\n            \"                \\\"title\\\": \\\"Sword of Honour\\\",\\n\" +\n            \"                \\\"price\\\": 12.99\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"                \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"                \\\"author\\\": \\\"Herman Melville\\\",\\n\" +\n            \"                \\\"title\\\": \\\"Moby Dick\\\",\\n\" +\n            \"                \\\"isbn\\\": \\\"0-553-21311-3\\\",\\n\" +\n            \"                \\\"price\\\": 8.99\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"                \\\"category\\\": \\\"fiction\\\",\\n\" +\n            \"                \\\"author\\\": \\\"J. R. R. Tolkien\\\",\\n\" +\n            \"                \\\"title\\\": \\\"Hello, Middle-earth! \\\",\\n\" +\n            \"                \\\"isbn\\\": \\\"0-395-19395-8\\\",\\n\" +\n            \"                \\\"price\\\": 22.99\\n\" +\n            \"            }\\n\" +\n            \"        ],\\n\" +\n            \"        \\\"bicycle\\\": {\\n\" +\n            \"            \\\"color\\\": \\\"red\\\",\\n\" +\n            \"            \\\"price\\\": 19.95\\n\" +\n            \"        }\\n\" +\n            \"    },\\n\" +\n            \"    \\\"expensive\\\": 10\\n\" +\n            \"}\";\n}\n"}
{"label": "main", "code": "import smile.data.AttributeDataset;\nimport smile.data.Datum;\nimport smile.data.parser.ArffParser;\n\nimport java.util.Arrays;\n\n/**\n * Created by vedenin on 09.04.16.\n */\npublic class SmileHelloWorld {\n\n    public static void METHOD_NAME(String[] args) throws Exception {\n        SmileHelloWorld cls = new SmileHelloWorld();\n        cls.LoadArff();\n    }\n\n    private void LoadArff() throws Exception {\n        ArffParser arffParser = new ArffParser();\n        arffParser.setResponseIndex(4);\n        AttributeDataset weather = arffParser.parse(this.getClass().getResourceAsStream(\"weather.nominal.arff\"));\n        println(\"name\" + weather.getName());\n        println(\"responce \" + weather.response());\n        println(\"attributes = \" + Arrays.toString(weather.attributes()));\n        println(\"Data: \");\n        println(\"          x          :  y  : weight\");\n        weather.forEach((x) -> println(Arrays.toString(x.x) + \" : \" + x.y + \" : \" + x.weight));\n    }\n\n    private static void println(String text) {\n        System.out.println(text);\n    }\n}\n"}
{"label": "to|sell", "code": "/**\n * Calculate end cost on {@link Product}.\n * Performs operations with {@link Product} and {@link Client}.\n */\nclass Cashier {\n    /**\n     * Performs sale {@link Product}.\n     * If {@link Client} cant buy {@link Product} report error in {@link Client}.\n     *\n     * @param client {@link Client} who want buy {@link Product}.\n     * @param product {@link Product} which want buy {@link Client}.\n     */\n     void METHOD_NAME(Client client, Product product) {\n        int cost = product.getCost();\n        if (checkBalanceClient(client, cost)) {\n            client.withdraw(cost);\n            client.addProduct(product);\n        } else {\n            client.addCodeError(CodeError.NOT_ENOUGH_FUNDS_BALANCE);\n            System.out.println(\"toSell: Failed NOT_ENOUGH_FUNDS_BALANCE\");\n        }\n    }\n\n    /**\n     * Check paying capacity {@link Client}.\n     *\n     * @return false if {@link Client} cant buy {@link Product}.\n     */\n    private boolean checkBalanceClient(Client client, int cost) {\n        return client.haveAmountOnBalance(cost);\n    }\n\n}\n"}
{"label": "get|name", "code": "/**\n * This thing which sells store.\n */\nclass Product {\n    private final String name;\n    private final int cost;\n\n    Product(String name, int cost) {\n        this.name = name;\n        this.cost = cost;\n    }\n\n    String METHOD_NAME() {\n        return name;\n    }\n\n    int getCost() {\n        return cost;\n    }\n\n    @Override\n    public String toString() {\n        return \"Product{\" +\n                \"name='\" + name + '\\'' +\n                \", cost=\" + cost +\n                '}';\n    }\n}\n"}
{"label": "have|amount|on|balance", "code": "import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Need for operations to buy.\n * Performs operations over balance.\n * If failed operations buy add {@link CodeError} in method {@link Client#addCodeError(CodeError)}.\n */\nclass Client {\n    private int balance;\n    private List<CodeError> codeErrors = new ArrayList<>();\n    private List<Product> products = new ArrayList<>();\n\n    Client(int balance) {\n        this.balance = balance;\n    }\n\n    boolean METHOD_NAME(int amount) {\n        return (balance >= amount);\n    }\n\n    int getBalance() {\n        return balance;\n    }\n\n    void withdraw(int amount) {\n        balance -= amount;\n    }\n\n    void addCodeError(CodeError codeError) {\n        codeErrors.add(codeError);\n    }\n\n    List<CodeError> getCodeErrors() {\n        return codeErrors;\n    }\n\n    void addProduct(Product product) {\n        products.add(product);\n    }\n\n    List<Product> getProducts() {\n        return products;\n    }\n\n    @Override\n    public String toString() {\n        return \"Client{\" +\n                \"balance=\" + balance +\n                \", codeErrors=\" + codeErrors +\n                \", products=\" + products +\n                '}';\n    }\n}\n"}
{"label": "main", "code": "\n\n/**\n * This example to using Mockito for testing code. Example is in CashierTest.\n */\nclass METHOD_NAME {\n    public static void METHOD_NAME(String[] args) {\n        sellMilkFailed();\n    }\n\n    /**\n     * This example {@link Client} to buy {@link Product}\n     */\n    private static void sellMilk() {\n        Product milk = new Product(\"Milk\",150);\n        Client client = new Client(300);\n        Cashier cashier = new Cashier();\n\n        System.out.println(client.getProducts()); //[]\n        cashier.toSell(client,milk);\n        System.out.println(client.getProducts()); //[Product{name='Milk', cost=150}]\n    }\n\n    /**\n     * This example {@link Client} can't to buy {@link Product} because not enough funds balance.\n     */\n    private static void sellMilkFailed() {\n        Product milk = new Product(\"Milk\",150);\n        Client client = new Client(100);\n        Cashier cashier = new Cashier();\n\n        System.out.println(client.getProducts()); //[]\n        cashier.toSell(client,milk);\n        System.out.println(client.getProducts()); //[]\n        System.out.println(client.getCodeErrors()); //[NOT_ENOUGH_FUNDS_BALANCE]\n    }\n}\n"}
{"label": "set|up", "code": "import org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\n\nimport static org.mockito.Mockito.when;\n\n/**\n * This example create Mock with use Annotation.\n */\n@RunWith(MockitoJUnitRunner.class)\npublic class CreateMockWithAnnotation {\n\n    private static int costMilk = 10;\n    @Mock\n    private Client client;\n    @Mock\n    private Product milk;\n\n    @Before\n    public void METHOD_NAME() throws Exception {\n        settingMockClient(true);\n        settingMockMilk();\n    }\n\n    @Test\n    public void test() throws Exception {\n        System.out.println(client);\n        System.out.println(milk);\n    }\n\n    @SuppressWarnings(\"SameParameterValue\")\n    private void settingMockClient(boolean haveAmountOnBalance) {\n        when(client.haveAmountOnBalance(costMilk)).thenReturn(haveAmountOnBalance);\n    }\n\n    private void settingMockMilk() {\n        when(milk.getName()).thenReturn(\"Milk\");\n        when(milk.getCost()).thenReturn(costMilk);\n    }\n}\n"}
{"label": "test|get|balance", "code": "import org.junit.Test;\n\nimport java.util.List;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.*;\n\npublic class ClientTest {\n\n    private Client client = new Client(100);\n\n    @Test\n    public void METHOD_NAME() throws Exception {\n        assertThat(client.getBalance(),is(100));\n    }\n\n    @Test\n    public void testHaveAmountOnBalance() throws Exception {\n        assertFalse(client.haveAmountOnBalance(101));\n        assertTrue(client.haveAmountOnBalance(100));\n        assertTrue(client.haveAmountOnBalance(99));\n    }\n\n    @Test\n    public void testWithdraw() throws Exception {\n        client.withdraw(30);\n        assertThat(client.getBalance(),is(70));\n    }\n\n    @Test\n    public void testAddCodeError() throws Exception {\n        final CodeError error = CodeError.NOT_ENOUGH_FUNDS_BALANCE;\n        client.addCodeError(error);\n        List<CodeError> codeErrors = client.getCodeErrors();\n        assertThat(codeErrors.size(),is(1));\n        assertThat(codeErrors.get(0),is(error));\n    }\n\n    @Test\n    public void testAddProduct() throws Exception {\n        Product milk = new Product(\"Milk\", 50);\n        client.addProduct(milk);\n        List<Product> products = client.getProducts();\n        assertThat(products.size(),is(1));\n        assertThat(products.get(0),is(milk));\n    }\n}"}
{"label": "create|mock|milk", "code": "import org.junit.Test;\n\nimport static org.mockito.Mockito.*;\n\n/**\n * This example about how to test method call using Mockito.\n */\npublic class CashierTest {\n\n    private final static int costMilk = 50;\n    private Cashier cashier = new Cashier();\n    /**\n     * Here we create Mock for testing.\n     * We test Cashier not Product and Client. That is why we will replace them on Mock.\n     * For create Mock I use my method {@link CashierTest#createMockMilk()}\n     * and {@link CashierTest#createMockClient(boolean)}.\n     * You can create Mock with use Annotation {@link org.mockito.Mock}. Example this {@link CreateMockWithAnnotation}.\n     */\n    private Product milk = METHOD_NAME();\n    private Client client = createMockClient(true);\n\n    private static Product METHOD_NAME() {\n        //So we get mock.\n        Product milk = mock(Product.class);\n        //Next, setting mock.\n        //Here we say when the milk will call getName() then return \"Milk\".\n        when(milk.getName()).thenReturn(\"Milk\");\n        //Here we say when the milk will call getCost() then return value is costMilk.\n        when(milk.getCost()).thenReturn(costMilk);\n        return milk;\n    }\n\n    private static Client createMockClient(boolean haveAmountOnBalance) {\n        Client client = mock(Client.class);\n        /*\n        Here we say when the client will call haveAmountOnBalance()\n        whit param value is costMilk then return value is haveAmountOnBalance.\n         */\n        when(client.haveAmountOnBalance(costMilk)).thenReturn(haveAmountOnBalance);\n        return client;\n    }\n\n    /**\n     * Here we to test methods call for {@link Client}.\n     */\n    @Test\n    public void testToSellCallMethodInClient() throws Exception {\n        cashier.toSell(client, milk);\n\n        /*\n        Next, we check call methods in client.\n        Here we say check call method in client haveAmountOnBalance() whit param value is costMilk.\n        If method not call or call two or more times, test failed.\n        */\n        verify(client).haveAmountOnBalance(costMilk);\n        verify(client).withdraw(costMilk);\n        verify(client).addProduct(milk);\n    }\n\n    /**\n     * This we test method {@link Product#getCost()} to call only.\n     */\n    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test\n    public void testToSellCallMethodInProduct() throws Exception {\n        cashier.toSell(client, milk);\n        /*\n        Also we cen check how many times use method.\n        Here we say milk most call only one method getCost(). Otherwise test failed.\n         */\n        verify(milk, only()).getCost();\n    }\n\n    /**\n     * Here we test behavior if not enough funds balance.\n     */\n    @Test\n    public void ifNotEnoughFundsBalance() throws Exception {\n        Client clientPoor = createMockClient(false);\n        cashier.toSell(clientPoor, milk);\n\n        verify(clientPoor).haveAmountOnBalance(costMilk);\n        verify(clientPoor).addCodeError(CodeError.NOT_ENOUGH_FUNDS_BALANCE);\n\n        verify(client, never()).withdraw(costMilk);\n        verify(client, never()).addProduct(milk);\n    }\n}"}
{"label": "eat", "code": "/**\n *  Cucumber Hello World\n *\n *  *  To run using \"maven test\"\n */\npublic class Belly {\n    public void METHOD_NAME(int cukes) {\n        for(int i=0; i< cukes; i++ ){\n            System.out.println(\"I'm eating \" + (i + 1) + \" cuke\");\n        }\n    }\n}\n"}
{"label": "init|https|download", "code": "import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport java.nio.charset.Charset;\n\n\n/**\n * JSoup Hello World\n *\n * Created by vedenin on 16.01.16.\n */\npublic class URLDownloadTests {\n    private final static String USER_AGENT = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36\";\n\n    private static void METHOD_NAME() throws Exception {\n        // Create a new trust manager that trust all certificates\n        TrustManager[] trustAllCerts = new TrustManager[]{\n                new X509TrustManager() {\n                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                        return null;\n                    }\n\n                    public void checkClientTrusted(\n                            java.security.cert.X509Certificate[] certs, String authType) {\n                    }\n\n                    public void checkServerTrusted(\n                            java.security.cert.X509Certificate[] certs, String authType) {\n                    }\n                }\n        };\n\n        // Activate the new trust manager\n        try {\n            SSLContext sc = SSLContext.getInstance(\"SSL\");\n            sc.init(null, trustAllCerts, new java.security.SecureRandom());\n            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n        } catch (Exception e) {\n            System.out.print(e.getMessage());\n        }\n    }\n\n    private static String testJsoup(String url) throws Exception {\n        return Jsoup.connect(url).userAgent(USER_AGENT).cookie(\"auth\", \"token\")\n                .timeout(30000).get().html();\n    }\n\n    private static String testJsoupHeadlines(String url) throws Exception {\n        Document doc = Jsoup.connect(url).userAgent(USER_AGENT).cookie(\"auth\", \"token\")\n                .timeout(30000).get();\n        Elements newsHeadlines = doc.select(\"#mp-itn b a\");\n        return newsHeadlines.html();\n    }\n\n    private static void testHtmlParser(String url) throws Exception {\n        Document doc = Jsoup.connect(url).userAgent(USER_AGENT).cookie(\"auth\", \"token\")\n                .timeout(30000).get();\n        Charset charset = doc.charset();\n        System.out.println(\"charset = \" + charset);\n        System.out.println(\"location = \" + doc.location());\n        System.out.println(\"nodeName = \" + doc.nodeName());\n        Document.OutputSettings outputSettings = doc.outputSettings();\n        System.out.println(\"charset = \" + outputSettings.charset());\n        System.out.println(\"indentAmount = \" + outputSettings.indentAmount());\n        System.out.println(\"syntax = \" + outputSettings.syntax());\n        System.out.println(\"escapeMode = \" + outputSettings.escapeMode());\n        System.out.println(\"prettyPrint = \" + outputSettings.prettyPrint());\n        System.out.println(\"outline = \" + outputSettings.outline());\n\n        System.out.println(\"title = \" + doc.title());\n        System.out.println(\"baseUri = \" + doc.baseUri());\n\n        Element head = doc.head();\n        Elements children = head.children();\n        for(Element child: children) {\n            System.out.print(child.tag().getName() + \" : \");\n            System.out.println(child);\n        }\n        printElements(doc.body().children());\n    }\n\n    private static void printElements(Elements children) {\n        for(Element child: children) {\n            if(!child.text().isEmpty()) {\n                System.out.print(child.tag().getName() + \" : \");\n                System.out.println(child.text());\n            }\n            printElements(child.children());\n        }\n    }\n\n    public static void main(String[] s) throws Exception {\n        METHOD_NAME();\n\n        String wikipedia = testJsoup(\"http://en.wikipedia.org/\");\n        System.out.println(wikipedia.length()); // print something about 70694\n        String headlines = testJsoupHeadlines(\"http://en.wikipedia.org/\");\n        System.out.println(headlines);\n        String stackoverflow = testJsoup(\"http://stackoverflow.com/\");\n        System.out.println(stackoverflow.length()); // print something about 70694\n        testHtmlParser(\"http://stackoverflow.com/\");\n    }\n}\n"}
{"label": "init|https|download", "code": "package com.github.vedenin.url_parser;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * JSoup Hello World\n *\n * Created by vedenin on 07.04.16.\n */\npublic class GithubDownLoadTests {\n    private final static String USER_AGENT = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36\";\n\n    private static void METHOD_NAME() throws Exception {\n        // Create a new trust manager that trust all certificates\n        TrustManager[] trustAllCerts = new TrustManager[]{\n                new X509TrustManager() {\n                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                        return null;\n                    }\n\n                    public void checkClientTrusted(\n                            java.security.cert.X509Certificate[] certs, String authType) {\n                    }\n\n                    public void checkServerTrusted(\n                            java.security.cert.X509Certificate[] certs, String authType) {\n                    }\n                }\n        };\n\n        // Activate the new trust manager\n        try {\n            SSLContext sc = SSLContext.getInstance(\"SSL\");\n            sc.init(null, trustAllCerts, new java.security.SecureRandom());\n            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n        } catch (Exception e) {\n            System.out.print(e.getMessage());\n        }\n    }\n\n    private static void testHtmlParser(String url) throws Exception {\n        Document doc = Jsoup.connect(url).userAgent(USER_AGENT).cookie(\"auth\", \"token\")\n                .timeout(30000).get();\n        Elements div = doc.select(\"#readme\");\n\n        //printElements(div);\n        work(div);\n    }\n\n    private static void printElements(Elements children) {\n        for(Element child: children) {\n            if(!child.text().isEmpty()) {\n                System.out.print(child.tag().getName() + \" : \");\n                System.out.println(child.text());\n            }\n            printElements(child.children());\n        }\n    }\n\n    public static void main(String[] s) throws Exception {\n        METHOD_NAME();\n        testHtmlParser(\"https://github.com/Vedenin/useful-java-links/blob/master/readme.md\");\n    }\n\n\n    private static final Tag H1 = Tag.valueOf(\"h1\");\n    private static final Tag H2 = Tag.valueOf(\"h2\");\n    private static final Tag H3 = Tag.valueOf(\"h3\");\n    private static final Tag H4 = Tag.valueOf(\"h4\");\n    private static final Tag H5 = Tag.valueOf(\"h5\");\n    private static final Tag H6 = Tag.valueOf(\"h6\");\n\n\n    private static boolean isHeader(Tag tag) {\n        return H1.equals(tag) || H2.equals(tag) || H3.equals(tag) || H4.equals(tag) || H5.equals(tag) || H6.equals(tag);\n    }\n    private static List<LinkContainer> work(Elements elements) {\n        List<LinkContainer> result = new ArrayList<>(elements.size());\n        String currentCategory = null;\n        for(Element element: elements) {\n            Tag tag = element.tag();\n            if(isHeader(tag)) {\n                currentCategory = element.text();\n                System.out.println(currentCategory);\n            }\n            work(element.children());\n        }\n        return result;\n    }\n\n    private static class LinkContainer {\n        private String category;\n        private String name;\n        private String url;\n        private String description;\n        private String star;\n        private String stackOverflow;\n        private String license;\n        private String licenseUrl;\n        private String site;\n\n        @Override\n        public String toString() {\n            return \"{\" +\n                    \"category='\" + category + '\\'' +\n                    \", name='\" + name + '\\'' +\n                    \", url='\" + url + '\\'' +\n                    \", description='\" + description + '\\'' +\n                    \", star='\" + star + '\\'' +\n                    \", stackOverflow='\" + stackOverflow + '\\'' +\n                    \", license='\" + license + '\\'' +\n                    \", licenseUrl='\" + licenseUrl + '\\'' +\n                    \", site='\" + site + '\\'' +\n                    '}';\n        }\n    }\n}\n"}
{"label": "count|matches", "code": "package other_examples;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.MICROSECONDS)\n@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n@Fork(1)\n@State(Scope.Benchmark)\npublic class FindCountOfOccurrencesBenchmark {\n    public static final String testString = \"a.b.c.d\";\n\n    @Benchmark\n    public int METHOD_NAME() {\n        // Using Apache Commons\n        return StringUtils.METHOD_NAME(testString, \".\");\n    }\n\n\n    @Benchmark\n    public int countOccurrencesOf() {\n        // Using Spring Framework's\n        return org.springframework.util.StringUtils.countOccurrencesOf(testString, \".\");\n    }\n\n    @Benchmark\n    public int replace() {\n        // Using replace\n        return testString.length() - testString.replace(\".\", \"\").length();\n    }\n\n    @Benchmark\n    public int replaceAll1() {\n        // Using replaceAll case 1\n        return testString.replaceAll(\"[^.]\", \"\").length();\n    }\n\n    @Benchmark\n    public int replaceAll2() {\n        // Using replaceAll case 2\n        return testString.length() - testString.replaceAll(\"\\\\.\", \"\").length();\n    }\n\n    @Benchmark\n    public int split() {\n        // Using split\n        return testString.split(\"\\\\.\",-1).length-1;\n    }\n\n    @Benchmark\n    public long java8() {\n        // Using Java8\n        return testString.chars().filter(ch -> ch =='.').count();\n    }\n\n    @Benchmark\n    public long java8_1() {\n        // Using Java8 (case 2)\n        return testString.codePoints().filter(ch -> ch == '.').count();\n    }\n\n    @Benchmark\n    public int stringTokenizer() {\n        // Using StringTokenizer\n        return new StringTokenizer(\" \" + testString + \" \", \".\").countTokens() - 1;\n    }\n\n    public static void main(String[] args) throws RunnerException {\n        Options opt = new OptionsBuilder()\n                .include(FindCountOfOccurrencesBenchmark.class.getSimpleName())\n                .build();\n\n        new Runner(opt).run();\n    }\n}\n"}
{"label": "apache|to|input|stream", "code": "package other_examples;\n\nimport com.google.common.io.CharSource;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.input.ReaderInputStream;\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Created by vvedenin on 2/15/2016.\n */\n@State(Scope.Benchmark)\npublic class ConvertBigStringToInputStreamBenchmark {\n    private static String test1;\n\n    /*             1. Using ToInputStream of Apache Utils */\n    @Benchmark\n    public InputStream METHOD_NAME() throws IOException {\n        return IOUtils.toInputStream(test1, StandardCharsets.UTF_8);\n    }\n\n    /*             2. Using JDK */\n    @Benchmark\n    public InputStream jdkByteArrayInputStream() throws IOException {\n        return new ByteArrayInputStream(test1.getBytes(StandardCharsets.UTF_8));\n    }\n\n    /*             3. Using ReaderInputStream of Apache Utils */\n    @Benchmark\n    public InputStream apacheReaderInputStream() throws IOException {\n        return new ReaderInputStream(CharSource.wrap(test1).openStream());\n    }\n\n    /*             4. Using Apache Utils and InputStreamReader*/\n    @Benchmark\n    public InputStream apacheInputStreamReader() throws IOException {\n        return IOUtils.toInputStream(test1);\n    }\n\n    @TearDown(Level.Iteration)\n    public void tearDown() {\n        String test =  \"test184768612876481276487612876417826487216478216784621784672816478216784621784621786478216478216784261784621782178647281647821647821697421687126784621874621786478216478216874\";\n        StringBuilder builder = new StringBuilder(test);\n        for(int i = 0; i< 1000; i++) {\n            builder.append(test);\n        }\n        test1 = builder.toString();\n        System.out.println(test1.length());\n    }\n\n    public static void main(String[] args) throws RunnerException {\n        Options opt = new OptionsBuilder()\n                .include(ConvertStringToInputStreamBenchmark.class.getSimpleName())\n                .timeUnit(TimeUnit.MICROSECONDS)\n                .warmupIterations(5)\n                .measurementIterations(50)\n                .forks(1)\n                .mode(Mode.AverageTime)\n                .build();\n\n        new Runner(opt).run();\n    }\n}\n"}
{"label": "apache|to|input|stream", "code": "package other_examples;\n\nimport com.google.common.io.CharSource;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.io.input.ReaderInputStream;\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Created by vvedenin on 2/15/2016.\n */\n@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.MICROSECONDS)\n@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n@Fork(1)\n@State(Scope.Benchmark)\npublic class ConvertStringToInputStreamBenchmark {\n    private static final String test1 = \"test184768612876481276487612876417826487216478216784621784672816478216784621784621786478216478216784261784621782178647281647821647821697421687126784621874621786478216478216874\";\n\n    /*             1. Using ToInputStream of Apache Utils */\n    @Benchmark\n    public InputStream METHOD_NAME() throws IOException {\n        return IOUtils.toInputStream(test1, StandardCharsets.UTF_8);\n    }\n\n    /*             2. Using JDK */\n    @Benchmark\n    public InputStream jdkByteArrayInputStream() throws IOException {\n        return new ByteArrayInputStream(test1.getBytes(StandardCharsets.UTF_8));\n    }\n\n    /*             3. Using ReaderInputStream of Apache Utils */\n    @Benchmark\n    public InputStream apacheReaderInputStream() throws IOException {\n        return new ReaderInputStream(CharSource.wrap(test1).openStream());\n    }\n\n    /*             4. Using Apache Utils and InputStreamReader*/\n    @Benchmark\n    public InputStream apacheInputStreamReader() throws IOException {\n        return IOUtils.toInputStream(test1);\n    }\n\n    public static void main(String[] args) throws RunnerException {\n        Options opt = new OptionsBuilder()\n                .include(ConvertStringToInputStreamBenchmark.class.getSimpleName())\n                .build();\n\n        new Runner(opt).run();\n    }\n\n}\n"}
{"label": "test|open|nlp", "code": "import opennlp.tools.sentdetect.SentenceDetectorME;\nimport opennlp.tools.sentdetect.SentenceModel;\nimport opennlp.tools.util.Span;\n\nimport java.io.InputStream;\nimport java.util.Arrays;\n\n/**\n * Hello World for OpenNLP\n *\n * Created by vedenin on 06.04.16.\n */\npublic class OpenNLPSentenceDetectors {\n    private static final String RESOURCES_EN_SENT_BIN = \"en-sent.bin\";\n\n    private String[] METHOD_NAME(String text) throws Exception {\n        try (InputStream modelIn = this.getClass().getResourceAsStream(RESOURCES_EN_SENT_BIN)) {\n            SentenceModel model = new SentenceModel(modelIn);\n            SentenceDetectorME sentenceDetector = new SentenceDetectorME(model);\n            return sentenceDetector.sentDetect(text);\n        }\n    }\n\n\n    private Span[] testOpenNLPPosition(String text) throws Exception {\n        try (InputStream modelIn = this.getClass().getResourceAsStream(RESOURCES_EN_SENT_BIN)) {\n            SentenceModel model = new SentenceModel(modelIn);\n            SentenceDetectorME sentenceDetector = new SentenceDetectorME(model);\n            return sentenceDetector.sentPosDetect(text);\n        }\n    }\n\n\n    public static void main(String[] strings) throws Exception {\n        String text = \"Hello World! 'But I don\u2019t want to go among mad people,' Alice remarked. \" +\n                \"'Oh, you can\u2019t help that,' said the Cat: 'we\u2019re all mad here. I\u2019m mad. You\u2019re mad.' \" +\n                \"'How do you know I\u2019m mad?' said Alice. \" +\n                \"'You must be,' said the Cat, 'or you wouldn\u2019t have come here.'\";\n\n        OpenNLPSentenceDetectors cls = new OpenNLPSentenceDetectors();\n        println(\"OpenNLP:\");\n        printArray(cls.METHOD_NAME(text));\n        println();\n        println(\"OpenNLP Positions:\");\n        printArray(cls.testOpenNLPPosition(text));\n    }\n\n    private static <T> void printArray(T[] array) {\n        Arrays.asList(array).stream().forEach(System.out::println);\n    }\n\n    private static <T> void println(T obj) {\n        System.out.println(obj);\n    }\n\n    private static void println() {\n        System.out.println();\n    }\n}\n"}
{"label": "test|stanford|core|nlp", "code": "import edu.stanford.nlp.ling.CoreAnnotations;\nimport edu.stanford.nlp.pipeline.Annotation;\nimport edu.stanford.nlp.pipeline.StanfordCoreNLP;\nimport edu.stanford.nlp.util.CoreMap;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Properties;\n\n/**\n * Hello World for StanfordCoreNLP\n *\n * Created by vedenin on 06.04.16.\n */\npublic class StanfordCoreNLPSentenceDetectors {\n    private static final String RESOURCES_EN_SENT_BIN = \"natural-language-processing/src/main/resources/en-sent.bin\";\n\n\n    private static String[] METHOD_NAME(String text) throws Exception {\n        StanfordCoreNLP coreNLP = getStanfordCoreNLP();\n        Annotation document = new Annotation(text);\n        coreNLP.annotate(document);\n\n        List<CoreMap> sentences = document.get(CoreAnnotations.SentencesAnnotation.class);\n        String[] result = new String[sentences.size()];\n        int i = 0;\n        for (CoreMap sentence : sentences) {\n            result[i] = sentence.toString();\n            i++;\n        }\n        return result;\n    }\n\n    public static void main(String[] strings) throws Exception {\n        String text = \"Hello World! 'But I don\u2019t want to go among mad people,' Alice remarked. \" +\n                \"'Oh, you can\u2019t help that,' said the Cat: 'we\u2019re all mad here. I\u2019m mad. You\u2019re mad.' \" +\n                \"'How do you know I\u2019m mad?' said Alice. \" +\n                \"'You must be,' said the Cat, 'or you wouldn\u2019t have come here.'\";\n\n\n        String[] sentences = METHOD_NAME(text);\n        println();\n        println(\"StanfordCoreNLP:\");\n        printArray(sentences);\n    }\n\n    private static <T> void printArray(T[] array) {\n        Arrays.asList(array).stream().forEach(System.out::println);\n    }\n\n    private static <T> void println(T obj) {\n        System.out.println(obj);\n    }\n\n    private static void println() {\n        System.out.println();\n    }\n\n    private static StanfordCoreNLP getStanfordCoreNLP(){\n        Properties props = new Properties();\n        props.setProperty(\"annotators\", \"tokenize, ssplit, pos, lemma, ner, parse, dcoref\");\n        return new StanfordCoreNLP(props);\n    }\n}\n"}
{"label": "do|test", "code": "import co.paralleluniverse.fibers.Fiber;\nimport co.paralleluniverse.fibers.SuspendExecution;\n\nimport java.util.concurrent.ExecutionException;\n\n/**\n * Simple HelloWorld using Fiber\n *\n *  To run using \"maven test\"\n *\n * Created by vvedenin on 4/11/2016.\n */\npublic class FiberHelloWorld {\n    public static Integer METHOD_NAME() throws ExecutionException, InterruptedException {\n        System.out.println(\"Hello world1!\");\n        Fiber<Integer> integerFiber = new Fiber<Integer>() {\n            @Override\n            protected Integer run() throws SuspendExecution, InterruptedException {\n                System.out.println(\"Hello world2!\");\n                return 10;\n            }\n        }.start();\n        System.out.println(\"Hello world3!\");\n        return integerFiber.get();\n    }\n}\n"}
{"label": "do|test", "code": "import co.paralleluniverse.fibers.Fiber;\nimport co.paralleluniverse.fibers.SuspendExecution;\n\nimport java.util.concurrent.ExecutionException;\n\n/**\n * Simple HelloWorld using Fiber and sleep\n *\n *  To run using \"maven test\"\n *\n * Created by vvedenin on 4/11/2016.\n */\npublic class FiberSleepHelloWorld {\n    public static Integer METHOD_NAME() throws ExecutionException, InterruptedException {\n        System.out.println(\"Hello world1!\");\n        Fiber<Integer> integerFiber = new Fiber<Integer>() {\n            @Override\n            protected Integer run() throws SuspendExecution, InterruptedException {\n                System.out.println(\"Hello world2!\");\n                Fiber.sleep(1000);\n                System.out.println(\"Hello world3!\");\n                return 2;\n            }\n        }.start();\n        System.out.println(\"Hello world4!\");\n        Integer result = integerFiber.get();\n        System.out.println(\"Hello world5!\");\n        return result;\n    }\n}\n"}
{"label": "do|test", "code": "import co.paralleluniverse.fibers.Fiber;\nimport co.paralleluniverse.fibers.SuspendExecution;\nimport co.paralleluniverse.strands.SuspendableCallable;\nimport co.paralleluniverse.strands.SuspendableRunnable;\nimport co.paralleluniverse.strands.channels.Channels;\nimport co.paralleluniverse.strands.channels.IntChannel;\n\n/**\n * HelloWorld using Fiber and Channel\n *\n *  To run using \"maven test\"\n *\n * Created by vvedenin on 4/11/2016.\n */\npublic class FibersAndChanelHelloWorld {\n\n    public static Integer METHOD_NAME() throws Exception {\n        final IntChannel fiber1ToFiber2 = Channels.newIntChannel(0); // Synchronizing channel (buffer = 0)\n        final IntChannel fiber2ToFiber1 = Channels.newIntChannel(0); // Synchronizing channel (buffer = 0)\n\n        Fiber<Integer> fiber1 = new Fiber<>(\"Fiber1\", new SuspendableCallable<Integer>() {\n            @Override\n            public Integer run() throws SuspendExecution, InterruptedException {\n                Fiber.sleep(1000);\n                fiber1ToFiber2.send(1);\n                Integer i1 = fiber2ToFiber1.receive();\n                System.out.println(\" Hello words \" + i1);\n                fiber1ToFiber2.send(9);\n                Integer i2 = fiber2ToFiber1.receive();\n                System.out.println(\" Hello words \" + i2);\n                fiber1ToFiber2.send(0);\n                return i2;\n            }\n        }).start();\n\n        Fiber<Void> fiber2 = new Fiber<Void>(\"Fiber2\", new SuspendableRunnable() { @Override public void run() throws SuspendExecution, InterruptedException {\n            Integer i;\n            i = fiber1ToFiber2.receive();\n            while(i != 0) {\n                fiber2ToFiber1.send(i + 1);\n                i = fiber1ToFiber2.receive();\n            }\n        } }).start();\n\n\n         fiber1.join();\n         fiber2.join();\n\n        return fiber1.get();\n\n    }\n}\n"}
{"label": "test", "code": "import org.junit.METHOD_NAME;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\n/**\n *  To run using \"maven test\"\n *\n * Created by vvedenin on 4/11/2016.\n */\npublic class HelloWordsTest {\n    @METHOD_NAME\n    public void METHOD_NAME() throws Exception {\n        System.out.println(\"FiberHelloWorld:\");\n        assertThat(FiberHelloWorld.doTest(), is(10));\n        System.out.println(\"FiberSleepHelloWorld:\");\n        assertThat(FiberSleepHelloWorld.doTest(), is(2));\n        System.out.println(\"FibersAndChanelHelloWorld:\");\n        assertThat(FibersAndChanelHelloWorld.doTest(), is(10));\n    }\n}\n"}
{"label": "send", "code": "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Constructor DI injection Hello World using Java annotation\n *\n * Created by vvedenin on 11/14/2015.\n */\npublic class SpringConstructorAutowired {\n    public static class Notifier {\n        private final NotificationService service;\n\n        @Autowired\n        public Notifier(NotificationService service) {\n            this.service = service;\n        }\n\n        public void METHOD_NAME(String message) {\n            service.METHOD_NAME(\"email: \" + message);\n        }\n    }\n\n    public static class EMailService implements NotificationService {\n        public void METHOD_NAME(String message) {\n            System.out.println(\"I send \" + message);\n        }\n    }\n\n    public interface NotificationService {\n        void METHOD_NAME(String message);\n    }\n\n    @Configuration\n    public static class DIConfiguration {\n        @Bean\n        public Notifier getNotifier(NotificationService service){\n            return new Notifier(service);\n        }\n\n        @Bean\n        public NotificationService getNotificationService(){\n            return new EMailService();\n        }\n    }\n\n    public static void main(String[] args)  throws Exception {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DIConfiguration.class);\n        Notifier notifier =  context.getBean(Notifier.class);\n        notifier.METHOD_NAME(\"Hello world!\"); // Print \"I send email: Hello world!\"\n    }\n}\n"}
{"label": "send", "code": "package jsr330;\n\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.inject.Inject;\n\n/**\n * Hello World using jsr330 annotation\n *\n * Created by vvedenin on 11/14/2015.\n */\npublic class SpringSimpleInject {\n    public static class Notifier {\n        private final NotificationService service;\n\n        @Inject\n        public Notifier(NotificationService service) {\n            this.service = service;\n        }\n\n        public void METHOD_NAME(String message) {\n            service.METHOD_NAME(\"email: \" + message);\n        }\n    }\n\n    public static class EMailService implements NotificationService {\n        public void METHOD_NAME(String message) {\n            System.out.println(\"I send \" + message);\n        }\n    }\n\n    public interface NotificationService {\n        void METHOD_NAME(String message);\n    }\n\n    @Configuration\n    public static class DIConfiguration {\n        @Bean\n        public Notifier getNotifier(NotificationService service){\n            return new Notifier(service);\n        }\n\n        @Bean\n        public NotificationService getNotificationService(){\n            return new EMailService();\n        }\n    }\n\n    public static void main(String[] args)  throws Exception {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DIConfiguration.class);\n        Notifier notifier =  context.getBean(Notifier.class);\n        notifier.METHOD_NAME(\"Hello world!\"); // Print \"I send email: Hello world!\"\n    }\n}\n"}
{"label": "set|service", "code": "package xml;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * Setter DI injection Hello World using XML config\n *\n * Created by vvedenin on 11/14/2015.\n */\npublic class XmlSetterAutowired {\n    public static class Notifier {\n        private NotificationService service;\n\n        @Autowired\n        public void METHOD_NAME(NotificationService service) {\n            this.service = service;\n        }\n\n        public void send(String message) {\n            service.send(\"email: \" + message);\n        }\n    }\n\n    public static class EMailService implements NotificationService {\n        public void send(String message) {\n            System.out.println(\"I send \" + message);\n        }\n    }\n\n    public interface NotificationService {\n        void send(String message);\n    }\n\n    public static void main(String[] args)  throws Exception {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n                \"fieldAutowired.xml\");\n        Notifier notifier =  context.getBean(Notifier.class);\n        notifier.send(\"Hello world!\"); // Print \"I send email: Hello world!\"\n    }\n}\n"}
{"label": "send", "code": "package xml.jsr330;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport javax.inject.Inject;\n\n/**\n * Hello World using jsr330 annotation and XML config\n *\n * Created by vvedenin on 11/14/2015.\n */\npublic class XmlConstructorInject {\n    public static class Notifier {\n        private final NotificationService service;\n\n        @Inject\n        public Notifier(NotificationService service) {\n            this.service = service;\n        }\n\n        public void METHOD_NAME(String message) {\n            service.METHOD_NAME(\"email: \" + message);\n        }\n    }\n\n    public static class EMailService implements NotificationService {\n        public void METHOD_NAME(String message) {\n            System.out.println(\"I send \" + message);\n        }\n    }\n\n    public interface NotificationService {\n        void METHOD_NAME(String message);\n    }\n\n    public static void main(String[] args)  throws Exception {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n                \"constructorInject.xml\");\n        Notifier notifier =  context.getBean(Notifier.class);\n        notifier.METHOD_NAME(\"Hello world!\"); // Print \"I send email: Hello world!\"\n    }\n}\n"}
{"label": "set|service", "code": "package xml;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * Field DI injection Hello World using XML config\n *\n * Created by vvedenin on 11/14/2015.\n */\npublic class XmlFieldAutowired {\n    public static class Notifier {\n        @Autowired\n        private NotificationService service;\n\n        public void METHOD_NAME(NotificationService service) {\n            this.service = service;\n        }\n\n        public void send(String message) {\n            service.send(\"email: \" + message);\n        }\n    }\n\n    public static class EMailService implements NotificationService {\n        public void send(String message) {\n            System.out.println(\"I send \" + message);\n        }\n    }\n\n    public interface NotificationService {\n        void send(String message);\n    }\n\n    public static void main(String[] args)  throws Exception {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n                \"fieldAutowired.xml\");\n        Notifier notifier =  context.getBean(Notifier.class);\n        notifier.send(\"Hello world!\"); // Print \"I send email: Hello world!\"\n    }\n}\n"}
{"label": "send", "code": "package xml;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * Constructor DI injection Hello World using XML config\n *\n * Created by vvedenin on 11/14/2015.\n */\npublic class XmlConstructorAutowired {\n    public static class Notifier {\n        private final NotificationService service;\n\n        @Autowired\n        public Notifier(NotificationService service) {\n            this.service = service;\n        }\n\n        public void METHOD_NAME(String message) {\n            service.METHOD_NAME(\"email: \" + message);\n        }\n    }\n\n    public static class EMailService implements NotificationService {\n        public void METHOD_NAME(String message) {\n            System.out.println(\"I send \" + message);\n        }\n    }\n\n    public interface NotificationService {\n        void METHOD_NAME(String message);\n    }\n\n    public static void main(String[] args)  throws Exception {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\n                \"constructorAutowired.xml\");\n        Notifier notifier =  context.getBean(Notifier.class);\n        notifier.METHOD_NAME(\"Hello world!\"); // Print \"I send email: Hello world!\"\n    }\n}\n"}
{"label": "set|service", "code": "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Setter DI injection Hello World using Java annotation\n *\n * Created by vvedenin on 11/14/2015.\n */\npublic class SpringSetterAutowired {\n    public static class Notifier {\n        private NotificationService service;\n\n        @Autowired\n        public void METHOD_NAME(NotificationService service) {\n            this.service = service;\n        }\n\n        public void send(String message) {\n            service.send(\"email: \" + message);\n        }\n    }\n\n    public static class EMailService implements NotificationService {\n        public void send(String message) {\n            System.out.println(\"I send \" + message);\n        }\n    }\n\n    public interface NotificationService {\n        void send(String message);\n    }\n\n    @Configuration\n    public static class DIConfiguration {\n        @Bean\n        public Notifier getNotifier(NotificationService service){\n            return new Notifier();\n        }\n\n        @Bean\n        public NotificationService getNotificationService(){\n            return new EMailService();\n        }\n    }\n\n    public static void main(String[] args)  throws Exception {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DIConfiguration.class);\n        Notifier notifier =  context.getBean(Notifier.class);\n        notifier.send(\"Hello World!\"); // Print \"I send email: Hello World!\"\n    }\n}\n"}
{"label": "send", "code": "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Field DI injection Hello World using Java annotation\n *\n * Created by vvedenin on 11/14/2015.\n */\npublic class SpringFieldAutowired {\n    public static class Notifier {\n        @Autowired\n        private NotificationService service;\n\n        public void METHOD_NAME(String message) {\n            service.METHOD_NAME(\"email: \" + message);\n        }\n    }\n\n    public static class EMailService implements NotificationService {\n        public void METHOD_NAME(String message) {\n            System.out.println(\"I send \" + message);\n        }\n    }\n\n    public interface NotificationService {\n        void METHOD_NAME(String message);\n    }\n\n    @Configuration\n    public static class DIConfiguration {\n        @Bean\n        public Notifier getNotifier(NotificationService service){\n            return new Notifier();\n        }\n\n        @Bean\n        public NotificationService getNotificationService(){\n            return new EMailService();\n        }\n    }\n\n    public static void main(String[] args)  throws Exception {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DIConfiguration.class);\n        Notifier notifier =  context.getBean(Notifier.class);\n        notifier.METHOD_NAME(\"Hello World!\"); // Print \"I send email: Hello World!\"\n    }\n}\n"}
{"label": "main", "code": "import org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.HashBag;\n\nimport java.util.Arrays;\n\n/**\n *  Hello World using Apache HashBag\n */\npublic class ApacheHashBag {\n\n    public static void METHOD_NAME(String[] args) {\n        // Parse text to separate words\n        String INPUT_TEXT = \"Hello World! Hello All! Hi World!\";\n        // Create Multiset\n        Bag bag = new HashBag(Arrays.asList(INPUT_TEXT.split(\" \")));\n\n        // Print count words\n        System.out.println(bag); // print [1:Hi,2:Hello,2:World!,1:All!] - in random orders\n        // Print all unique words\n        System.out.println(bag.uniqueSet());    // print [Hi, Hello, World!, All!] - in random orders\n\n        // Print count occurrences of words\n        System.out.println(\"Hello = \" + bag.getCount(\"Hello\"));    // print 2\n        System.out.println(\"World = \" + bag.getCount(\"World!\"));    // print 2\n        System.out.println(\"All = \" + bag.getCount(\"All!\"));    // print 1\n        System.out.println(\"Hi = \" + bag.getCount(\"Hi\"));    // print 1\n        System.out.println(\"Empty = \" + bag.getCount(\"Empty\"));    // print 0\n\n        // Print count all words\n        System.out.println(bag.size());    //print 6\n\n        // Print count unique words\n        System.out.println(bag.uniqueSet().size());    //print 4\n    }\n}\n"}
{"label": "main", "code": "import org.apache.commons.collections4.MultiMap;\nimport org.apache.commons.collections4.map.MultiValueMap;\n\nimport java.util.*;\n\npublic class ApacheMultiValueMapLinked {\n\n    // Task: parser string with text and show all indexes of all words\n    public static void METHOD_NAME(String[] args) {\n        String INPUT_TEXT = \"Hello World! Hello All! Hi World!\";\n        // Parse text to words and index\n        List<String> words = Arrays.asList(INPUT_TEXT.split(\" \"));\n        // Create Multimap\n        MultiMap<String, Integer> multiMap = MultiValueMap.multiValueMap(new LinkedHashMap<String, Set>(), LinkedHashSet.class);\n\n        // Fill Multimap\n        int i = 0;\n        for(String word: words) {\n            multiMap.put(word, i);\n            i++;\n        }\n\n        // Print all words\n        System.out.println(multiMap); // print {Hello=[0, 2], World!=[1, 5], All!=[3], Hi=[4]} - in predictable iteration order\n        // Print all unique words\n        System.out.println(multiMap.keySet());    // print [Hello, World!, All!, Hi] - in predictable iteration order\n\n        // Print all indexes\n        System.out.println(\"Hello = \" + multiMap.get(\"Hello\"));    // print [0, 2]\n        System.out.println(\"World = \" + multiMap.get(\"World!\"));    // print [1, 5]\n        System.out.println(\"All = \" + multiMap.get(\"All!\"));    // print [3]\n        System.out.println(\"Hi = \" + multiMap.get(\"Hi\"));    // print [4]\n        System.out.println(\"Empty = \" + multiMap.get(\"Empty\"));    // print null\n\n        // Print count unique words\n        System.out.println(multiMap.keySet().size());    //print 4\n    }\n}\n"}
{"label": "main", "code": "import org.apache.commons.collections4.BidiMap;\nimport org.apache.commons.collections4.bidimap.DualHashBidiMap;\n\n/**\n *  Hello World using Apache BidiMap\n */\npublic class ApacheBidiMap {\n\n    // Task: create collection to translate Polish-English words in two ways\n    public static void METHOD_NAME(String[] args) {\n        String[] englishWords = {\"one\", \"two\", \"three\",\"ball\",\"snow\"};\n        String[] russianWords = {\"jeden\", \"dwa\", \"trzy\", \"kula\", \"snieg\"};\n\n        // Create Multiset\n        BidiMap<String, String> biMap = new DualHashBidiMap();\n        // Create Polish-English dictionary\n        int i = 0;\n        for(String englishWord: englishWords) {\n            biMap.put(englishWord, russianWords[i]);\n            i++;\n        }\n\n        // Print count words\n        System.out.println(biMap); // Print \"{ball=kula, snow=snieg, one=jeden, two=dwa, three=trzy}\" - in random orders\n        // Print unique words\n        System.out.println(biMap.keySet());    // print \"[ball, snow, one, two, three]\"- in random orders\n        System.out.println(biMap.values());    // print \"[kula, snieg, jeden, dwa, trzy]\" - in random orders\n\n        // Print translate by words\n        System.out.println(\"one = \" + biMap.get(\"one\"));    // print one = jeden\n        System.out.println(\"two = \" + biMap.get(\"two\"));    // print two = dwa\n        System.out.println(\"kula = \" + biMap.getKey(\"kula\"));    // print kula = ball\n        System.out.println(\"snieg = \" + biMap.getKey(\"snieg\"));    // print snieg = snow\n        System.out.println(\"empty = \" + biMap.get(\"empty\"));    // print empty = null\n\n        // Print count word's pair\n        System.out.println(biMap.size());    //print 5\n\n    }\n}\n"}
{"label": "main", "code": "import org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.TreeBag;\n\nimport java.util.Arrays;\n\npublic class ApacheTreeBag {\n\n    public static void METHOD_NAME(String[] args) {\n        // Parse text to separate words\n        String INPUT_TEXT = \"Hello World! Hello All! Hi World!\";\n        // Create Multiset\n        Bag bag = new TreeBag(Arrays.asList(INPUT_TEXT.split(\" \")));\n\n        // Print count words\n        System.out.println(bag); // print [1:All!,2:Hello,1:Hi,2:World!]- in natural (alphabet) order\n        // Print all unique words\n        System.out.println(bag.uniqueSet());    // print [All!, Hello, Hi, World!]- in natural (alphabet) order\n\n        // Print count occurrences of words\n        System.out.println(\"Hello = \" + bag.getCount(\"Hello\"));    // print 2\n        System.out.println(\"World = \" + bag.getCount(\"World!\"));    // print 2\n        System.out.println(\"All = \" + bag.getCount(\"All!\"));    // print 1\n        System.out.println(\"Hi = \" + bag.getCount(\"Hi\"));    // print 1\n        System.out.println(\"Empty = \" + bag.getCount(\"Empty\"));    // print 0\n\n        // Print count all words\n        System.out.println(bag.size());    //print 6\n\n        // Print count unique words\n        System.out.println(bag.uniqueSet().size());    //print 4\n    }\n}\n"}
{"label": "main", "code": "import org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.bag.SynchronizedBag;\n\nimport java.util.Arrays;\n\npublic class ApacheSynchronizedBag {\n\n    public static void METHOD_NAME(String[] args) {\n        // Parse text to separate words\n        String INPUT_TEXT = \"Hello World! Hello All! Hi World!\";\n        // Create Multiset\n        Bag bag = SynchronizedBag.synchronizedBag(new HashBag(Arrays.asList(INPUT_TEXT.split(\" \"))));\n\n        // Print count words\n        System.out.println(bag); // print [1:Hi,2:Hello,2:World!,1:All!] - in random orders\n        // Print all unique words\n        System.out.println(bag.uniqueSet());    // print [Hi, Hello, World!, All!] - in random orders\n\n        // Print count occurrences of words\n        System.out.println(\"Hello = \" + bag.getCount(\"Hello\"));    // print 2\n        System.out.println(\"World = \" + bag.getCount(\"World!\"));    // print 2\n        System.out.println(\"All = \" + bag.getCount(\"All!\"));    // print 1\n        System.out.println(\"Hi = \" + bag.getCount(\"Hi\"));    // print 1\n        System.out.println(\"Empty = \" + bag.getCount(\"Empty\"));    // print 0\n\n        // Print count all words\n        System.out.println(bag.size());    //print 6\n\n        // Print count unique words\n        System.out.println(bag.uniqueSet().size());    //print 4\n    }\n}\n"}
{"label": "main", "code": "import org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.bag.SynchronizedSortedBag;\nimport org.apache.commons.collections4.bag.TreeBag;\n\nimport java.util.Arrays;\n\npublic class ApacheSynchronizedSortedBag {\n\n    public static void METHOD_NAME(String[] args) {\n        // Parse text to separate words\n        String INPUT_TEXT = \"Hello World! Hello All! Hi World!\";\n        // Create Multiset\n        Bag bag = SynchronizedSortedBag.synchronizedBag(new TreeBag(Arrays.asList(INPUT_TEXT.split(\" \"))));\n\n        // Print count words\n        System.out.println(bag); // print [1:All!,2:Hello,1:Hi,2:World!]- in natural (alphabet) order\n        // Print all unique words\n        System.out.println(bag.uniqueSet());    // print [All!, Hello, Hi, World!]- in natural (alphabet) order\n\n\n        // Print count occurrences of words\n        System.out.println(\"Hello = \" + bag.getCount(\"Hello\"));    // print 2\n        System.out.println(\"World = \" + bag.getCount(\"World!\"));    // print 2\n        System.out.println(\"All = \" + bag.getCount(\"All!\"));    // print 1\n        System.out.println(\"Hi = \" + bag.getCount(\"Hi\"));    // print 1\n        System.out.println(\"Empty = \" + bag.getCount(\"Empty\"));    // print 0\n\n        // Print count all words\n        System.out.println(bag.size());    //print 6\n\n        // Print count unique words\n        System.out.println(bag.uniqueSet().size());    //print 4\n    }\n}\n"}
{"label": "main", "code": "import org.apache.commons.collections4.MultiMap;\nimport org.apache.commons.collections4.map.MultiValueMap;\n\nimport java.util.*;\n\npublic class ApacheMultiValueMapTree {\n\n    // Task: parser string with text and show all indexes of all words\n    public static void METHOD_NAME(String[] args) {\n        String INPUT_TEXT = \"Hello World! Hello All! Hi World!\";\n        // Parse text to words and index\n        List<String> words = Arrays.asList(INPUT_TEXT.split(\" \"));\n        // Create Multimap\n        MultiMap<String, Integer> multiMap =  MultiValueMap.multiValueMap(new TreeMap<String, Set>(), TreeSet.class);\n\n        // Fill Multimap\n        int i = 0;\n        for(String word: words) {\n            multiMap.put(word, i);\n            i++;\n        }\n\n        // Print all words\n        System.out.println(multiMap); // print {All!=[3], Hello=[0, 2], Hi=[4], World!=[1, 5]} -in natural order\n        // Print all unique words\n        System.out.println(multiMap.keySet());    // print [All!, Hello, Hi, World!] in natural order\n\n        // Print all indexes\n        System.out.println(\"Hello = \" + multiMap.get(\"Hello\"));    // print [0, 2]\n        System.out.println(\"World = \" + multiMap.get(\"World!\"));    // print [1, 5]\n        System.out.println(\"All = \" + multiMap.get(\"All!\"));    // print [3]\n        System.out.println(\"Hi = \" + multiMap.get(\"Hi\"));    // print [4]\n        System.out.println(\"Empty = \" + multiMap.get(\"Empty\"));    // print null\n\n        // Print count unique words\n        System.out.println(multiMap.keySet().size());    //print 4\n    }\n}\n"}
{"label": "main", "code": "import org.apache.commons.collections4.MultiMap;\nimport org.apache.commons.collections4.map.MultiValueMap;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ApacheMultiValueMap {\n\n    // Task: parser string with text and show all indexes of all words\n    public static void METHOD_NAME(String[] args) {\n        String INPUT_TEXT = \"Hello World! Hello All! Hi World!\";\n        // Parse text to words and index\n        List<String> words = Arrays.asList(INPUT_TEXT.split(\" \"));\n        // Create Multimap\n        MultiMap<String, Integer> multiMap = new MultiValueMap<String, Integer>();\n\n\n        // Fill Multimap\n        int i = 0;\n        for(String word: words) {\n            multiMap.put(word, i);\n            i++;\n        }\n\n        // Print all words\n        System.out.println(multiMap); // print {Hi=[4], Hello=[0, 2], World!=[1, 5], All!=[3]} - in random orders\n        // Print all unique words\n        System.out.println(multiMap.keySet());    // print [Hi, Hello, World!, All!] - in random orders\n\n        // Print all indexes\n        System.out.println(\"Hello = \" + multiMap.get(\"Hello\"));    // print [0, 2]\n        System.out.println(\"World = \" + multiMap.get(\"World!\"));    // print [1, 5]\n        System.out.println(\"All = \" + multiMap.get(\"All!\"));    // print [3]\n        System.out.println(\"Hi = \" + multiMap.get(\"Hi\"));    // print [4]\n        System.out.println(\"Empty = \" + multiMap.get(\"Empty\"));    // print null\n\n        // Print count unique words\n        System.out.println(multiMap.keySet().size());    //print 4\n    }\n}\n"}
